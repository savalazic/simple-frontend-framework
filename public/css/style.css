/*
 * Styles
 */
html,
body,
div,
span,
applet,
object,
iframe,
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote,
pre,
a,
abbr,
acronym,
address,
big,
cite,
code,
del,
dfn,
em,
img,
ins,
kbd,
q,
s,
samp,
small,
strike,
strong,
sub,
sup,
tt,
var,
b,
u,
i,
center,
dl,
dt,
dd,
ol,
ul,
li,
fieldset,
form,
label,
legend,
table,
caption,
tbody,
tfoot,
thead,
tr,
th,
td,
article,
aside,
canvas,
details,
embed,
figure,
figcaption,
footer,
header,
hgroup,
menu,
nav,
output,
ruby,
section,
summary,
time,
mark,
audio,
video,
nav li {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
}
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
menu,
nav,
section {
  display: block;
}
body {
  line-height: 1;
}
ol,
ul {
  list-style: none;
}
blockquote,
q {
  quotes: none;
}
blockquote:before,
blockquote:after,
q:before,
q:after {
  content: '';
  content: none;
}
table {
  border-collapse: collapse;
  border-spacing: 0;
}
*,
*:before,
*:after {
  box-sizing: border-box;
}
body {
  font-family: 'Helvetica Neue', sans-serif;
  font-style: normal;
  font-weight: 300;
  color: #666;
  overflow-x: hidden;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}
::-moz-selection {
  background: rgba(41,128,185,0.1);
}
::selection {
  background: rgba(41,128,185,0.1);
}
* {
  -webkit-tap-highlight-color: transparent;
}
img,
a,
.button,
.link {
  -webkit-user-select: none;
     -moz-user-select: none;
      -ms-user-select: none;
          user-select: none;
}
img {
  width: 100%;
  max-width: 100%;
}
@font-face {
  font-family: 'Ionicons';
  src: url("../assets/fonts/ionicons/ionicons.eot");
  src: local("Ionicons"), url("../assets/fonts/ionicons/ionicons.eot?#iefix") format("embedded-opentype"), url("../assets/fonts/ionicons/ionicons.woff") format("woff"), url("../assets/fonts/ionicons/ionicons.ttf") format("truetype"), url("../assets/fonts/ionicons/ionicons.svg#Ionicons") format("svg");
}
@font-face {
  font-family: "petrochemicons";
  src: url("../assets/fonts/custom/petrochemicons.eot");
  src: url("../assets/fonts/custom/petrochemicons.eot?#iefix") format('eot'), url("../assets/fonts/custom/petrochemicons.woff") format('woff'), url("../assets/fonts/custom/petrochemicons.ttf") format('truetype');
  font-weight: normal;
  font-style: normal;
}
.ico {
  font-family: "petrochemicons";
  vertical-align: middle;
  font-size: 50px;
}
.ico:before {
  display: inline-block;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-style: normal;
  font-variant: normal;
  font-weight: normal;
  line-height: 1;
/* speak: none; only necessary if not using the private unicode range (firstGlyph option) */
  text-decoration: none;
  text-transform: none;
}
.ico-lg {
  font-size: 1.333333333333333em;
  line-height: 0.75em;
  vertical-align: -15%;
}
.ico-2x {
  font-size: 2em;
}
.ico-3x {
  font-size: 3em;
}
.ico-4x {
  font-size: 4em;
}
.ico-5x {
  font-size: 5em;
}
.ico-fw {
  width: 1.285714285714286em;
  text-align: center;
}
.ico-test1:before {
  content: "\E001";
}
.ico-test2:before {
  content: "\E002";
}
.ico-test3:before {
  content: "\E003";
}
.ico-test4:before {
  content: "\E004";
}
.ico-test5:before {
  content: "\E005";
}
.ico-test6:before {
  content: "\E006";
}
.ico-test7:before {
  content: "\E007";
}
.icon {
  position: relative;
/**
   * Set defaults.
   */
/**
   * Style arrow ( up / down ) icon.
   */
}
.icon:before {
  font-family: 'Ionicons';
  font-size: 1.375rem;
/**
     * Register basic icons.
     */
}
.phone.icon:before {
  content: '\f2d2';
}
.facebook.icon:before {
  content: '\f231';
}
.twitter.icon:before {
  content: '\f243';
}
.instagram.icon:before {
  content: '\f351';
}
.youtube.icon:before {
  content: '\f24d';
}
.pinterest.icon:before {
  content: '\f2b1';
}
.linkedin.icon:before {
  content: '\f239';
}
.icon.arrow {
  font-size: 1.875rem;
  display: inline-block;
  margin: auto;
/**
     * Arrow transitions on hover.
     */
}
.icon.arrow:before {
  pointer-events: none;
  -webkit-transition: color 400ms;
  transition: color 400ms;
}
.up.icon.arrow:before {
  content: '\f3d8';
  font-size: 2.5rem;
}
.down.icon.arrow:before {
  content: '\f3d0';
}
.icon.arrow:hover:before {
  color: #2980b9;
}
.icon.arrow:hover:after {
  -webkit-transform: translate(-50%, -50%) scale(1.1);
          transform: translate(-50%, -50%) scale(1.1);
}
section {
  padding: 100px 0;
}
section,
footer {
  background: #fff;
}
section.skewed-top,
footer.skewed-top {
  position: relative;
  z-index: 1;
}
section.skewed-top .col,
footer.skewed-top .col {
  z-index: 99999;
}
section.skewed-top::before,
footer.skewed-top::before {
  background: inherit;
  content: '';
  display: block;
  height: 100%;
  left: 0;
  right: 0;
  top: 0;
  position: absolute;
  z-index: -1;
  bottom: 0;
  -webkit-transform: skewY(3deg);
          transform: skewY(3deg);
  -webkit-transform-origin: 100%;
          transform-origin: 100%;
  -webkit-backface-visibility: hidden;
}
section.skewed-bottom,
footer.skewed-bottom {
  position: relative;
  z-index: 1;
}
section.skewed-bottom .col,
footer.skewed-bottom .col {
  z-index: 99999;
}
section.skewed-bottom::after,
footer.skewed-bottom::after {
  background: inherit;
  content: '';
  display: block;
  height: 100%;
  right: 0;
  left: 0;
  bottom: -100%;
  position: absolute;
  z-index: -1;
  -webkit-transform: skewY(3deg);
          transform: skewY(3deg);
  -webkit-transform-origin: 100%;
          transform-origin: 100%;
  -webkit-backface-visibility: hidden;
}
.block {
  display: table;
  position: relative;
  width: 100%;
  table-layout: fixed;
  overflow: visible;
/**
   * Set block to full height.
   */
/**
   * Set block to site width.
   */
/**
   * Set block to full width.
   */
/**
   * Registe block's children
   * as it's helper elements.
   */
}
.block.fullHeight {
  height: 100vh;
}
.block.siteWidth {
  max-width: 1000px;
  margin: auto;
}
.block.fullWidth {
  max-width: 100%;
  margin: auto;
}
.block.block-reverse {
  direction: rtl;
}
.block.block-reverse > .col {
  direction: ltr;
}
.block > .col {
  display: table-cell;
  width: auto;
  height: 100%;
  vertical-align: top;
  padding: 15px 10px;
/**
     * Set alignments.
     */
/**
     * Revert to display
     * block on mobile.
     */
}
.block > .col.col-1 {
  width: 8.333333%;
}
.block > .col.col-2 {
  width: 16.666667%;
}
.block > .col.col-3 {
  width: 25%;
}
.block > .col.col-4 {
  width: 33.333333%;
}
.block > .col.col-5 {
  width: 41.666667%;
}
.block > .col.col-6 {
  width: 50%;
}
.block > .col.col-7 {
  width: 58.333333%;
}
.block > .col.col-8 {
  width: 66.666667%;
}
.block > .col.col-9 {
  width: 75%;
}
.block > .col.col-10 {
  width: 83.333333%;
}
.block > .col.col-11 {
  width: 91.666667%;
}
.block > .col.col-12 {
  width: 100%;
}
.block > .col.middle {
  vertical-align: middle;
}
@media (max-width: 768px) {
  .block > .col.middle {
    padding-top: 150px;
  }
}
.block > .col.bottom {
  vertical-align: bottom;
}
.block > .col.center {
  text-align: center;
}
@media only screen and (max-width: 768px) {
  .block > .col {
    display: block;
  }
}
h1 {
  font-size: 4rem;
  margin-bottom: 1.25rem;
}
h2 {
  font-size: 2.625rem;
  margin-bottom: 1.125rem;
}
h3 {
  font-size: 2rem;
  margin-bottom: 1rem;
}
h4 {
  font-size: 1.75rem;
  margin-bottom: 0.875rem;
}
h5 {
  font-size: 1.375rem;
  margin-bottom: 0.75rem;
  letter-spacing: 0.0625rem;
}
h6,
nav li {
  font-size: 0.875rem;
  margin-bottom: 0.5rem;
  letter-spacing: 0.0625rem;
  font-weight: 600;
}
p {
  font-size: 1.125rem;
  line-height: 1.25;
}
a {
  color: inherit;
  text-decoration: none;
}
h1,
h2,
h3,
h4,
h5,
h6,
nav li {
  text-transform: uppercase;
}
h1,
h2,
h3 {
  overflow: hidden;
  text-overflow: ellipsis;
}
.layer {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: -1;
/**
   * Image defaults.
   */
/**
   * Itterate through layers and scale them
   * based on their parallax strenght.
   */
}
.layer.image {
  background-position: center;
  background-repeat: no-repeat;
  background-size: cover;
}
.layer[data-parallax="0"] {
  top: 0px;
  bottom: 0px;
}
.layer[data-parallax="0.1"] {
  top: -50px;
  bottom: -50px;
}
.layer[data-parallax="0.2"] {
  top: -100px;
  bottom: -100px;
}
.layer[data-parallax="0.3"] {
  top: -150px;
  bottom: -150px;
}
.layer[data-parallax="0.4"] {
  top: -200px;
  bottom: -200px;
}
.layer[data-parallax="0.5"] {
  top: -250px;
  bottom: -250px;
}
.layer[data-parallax="0.6"] {
  top: -300px;
  bottom: -300px;
}
.layer[data-parallax="0.7"] {
  top: -350px;
  bottom: -350px;
}
.layer[data-parallax="0.8"] {
  top: -400px;
  bottom: -400px;
}
.layer[data-parallax="0.9"] {
  top: -450px;
  bottom: -450px;
}
.layer[data-parallax="1"] {
  top: -500px;
  bottom: -500px;
}
.layer.overlay {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  overflow: hidden;
  pointer-events: none;
  z-index: -1;
}
.layer.overlay.black {
  background: rgba(0,0,0,0.8);
}
.layer.overlay.white {
  background: rgba(255,255,255,0.2);
}
.layer.video {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  overflow: hidden;
  pointer-events: none;
}
.layer.video > .col {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
}
.layer.video > .col video {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border: none;
}
@media (min-aspect-ratio: 16/9) {
  .layer.video > .col video {
    height: 1000%;
    top: -450%;
  }
}
@media (max-aspect-ratio: 16/9) {
  .layer.video > .col video {
    width: 1000%;
    left: -450%;
  }
}
.zoom.layer.video > .col {
  top: -18%;
  right: -18%;
  bottom: -18%;
  left: -18%;
}
.button {
  position: relative;
  display: inline-block;
  cursor: pointer;
  padding: 15px 40px;
  text-align: center;
  text-transform: uppercase;
  letter-spacing: 2px;
  color: #fff;
  background: #2980b9;
  border: none;
  -webkit-transition: background 300ms;
  transition: background 300ms;
}
.button:hover,
.button:active {
  background: #2573a7;
}
.card {
  margin: 10px;
  text-align: left;
  cursor: pointer;
}
.card * {
  pointer-events: none;
}
.card .image {
  position: relative;
  width: 100%;
  padding: 50% 16px 4px;
  color: #fff;
  -webkit-transition: -webkit-filter 300ms;
  transition: -webkit-filter 300ms;
  transition: filter 300ms;
  transition: filter 300ms, -webkit-filter 300ms;
}
.card:hover .image {
  -webkit-filter: brightness(110%) saturate(110%);
          filter: brightness(110%) saturate(110%);
}
.card .content {
  padding: 24px 16px 16px;
}
.card .content h5 {
  font-size: 1.5rem;
}
.card .content .price {
  font-weight: 600;
  margin-left: 7px;
}
.card .content .price:before {
  content: 'AED';
  font-size: 50%;
  margin-right: 3px;
}
.card .content .link {
  margin-top: 20px;
}
.card.full {
  box-shadow: 0 0 50px 0 rgba(0,0,0,0.1);
}
.card.full .image {
  padding-top: 70%;
}
.card.full .content {
  background: #fff;
}
.card.full .content .wrap {
  height: 160px;
}
.card.full .content h5 {
  font-weight: 600;
  max-height: 70px;
  display: block;
  overflow: hidden;
  text-overflow: ellipsis;
  display: -webkit-box;
  -webkit-line-clamp: 3;
  -webkit-box-orient: vertical;
}
.card.full .content p {
  height: 44px;
  display: block;
  overflow: hidden;
  text-overflow: ellipsis;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
}
footer {
  background: #333;
  color: #fff;
  padding: 48px 36px;
}
footer img {
  max-width: 90px;
}
@media (max-width: 768px) {
  footer img {
    margin: 20px 0 40px;
  }
}
footer p {
  margin: 10px 0;
}
@media (max-width: 768px) {
  footer p {
    max-width: 240px;
    margin: 10px auto;
  }
}
footer .contact a {
  margin: 0 10px;
  -webkit-transition: color 300ms;
  transition: color 300ms;
}
footer .contact a:hover {
  color: #34495e;
}
footer .copyright {
  margin-bottom: 5px;
  font-size: 0.875rem;
  color: rgba(255,255,255,0.5);
}
footer .by {
  color: rgba(255,255,255,0.5);
  -webkit-transition: color 300ms;
  transition: color 300ms;
}
footer .by:hover {
  color: #fff;
}
footer .icons {
  margin: 40px 0 0;
}
footer .icons li {
  display: inline-block;
  margin: 10px;
}
footer .icons li a {
  font-size: 1.25rem;
  color: rgba(255,255,255,0.25);
  -webkit-transition: color 300ms;
  transition: color 300ms;
}
footer .icons li a:hover {
  color: rgba(255,255,255,0.75);
}
@media (max-width: 768px) {
  footer .icon {
    margin: 40px auto 0;
  }
}
#loader {
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  pointer-events: none;
  z-index: 999999999999;
  background: #fff;
}
[data-ready='true'] #loader {
  -webkit-animation: fade-out 1000ms 2000ms forwards;
          animation: fade-out 1000ms 2000ms forwards;
}
@-webkit-keyframes fade-out {
  100% {
    opacity: 0;
  }
}
@keyframes fade-out {
  100% {
    opacity: 0;
  }
}
nav {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  z-index: 9999;
  color: #2980b9;
  background: rgba(255,255,255,0.85);
  text-align: center;
}
@media (max-width: 768px) {
  nav {
    text-align: left;
  }
}
nav li {
  display: inline-block;
  vertical-align: bottom;
}
@media (max-width: 768px) {
  nav li.menu-item {
    display: none;
  }
}
nav .primary {
  display: inline-block;
  -webkit-transition: -webkit-transform 500ms;
  transition: -webkit-transform 500ms;
  transition: transform 500ms;
  transition: transform 500ms, -webkit-transform 500ms;
}
@media (min-width: 1200px) {
  nav .primary {
    -webkit-transform: translateX(-5px);
            transform: translateX(-5px);
  }
}
nav .primary li {
  margin: 20px 10px;
  -webkit-transition: margin-left 500ms, margin-right 500ms;
  transition: margin-left 500ms, margin-right 500ms;
}
@media (min-width: 1200px) {
  nav .primary li {
    margin: 20px;
  }
}
nav .secondary {
  position: absolute;
  top: 0;
  right: 0;
}
nav .secondary li {
  font-size: 0.75rem;
  margin: 16px 20px 0 0;
}
nav .secondary li.lang {
  font-family: $arabic;
  font-weight: 300;
}
nav .secondary li.phone:before {
  font-size: 0.625rem;
  margin-right: 0.375rem;
}
nav .menu-item a {
  position: relative;
}
nav .menu-item a:before {
  content: '';
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  border-bottom: 1px solid #34495e;
  -webkit-transform: scaleX(0);
          transform: scaleX(0);
  -webkit-transition: -webkit-transform 600ms;
  transition: -webkit-transform 600ms;
  transition: transform 600ms;
  transition: transform 600ms, -webkit-transform 600ms;
}
nav .menu-item a:hover:before {
  -webkit-transform: scaleX(1);
          transform: scaleX(1);
}
nav li.logo {
  margin: 16px 20px;
}
nav li.logo a:before {
  display: none;
}
@media (max-width: 768px) {
  nav li.logo {
    margin: 14px 16px;
  }
}
nav li.logo img {
  max-height: 56px;
}
@media (max-width: 768px) {
  nav li.logo img {
    max-height: 40px;
  }
}
#header {
  color: #fff;
}
@charset 'UTF-8';
.slick-loading .slick-list {
  background: #fff url("../assets/images/ajax-loader.gif") center center no-repeat;
}
@font-face {
  font-family: 'slick';
  font-weight: normal;
  font-style: normal;
  src: url("../assets/fonts/slick/slick.eot");
  src: url("../assets/fonts/slick/slick.eot?#iefix") format('embedded-opentype'), url("../assets/fonts/slick/slick.woff") format('woff'), url("../assets/fonts/slick/slick.ttf") format('truetype'), url("../assets/fonts/slick/slick.svg#slick") format('svg');
}
.slick-prev,
.slick-next {
  font-size: 0;
  line-height: 0;
  position: absolute;
  top: 50%;
  display: block;
  width: 20px;
  height: 20px;
  padding: 0;
  -webkit-transform: translate(0, -50%);
  transform: translate(0, -50%);
  cursor: pointer;
  color: transparent;
  border: none;
  outline: none;
  background: transparent;
}
.slick-prev:hover,
.slick-prev:focus,
.slick-next:hover,
.slick-next:focus {
  color: transparent;
  outline: none;
  background: transparent;
}
.slick-prev:hover:before,
.slick-prev:focus:before,
.slick-next:hover:before,
.slick-next:focus:before {
  opacity: 1;
}
.slick-prev.slick-disabled:before,
.slick-next.slick-disabled:before {
  opacity: 0.25;
}
.slick-prev:before,
.slick-next:before {
  font-family: 'slick';
  font-size: 20px;
  line-height: 1;
  opacity: 0.75;
  color: #fff;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}
.slick-prev {
  left: -25px;
}
[dir='rtl'] .slick-prev {
  right: -25px;
  left: auto;
}
.slick-prev:before {
  content: '←';
}
[dir='rtl'] .slick-prev:before {
  content: '→';
}
.slick-next {
  right: -25px;
}
[dir='rtl'] .slick-next {
  right: auto;
  left: -25px;
}
.slick-next:before {
  content: '→';
}
[dir='rtl'] .slick-next:before {
  content: '←';
}
.slick-dotted.slick-slider {
  margin-bottom: 30px;
}
.slick-dots {
  position: absolute;
  bottom: -25px;
  display: block;
  width: 100%;
  padding: 0;
  margin: 0;
  list-style: none;
  text-align: center;
}
.slick-dots li {
  position: relative;
  display: inline-block;
  width: 20px;
  height: 20px;
  margin: 0 5px;
  padding: 0;
  cursor: pointer;
}
.slick-dots li button {
  font-size: 0;
  line-height: 0;
  display: block;
  width: 20px;
  height: 20px;
  padding: 5px;
  cursor: pointer;
  color: transparent;
  border: 0;
  outline: none;
  background: transparent;
}
.slick-dots li button:hover,
.slick-dots li button:focus {
  outline: none;
}
.slick-dots li button:hover:before,
.slick-dots li button:focus:before {
  opacity: 1;
}
.slick-dots li button:before {
  font-family: 'slick';
  font-size: 6px;
  line-height: 20px;
  position: absolute;
  top: 0;
  left: 0;
  width: 20px;
  height: 20px;
  content: '•';
  text-align: center;
  opacity: 0.25;
  color: #2e3233;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}
.slick-dots li.slick-active button:before {
  opacity: 0.75;
  color: #2e3233;
}
.slick-slider {
  position: relative;
  display: block;
  box-sizing: border-box;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  -webkit-touch-callout: none;
  -khtml-user-select: none;
  touch-action: pan-y;
  -webkit-tap-highlight-color: transparent;
}
.slick-list {
  position: relative;
  display: block;
  overflow: hidden;
  margin: 0;
  padding: 0;
}
.slick-list:focus {
  outline: none;
}
.slick-list.dragging {
  cursor: pointer;
  cursor: hand;
}
.slick-slider .slick-track,
.slick-slider .slick-list {
  -webkit-transform: translate3d(0, 0, 0);
  transform: translate3d(0, 0, 0);
}
.slick-track {
  position: relative;
  top: 0;
  left: 0;
  display: block;
}
.slick-track:before,
.slick-track:after {
  display: table;
  content: '';
}
.slick-track:after {
  clear: both;
}
.slick-loading .slick-track {
  visibility: hidden;
}
.slick-slide {
  display: none;
  float: left;
  height: 100%;
  min-height: 1px;
}
[dir='rtl'] .slick-slide {
  float: right;
}
.slick-slide img {
  display: block;
}
.slick-slide.slick-loading img {
  display: none;
}
.slick-slide.dragging img {
  pointer-events: none;
}
.slick-initialized .slick-slide {
  display: block;
}
.slick-loading .slick-slide {
  visibility: hidden;
}
.slick-vertical .slick-slide {
  display: block;
  height: auto;
  border: 1px solid transparent;
}
.slick-arrow.slick-hidden {
  display: none;
}
.slideshow img {
  text-align: center;
  max-width: 100px;
  margin: 0 auto;
}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jc3Mvc3R5bGUuc3R5bCIsIm5vZGVfbW9kdWxlcy9zdHlsdXMtbWl4ZXIvbGliL3N0eWx1cy1taXhlci5zdHlsIiwic3JjL2Nzcy9fX3RlbXAuc3R5bCIsInNyYy9jc3MvYmFzZS9ib2R5LnN0eWwiLCJzcmMvY3NzL2Jhc2UvaWNvbi1mb250LnN0eWwiLCJzcmMvY3NzL2Jhc2UvaWNvbnMuc3R5bCIsInNyYy9jc3MvYmFzZS9sYXlvdXQuc3R5bCIsInNyYy9jc3MvYmFzZS90eXBlLnN0eWwiLCJzcmMvY3NzL2xheWVycy9sYXllci5zdHlsIiwic3JjL2Nzcy9sYXllcnMvb3ZlcmxheS5zdHlsIiwic3JjL2Nzcy9sYXllcnMvdmlkZW8uc3R5bCIsInNyYy9jc3MvY29tcG9uZW50cy9idXR0b24uc3R5bCIsInNyYy9jc3MvY29tcG9uZW50cy9jYXJkLnN0eWwiLCJzcmMvY3NzL2NvbXBvbmVudHMvZm9vdGVyLnN0eWwiLCJzcmMvY3NzL2NvbXBvbmVudHMvbG9hZGVyLnN0eWwiLCJzcmMvY3NzL2NvbXBvbmVudHMvbmF2LnN0eWwiLCJzcmMvY3NzL2NvbnRlbnQvaG9tZS9oZWFkZXIuc3R5bCIsInNyYy9jc3Mvc2xpY2svc2xpY2stdGhlbWUuc3R5bCIsInNyYy9jc3Mvc2xpY2svc2xpY2suc3R5bCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0FDaUNFO0FBQU07QUFBTTtBQUFLO0FBQU07QUFBUTtBQUFRO0FBQU87QUFDSztBQUFJO0FBQUk7QUFBSTtBQUFJO0FBQUk7QUFBRztBQUFZO0FBQUk7QUFDSTtBQUFNO0FBQVM7QUFBUztBQUFLO0FBQU07QUFBSztBQUNNO0FBQUs7QUFBSTtBQUFLO0FBQUs7QUFBSztBQUFHO0FBQUc7QUFBSztBQUNRO0FBQVE7QUFBUTtBQUFLO0FBQUs7QUFBSTtBQUFJO0FBQ0k7QUFBRztBQUFHO0FBQU87QUFDSztBQUFJO0FBQUk7QUFBSTtBQUFJO0FBQUc7QUFDVztBQUFNO0FBQU87QUFBTztBQUNRO0FBQVM7QUFBTztBQUFPO0FBQU87QUFBSTtBQUFJO0FBQUc7QUFDVTtBQUFPO0FBQVE7QUFBUztBQUFNO0FBQ1M7QUFBWTtBQUFRO0FBQVE7QUFBTztBQUNPO0FBQUs7QUFBUTtBQUFNO0FBQVM7QUFBUTtBQUNPO0FBQU07QUFBTztBQ2pDdGQ7RURrQ2IsUUFBTyxFQUFQO0VBQ0EsU0FBUSxFQUFSO0VBQ0EsUUFBTyxFQUFQO0VBQ0EsV0FBVSxLQUFWO0VBQ0EsTUFBSyxRQUFMO0VBQ0EsZ0JBQWUsU0FBZjs7QUFDRjtBQUFTO0FBQU87QUFBUztBQUFZO0FBQU87QUFDUztBQUFRO0FBQVE7QUFBTTtBQUFLO0VBQzlFLFNBQVEsTUFBUjs7QUFDRjtFQUNFLGFBQVksRUFBWjs7QUFDRjtBQUFJO0VBQ0YsWUFBVyxLQUFYOztBQUNGO0FBQVk7RUFDVixRQUFPLEtBQVA7O0FBQ0Y7QUFBbUI7QUFBaUI7QUFDVztFQUM3QyxTQUFRLEdBQVI7RUFDQSxTQUFRLEtBQVI7O0FBQ0Y7RUFDRSxpQkFBZ0IsU0FBaEI7RUFDQSxnQkFBZSxFQUFmOztBQUNGO0FBQ0E7QUFDQTtFQUNFLFlBQVcsV0FBWDs7QUVqRUg7RUFDQyxhQUFZLDZCQUFaO0VBQ0EsWUFBWSxPQUFaO0VBQ0EsYUFBWSxJQUFaO0VBQ0EsT0FBTSxLQUFOO0VBQ0EsWUFBVyxPQUFYO0VGc2hCQSx3QkFBdUIsWUFBdkI7RUFDQSx5QkFBd0IsVUFBeEI7O0FFaGhCRjtFQUNFLFlBQW9DLHFCQUFwQzs7QUFNRjtFQUNFLDZCQUE0QixZQUE1Qjs7QUFNRjtBQUFLO0FBQUc7QUFBUztFQUNmLGFBQVksS0FBWjs7QUFFRjtFQUNFLE9BQU0sS0FBTjtFQUNBLFdBQVUsS0FBVjs7QUY2aEJBO0VBQ0UsYUFBWSxXQUFaO0VBVUUsS0FBNEIsNkNBQTVCO0VBYUYsS0FBaUMsdVNBQWpDOztBRzFsQko7RUFDSSxhQUFhLGlCQUFiO0VBQ0EsS0FBb0QsaURBQXBEO0VBQ0EsS0FBMEUsNk1BQTFFO0VBR0EsYUFBYSxPQUFiO0VBQ0EsWUFBWSxPQUFaOztBQUdKO0VBQ0ksYUFBYSxpQkFBYjtFQUNBLGdCQUFnQixPQUFoQjtFQUNBLFdBQVcsS0FBWDs7QUFHSjtFQUNJLFNBQVMsYUFBVDtFQUNBLHdCQUF3QixZQUF4QjtFQUNBLHlCQUF5QixVQUF6QjtFQUNBLFlBQVksT0FBWjtFQUNBLGNBQWMsT0FBZDtFQUNBLGFBQWEsT0FBYjtFQUNBLGFBQWEsRUFBYjtBQUNBO0VBQ0EsaUJBQWlCLEtBQWpCO0VBQ0EsZ0JBQWdCLEtBQWhCOztBQUdKO0VBQ0ksV0FBVyxvQkFBWDtFQUNBLGFBQWEsT0FBYjtFQUNBLGdCQUFnQixLQUFoQjs7QUFFSjtFQUFVLFdBQVcsSUFBWDs7QUFDVjtFQUFVLFdBQVcsSUFBWDs7QUFDVjtFQUFVLFdBQVcsSUFBWDs7QUFDVjtFQUFVLFdBQVcsSUFBWDs7QUFDVjtFQUNJLE9BQU8sb0JBQVA7RUFDQSxZQUFZLE9BQVo7O0FBR0o7RUFBb0IsU0FBUyxRQUFUOztBQUNwQjtFQUFvQixTQUFTLFFBQVQ7O0FBQ3BCO0VBQW9CLFNBQVMsUUFBVDs7QUFDcEI7RUFBb0IsU0FBUyxRQUFUOztBQUNwQjtFQUFvQixTQUFTLFFBQVQ7O0FBQ3BCO0VBQW9CLFNBQVMsUUFBVDs7QUFDcEI7RUFBb0IsU0FBUyxRQUFUOztBQzFDcEI7RUFDRSxVQUFTLFNBQVQ7QUFFQTs7O0FBZ0NBOzs7O0FBN0JBO0VBQ0UsYUFBWSxXQUFaO0VBQ0EsV0FBa0IsU0FBbEI7QUFFQTs7OztBQUlBO0VBQ0UsU0FBUSxRQUFSOztBQUVGO0VBQ0UsU0FBUSxRQUFSOztBQUVGO0VBQ0UsU0FBUSxRQUFSOztBQUVGO0VBQ0UsU0FBUSxRQUFSOztBQUVGO0VBQ0UsU0FBUSxRQUFSOztBQUVGO0VBQ0UsU0FBUSxRQUFSOztBQUVGO0VBQ0UsU0FBUSxRQUFSOztBQUtKO0VBQ0UsV0FBa0IsU0FBbEI7RUFDQSxTQUFRLGFBQVI7RUFDQSxRQUFPLEtBQVA7QUFhQTs7OztBQVhBO0VBQ0UsZ0JBQWUsS0FBZjtFQUNBLFlBQVcsWUFBWDs7QUFFQTtFQUNFLFNBQVEsUUFBUjtFQUNBLFdBQWtCLE9BQWxCOztBQUVGO0VBQ0UsU0FBUSxRQUFSOztBQVFGO0VBQ0UsT0FBTSxRQUFOOztBQUVGO0VBQ0UsV0FBOEIsaUNBQTlCOztBQzlEUjtFQUNFLFNBQVEsUUFBUjs7QUFLRjtBQUFRO0VBRU4sWUFBVyxLQUFYOztBQUVBOztFQUNFLFVBQVMsU0FBVDtFQUNBLFNBQVEsRUFBUjs7QUFFQTs7RUFDRSxTQUFRLE1BQVI7O0FBRUY7O0VBQ0UsWUFBVyxRQUFYO0VBQ0EsU0FBUSxHQUFSO0VBQ0EsU0FBUSxNQUFSO0VBQ0EsUUFBTyxLQUFQO0VBQ0EsTUFBSyxFQUFMO0VBQ0EsT0FBTSxFQUFOO0VBQ0EsS0FBSSxFQUFKO0VBQ0EsVUFBUyxTQUFUO0VBQ0EsU0FBUSxHQUFSO0VBQ0EsUUFBTyxFQUFQO0VBQ0EsV0FBb0IsWUFBcEI7RUFDQSxrQkFBaUIsS0FBakI7RUFDQSw2QkFBNEIsT0FBNUI7O0FBRUo7O0VBQ0UsVUFBUyxTQUFUO0VBQ0EsU0FBUSxFQUFSOztBQUVBOztFQUNFLFNBQVEsTUFBUjs7QUFFRjs7RUFDRSxZQUFXLFFBQVg7RUFDQSxTQUFRLEdBQVI7RUFDQSxTQUFRLE1BQVI7RUFDQSxRQUFPLEtBQVA7RUFDQSxPQUFNLEVBQU47RUFDQSxNQUFLLEVBQUw7RUFDQSxRQUFPLE1BQVA7RUFDQSxVQUFTLFNBQVQ7RUFDQSxTQUFRLEdBQVI7RUFDQSxXQUFvQixZQUFwQjtFQUNBLGtCQUFpQixLQUFqQjtFQUNBLDZCQUE0QixPQUE1Qjs7QUFLTjtFQUNFLFNBQVEsTUFBUjtFQUNBLFVBQVMsU0FBVDtFQUNBLE9BQU0sS0FBTjtFQUNBLGNBQWEsTUFBYjtFQUNBLFVBQVMsUUFBVDtBQUVBOzs7QUFNQTs7O0FBT0E7OztBQWFBOzs7OztBQXZCQTtFQUNFLFFBQU8sTUFBUDs7QUFLRjtFQUNFLFdBQVUsT0FBVjtFQUNBLFFBQU8sS0FBUDs7QUFLRjtFQUNFLFdBQVUsS0FBVjtFQUNBLFFBQU8sS0FBUDs7QUFFRjtFQUNFLFdBQVUsSUFBVjs7QUFFQTtFQUNFLFdBQVUsSUFBVjs7QUFNSjtFQUNFLFNBQVEsV0FBUjtFQUNBLE9BQU0sS0FBTjtFQUNBLFFBQU8sS0FBUDtFQUNBLGdCQUFlLElBQWY7RUFDQSxTQUFRLFVBQVI7QUFzQ0E7OztBQWdCQTs7Ozs7QUFwREE7RUFDRSxPQUFNLFVBQU47O0FBRUY7RUFDRSxPQUFNLFdBQU47O0FBRUY7RUFDRSxPQUFNLElBQU47O0FBRUY7RUFDRSxPQUFNLFdBQU47O0FBRUY7RUFDRSxPQUFNLFdBQU47O0FBRUY7RUFDRSxPQUFNLElBQU47O0FBRUY7RUFDRSxPQUFNLFdBQU47O0FBRUY7RUFDRSxPQUFNLFdBQU47O0FBRUY7RUFDRSxPQUFNLElBQU47O0FBRUY7RUFDRSxPQUFNLFdBQU47O0FBRUY7RUFDRSxPQUFNLFdBQU47O0FBRUY7RUFDRSxPQUFNLEtBQU47O0FBTUY7RUFDRSxnQkFBZSxPQUFmOztBQUUwQjtBQUFBO0lBQ3hCLGFBQVksTUFBWjs7O0FBRUo7RUFDRSxnQkFBZSxPQUFmOztBQUVGO0VBQ0UsWUFBVyxPQUFYOztBQU13QztBQUFBO0lBQ3hDLFNBQVEsTUFBUjs7O0FDaEtOO0VBQ0UsV0FBa0IsS0FBbEI7RUFDQSxlQUFzQixRQUF0Qjs7QUFFRjtFQUNFLFdBQWtCLFNBQWxCO0VBQ0EsZUFBc0IsU0FBdEI7O0FBRUY7RUFDRSxXQUFrQixLQUFsQjtFQUNBLGVBQXNCLEtBQXRCOztBQUVGO0VBQ0UsV0FBa0IsUUFBbEI7RUFDQSxlQUFzQixTQUF0Qjs7QUFFRjtFQUNFLFdBQWtCLFNBQWxCO0VBQ0EsZUFBc0IsUUFBdEI7RUFDQSxnQkFBc0IsVUFBdEI7O0FBRUY7QUxmaUI7RUtnQmYsV0FBa0IsU0FBbEI7RUFDQSxlQUFxQixPQUFyQjtFQUNBLGdCQUFzQixVQUF0QjtFQUNBLGFBQVksSUFBWjs7QUFFRjtFQUNFLFdBQWtCLFNBQWxCO0VBQ0EsYUFBWSxLQUFaOztBQUVGO0VBQ0UsT0FBTSxRQUFOO0VBQ0EsaUJBQWdCLEtBQWhCOztBQU1GO0FBQUk7QUFBSTtBQUFJO0FBQUk7QUFBSTtBTGpDSDtFS2tDZixnQkFBZSxVQUFmOztBQUtGO0FBQUk7QUFBSTtFQUNOLFVBQVMsT0FBVDtFQUNBLGVBQWMsU0FBZDs7QUM5Q0Y7RVAybUJFLFVBQVMsU0FBVDtFQVdXLEtBQUUsRUFBRjtFQUFBLE9BQUUsRUFBRjtFQUFBLFFBQUUsRUFBRjtFQUFBLE1BQUUsRUFBRjtFT3BuQlgsU0FBUSxHQUFSO0FBRUE7OztBQVFBOzs7OztBQUxBO0VBQ0UscUJBQW9CLE9BQXBCO0VBQ0EsbUJBQWtCLFVBQWxCO0VBQ0EsaUJBQWdCLE1BQWhCOztBQVFBO0VBQ0UsS0FBcUIsSUFBckI7RUFDQSxRQUFxQixJQUFyQjs7QUFGRjtFQUNFLEtBQXFCLE1BQXJCO0VBQ0EsUUFBcUIsTUFBckI7O0FBRkY7RUFDRSxLQUFxQixPQUFyQjtFQUNBLFFBQXFCLE9BQXJCOztBQUZGO0VBQ0UsS0FBcUIsT0FBckI7RUFDQSxRQUFxQixPQUFyQjs7QUFGRjtFQUNFLEtBQXFCLE9BQXJCO0VBQ0EsUUFBcUIsT0FBckI7O0FBRkY7RUFDRSxLQUFxQixPQUFyQjtFQUNBLFFBQXFCLE9BQXJCOztBQUZGO0VBQ0UsS0FBcUIsT0FBckI7RUFDQSxRQUFxQixPQUFyQjs7QUFGRjtFQUNFLEtBQXFCLE9BQXJCO0VBQ0EsUUFBcUIsT0FBckI7O0FBRkY7RUFDRSxLQUFxQixPQUFyQjtFQUNBLFFBQXFCLE9BQXJCOztBQUZGO0VBQ0UsS0FBcUIsT0FBckI7RUFDQSxRQUFxQixPQUFyQjs7QUFGRjtFQUNFLEtBQXFCLE9BQXJCO0VBQ0EsUUFBcUIsT0FBckI7O0FDdkJOO0VSOG1CRSxVQUFTLFNBQVQ7RUFXVyxLQUFFLEVBQUY7RUFBQSxPQUFFLEVBQUY7RUFBQSxRQUFFLEVBQUY7RUFBQSxNQUFFLEVBQUY7RVF2bkJYLFVBQVMsT0FBVDtFQUNBLGdCQUFlLEtBQWY7RUFDQSxTQUFRLEdBQVI7O0FBRUE7RUFDRSxZQUFrQyxnQkFBbEM7O0FBRUY7RUFDRSxZQUFrQyxzQkFBbEM7O0FDVko7RVQ4bUJFLFVBQVMsU0FBVDtFQVdXLEtBQUUsRUFBRjtFQUFBLE9BQUUsRUFBRjtFQUFBLFFBQUUsRUFBRjtFQUFBLE1BQUUsRUFBRjtFU3ZuQlgsVUFBUyxPQUFUO0VBQ0EsZ0JBQWUsS0FBZjs7QUFFQTtFVHltQkEsVUFBUyxTQUFUO0VBV1csS0FBRSxFQUFGO0VBQUEsT0FBRSxFQUFGO0VBQUEsUUFBRSxFQUFGO0VBQUEsTUFBRSxFQUFGOztBU2puQlQ7RVRzbUJGLFVBQVMsU0FBVDtFQU1RLEtBQUUsRUFBRjtFQUFBLE1BQUUsRUFBRjtFQStESixPQUFNLEtBQU47RUFDQSxRQUFPLEtBQVA7RVN6cUJBLFFBQU8sS0FBUDs7QUFHOEI7QUFBQTtJQUM1QixRQUFPLE1BQVA7SUFDQSxLQUFJLE1BQUo7OztBQUU0QjtBQUFBO0lBQzVCLE9BQU0sTUFBTjtJQUNBLE1BQUssTUFBTDs7O0FBR0o7RVQ4Z0JPLEtBQUUsS0FBRjtFQUFBLE9BQUUsS0FBRjtFQUFBLFFBQUUsS0FBRjtFQUFBLE1BQUUsS0FBRjs7QVVyaUJYO0VBQ0UsVUFBUyxTQUFUO0VBQ0EsU0FBUSxhQUFSO0VBQ0EsUUFBTyxRQUFQO0VBQ0EsU0FBUSxVQUFSO0VBQ0EsWUFBVyxPQUFYO0VBQ0EsZ0JBQWUsVUFBZjtFQUNBLGdCQUFlLElBQWY7RUFDQSxPQUFNLEtBQU47RUFDQSxZQUFXLFFBQVg7RUFDQSxRQUFPLEtBQVA7RUFFQSxZQUFXLGlCQUFYOztBQUVBO0FBQVE7RUFFTixZQUErQixRQUEvQjs7QUNoQko7RUFDRSxRQUFPLEtBQVA7RUFDQSxZQUFXLEtBQVg7RUFDQSxRQUFPLFFBQVA7O0FBRUE7RUFDRSxnQkFBZSxLQUFmOztBQUVGO0VBQ0UsVUFBUyxTQUFUO0VBQ0EsT0FBTSxLQUFOO0VBQ0EsU0FBUSxhQUFSO0VBQ0EsT0FBTSxLQUFOO0VBQ0EsWUFBVyxhQUFYOztBQUVGO0VBQ0UsUUFBc0IsZ0NBQXRCOztBQUVGO0VBQ0UsU0FBUSxlQUFSOztBQUVBO0VBQ0UsV0FBa0IsT0FBbEI7O0FBRUY7RUFDRSxhQUFZLElBQVo7RUFDQSxhQUFZLElBQVo7O0FBRUE7RUFDRSxTQUFRLE1BQVI7RUFDQSxXQUFVLElBQVY7RUFDQSxjQUFhLElBQWI7O0FBRUo7RUFDRSxZQUFXLEtBQVg7O0FBRUo7RUFDRSxZQUFXLDJCQUFYOztBQUVBO0VBQ0UsYUFBWSxJQUFaOztBQUVGO0VBQ0UsWUFBVyxLQUFYOztBQUVBO0VBQ0UsUUFBTyxNQUFQOztBQUVGO0VBQ0UsYUFBWSxJQUFaO0VBQ0EsWUFBVyxLQUFYO0VBQ0EsU0FBUSxNQUFSO0VBQ0EsVUFBUyxPQUFUO0VBQ0EsZUFBYyxTQUFkO0VBRUEsU0FBUSxZQUFSO0VBQ0Esb0JBQW1CLEVBQW5CO0VBQ0Esb0JBQW1CLFNBQW5COztBQUVGO0VBQ0UsUUFBTyxLQUFQO0VBQ0EsU0FBUSxNQUFSO0VBQ0EsVUFBUyxPQUFUO0VBQ0EsZUFBYyxTQUFkO0VBRUEsU0FBUSxZQUFSO0VBQ0Esb0JBQW1CLEVBQW5CO0VBQ0Esb0JBQW1CLFNBQW5COztBQ25FUjtFQUNFLFlBQVcsS0FBWDtFQUNBLE9BQU0sS0FBTjtFQUNBLFNBQVEsVUFBUjs7QUFFQTtFQUNFLFdBQVUsS0FBVjs7QUFFMEI7QUFBQTtJQUN4QixRQUFPLFlBQVA7OztBQUVKO0VBQ0UsUUFBTyxPQUFQOztBQUUwQjtBQUFBO0lBQ3hCLFdBQVUsTUFBVjtJQUNBLFFBQU8sVUFBUDs7O0FBR0Y7RUFDRSxRQUFPLE9BQVA7RUFFQSxZQUFXLFlBQVg7O0FBQ0E7RUFDRSxPQUFNLFFBQU47O0FBRU47RUFDRSxlQUFjLElBQWQ7RUFDQSxXQUFrQixTQUFsQjtFQUNBLE9BQTZCLHNCQUE3Qjs7QUFFRjtFQUNFLE9BQTZCLHNCQUE3QjtFQUVBLFlBQVcsWUFBWDs7QUFDQTtFQUNFLE9BQU0sS0FBTjs7QUFFSjtFQUNFLFFBQU8sU0FBUDs7QUFFQTtFQUNFLFNBQVEsYUFBUjtFQUNBLFFBQU8sS0FBUDs7QUFFQTtFQUNFLFdBQWtCLFFBQWxCO0VBQ0EsT0FBOEIsdUJBQTlCO0VBRUEsWUFBVyxZQUFYOztBQUNBO0VBQ0UsT0FBOEIsdUJBQTlCOztBQUdvQjtBQUFBO0lBQ3hCLFFBQU8sWUFBUDs7O0FDdkROO0ViOG1CRSxVQUFTLE1BQVQ7RUFXVyxLQUFFLEVBQUY7RUFBQSxPQUFFLEVBQUY7RUFBQSxRQUFFLEVBQUY7RUFBQSxNQUFFLEVBQUY7RWF2bkJYLGdCQUFlLEtBQWY7RUFDQSxTQUFRLGFBQVI7RUFDQSxZQUFXLEtBQVg7O0FBRUE7RWIyZEUsV0FBVSxnQ0FBVjs7QUFHYztBQW1CWDtJQWdDZSxTQUFFLEVBQUY7OztBQW5ESjtBQW1CWDtJQWdDZSxTQUFFLEVBQUY7OztBQW5ESjtBQW1CWDtJQWdDZSxTQUFFLEVBQUY7OztBQW5ESjtBQW1CWDtJQWdDZSxTQUFFLEVBQUY7OztBYzNoQnRCO0Vka25CRSxVQUFTLE1BQVQ7RUFNUSxLQUFFLEVBQUY7RUFBQSxNQUFFLEVBQUY7RUFBQSxPQUFFLEVBQUY7RWN0bkJSLFNBQVEsS0FBUjtFQUVBLE9BQU0sUUFBTjtFQUNBLFlBQW1DLHVCQUFuQztFQUVBLFlBQVcsT0FBWDs7QUFDMEI7QUFBQTtJQUN4QixZQUFXLEtBQVg7OztBQUVGO0VBQ0UsU0FBUSxhQUFSO0VBQ0EsZ0JBQWUsT0FBZjs7QUFLNEI7QUFBQTtJQUN4QixTQUFRLEtBQVI7OztBQUVOO0VBQ0UsU0FBUSxhQUFSO0VBRUEsWUFBVyxnQkFBWDs7QUFDeUI7QUFBQTtJQUN2QixXQUF5QixpQkFBekI7OztBQUVGO0VBQ0UsUUFBTyxVQUFQO0VBRUEsWUFBNEIsc0NBQTVCOztBQUN5QjtBQUFBO0lBQ3ZCLFFBQU8sS0FBUDs7O0FBRU47RWQra0JBLFVBQVMsU0FBVDtFQU1RLEtBQUUsRUFBRjtFQUFBLE9BQUUsRUFBRjs7QWNsbEJOO0VBQ0UsV0FBa0IsUUFBbEI7RUFDQSxRQUFPLGNBQVA7O0FBRUE7RUFDRSxhQUFZLFFBQVo7RUFDQSxhQUFZLElBQVo7O0FBRUY7RUFDRSxXQUFrQixTQUFsQjtFQUNBLGNBQW9CLFNBQXBCOztBQUVOO0VBQ0UsVUFBUyxTQUFUOztBQUVBO0VBQ0UsU0FBUSxHQUFSO0VkNGpCSixVQUFTLFNBQVQ7RUFNUSxRQUFFLEVBQUY7RUFBQSxNQUFFLEVBQUY7RUFBQSxPQUFFLEVBQUY7RWNoa0JKLGVBQWMsa0JBQWQ7RUFDQSxXQUFrQixVQUFsQjtFQUNBLFlBQVcsZ0JBQVg7O0FBRUY7RUFDRSxXQUFrQixVQUFsQjs7QUFFSjtFQUNFLFFBQU8sVUFBUDs7QUFFQTtFQUNFLFNBQVEsS0FBUjs7QUFFd0I7QUFBQTtJQUN4QixRQUFPLFVBQVA7OztBQUVGO0VBQ0UsWUFBVyxLQUFYOztBQUUwQjtBQUFBO0lBQ3hCLFlBQVcsS0FBWDs7O0FDNUVSO0VBQ0UsT0FBTSxLQUFOOztBQ0RPO0FBRVQ7RUFFSSxZQUFZLHFFQUFaOztBQUlKO0VBRUksYUFBYSxRQUFiO0VBQ0EsYUFBYSxPQUFiO0VBQ0EsWUFBWSxPQUFaO0VBRUEsS0FBMEMsdUNBQTFDO0VBQ0EsS0FBOEUseVBBQTlFOztBQUdKO0FBQVk7RUFHUixXQUFXLEVBQVg7RUFDQSxhQUFhLEVBQWI7RUFFQSxVQUFVLFNBQVY7RUFDQSxLQUFLLElBQUw7RUFFQSxTQUFTLE1BQVQ7RUFFQSxPQUFPLEtBQVA7RUFDQSxRQUFRLEtBQVI7RUFDQSxTQUFTLEVBQVQ7RUFDQSxtQkFBb0MsbUJBQXBDO0VBQ0EsZUFBZ0MsbUJBQWhDO0VBQ0EsV0FBNEIsbUJBQTVCO0VBRUEsUUFBUSxRQUFSO0VBRUEsT0FBTyxZQUFQO0VBQ0EsUUFBUSxLQUFSO0VBQ0EsU0FBUyxLQUFUO0VBQ0EsWUFBWSxZQUFaOztBQUVKO0FBQWtCO0FBQ21CO0FBQ21CO0VBR3BELE9BQU8sWUFBUDtFQUNBLFNBQVMsS0FBVDtFQUNBLFlBQVksWUFBWjs7QUFFSjtBQUF5QjtBQUMwQjtBQUMwQjtFQUd6RSxTQUFTLEVBQVQ7O0FBRUo7QUFBa0M7RUFHOUIsU0FBUyxLQUFUOztBQUdKO0FBQW1CO0VBR2YsYUFBYSxRQUFiO0VBQ0EsV0FBVyxLQUFYO0VBQ0EsYUFBYSxFQUFiO0VBRUEsU0FBUyxLQUFUO0VBQ0EsT0FBTyxLQUFQO0VBRUEsd0JBQXdCLFlBQXhCO0VBQ0EseUJBQXlCLFVBQXpCOztBQUdKO0VBRUksTUFBTSxNQUFOOztBQUVKO0VBRUksT0FBTyxNQUFQO0VBQ0EsTUFBTSxLQUFOOztBQUVKO0VBRUksU0FBUyxJQUFUOztBQUVKO0VBRUksU0FBUyxJQUFUOztBQUdKO0VBRUksT0FBTyxNQUFQOztBQUVKO0VBRUksT0FBTyxLQUFQO0VBQ0EsTUFBTSxNQUFOOztBQUVKO0VBRUksU0FBUyxJQUFUOztBQUVKO0VBRUksU0FBUyxJQUFUOztBQUlKO0VBRUksZUFBZSxLQUFmOztBQUdKO0VBRUksVUFBVSxTQUFWO0VBQ0EsUUFBUSxNQUFSO0VBRUEsU0FBUyxNQUFUO0VBRUEsT0FBTyxLQUFQO0VBQ0EsU0FBUyxFQUFUO0VBQ0EsUUFBUSxFQUFSO0VBRUEsWUFBWSxLQUFaO0VBRUEsWUFBWSxPQUFaOztBQUVKO0VBRUksVUFBVSxTQUFWO0VBRUEsU0FBUyxhQUFUO0VBRUEsT0FBTyxLQUFQO0VBQ0EsUUFBUSxLQUFSO0VBQ0EsUUFBUSxNQUFSO0VBQ0EsU0FBUyxFQUFUO0VBRUEsUUFBUSxRQUFSOztBQUVKO0VBRUksV0FBVyxFQUFYO0VBQ0EsYUFBYSxFQUFiO0VBRUEsU0FBUyxNQUFUO0VBRUEsT0FBTyxLQUFQO0VBQ0EsUUFBUSxLQUFSO0VBQ0EsU0FBUyxJQUFUO0VBRUEsUUFBUSxRQUFSO0VBRUEsT0FBTyxZQUFQO0VBQ0EsUUFBUSxFQUFSO0VBQ0EsU0FBUyxLQUFUO0VBQ0EsWUFBWSxZQUFaOztBQUVKO0FBQTRCO0VBR3hCLFNBQVMsS0FBVDs7QUFFSjtBQUFtQztFQUcvQixTQUFTLEVBQVQ7O0FBRUo7RUFFSSxhQUFhLFFBQWI7RUFDQSxXQUFXLElBQVg7RUFDQSxhQUFhLEtBQWI7RUFFQSxVQUFVLFNBQVY7RUFDQSxLQUFLLEVBQUw7RUFDQSxNQUFNLEVBQU47RUFFQSxPQUFPLEtBQVA7RUFDQSxRQUFRLEtBQVI7RUFFQSxTQUFTLElBQVQ7RUFDQSxZQUFZLE9BQVo7RUFFQSxTQUFTLEtBQVQ7RUFDQSxPQUFPLFFBQVA7RUFFQSx3QkFBd0IsWUFBeEI7RUFDQSx5QkFBeUIsVUFBekI7O0FBRUo7RUFFSSxTQUFTLEtBQVQ7RUFDQSxPQUFPLFFBQVA7O0FDek1KO0VBRUksVUFBVSxTQUFWO0VBRUEsU0FBUyxNQUFUO0VBQ0EsWUFBWSxXQUFaO0VBRUEscUJBQXFCLEtBQXJCO0VBQ0csa0JBQWtCLEtBQWxCO0VBQ0MsaUJBQWlCLEtBQWpCO0VBQ0ksYUFBYSxLQUFiO0VBRVIsdUJBQXVCLEtBQXZCO0VBQ0Esb0JBQW9CLEtBQXBCO0VBQ0Esa0JBQWtCLE1BQWxCO0VBQ0ksY0FBYyxNQUFkO0VBQ0osNkJBQTZCLFlBQTdCOztBQUdKO0VBRUksVUFBVSxTQUFWO0VBRUEsU0FBUyxNQUFUO0VBQ0EsVUFBVSxPQUFWO0VBRUEsUUFBUSxFQUFSO0VBQ0EsU0FBUyxFQUFUOztBQUVKO0VBRUksU0FBUyxLQUFUOztBQUVKO0VBRUksUUFBUSxRQUFSO0VBQ0EsUUFBUSxLQUFSOztBQUdKO0FBQTJCO0VBR3ZCLG1CQUFzQyxxQkFBdEM7RUFDRyxnQkFBbUMscUJBQW5DO0VBQ0MsZUFBa0MscUJBQWxDO0VBQ0MsY0FBaUMscUJBQWpDO0VBQ0csV0FBOEIscUJBQTlCOztBQUdaO0VBRUksVUFBVSxTQUFWO0VBQ0EsS0FBSyxFQUFMO0VBQ0EsTUFBTSxFQUFOO0VBRUEsU0FBUyxNQUFUOztBQUVKO0FBQW9CO0VBR2hCLFNBQVMsTUFBVDtFQUVBLFNBQVMsR0FBVDs7QUFFSjtFQUVJLE9BQU8sS0FBUDs7QUFFSjtFQUVJLFlBQVksT0FBWjs7QUFHSjtFQUVJLFNBQVMsS0FBVDtFQUNBLE9BQU8sS0FBUDtFQUVBLFFBQVEsS0FBUjtFQUNBLFlBQVksSUFBWjs7QUFFSjtFQUVJLE9BQU8sTUFBUDs7QUFFSjtFQUVJLFNBQVMsTUFBVDs7QUFFSjtFQUVJLFNBQVMsS0FBVDs7QUFFSjtFQUVJLGdCQUFnQixLQUFoQjs7QUFFSjtFQUVJLFNBQVMsTUFBVDs7QUFFSjtFQUVJLFlBQVksT0FBWjs7QUFFSjtFQUVJLFNBQVMsTUFBVDtFQUVBLFFBQVEsS0FBUjtFQUVBLFFBQVEsc0JBQVI7O0FBRUo7RUFDSSxTQUFTLEtBQVQ7O0FoQjFHRjtFQUNFLFlBQVcsT0FBWDtFQUNBLFdBQVUsTUFBVjtFQUNBLFFBQU8sT0FBUCIsImZpbGUiOiJzdHlsZS5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogU3R5bGVzXG4gKi9cblxuQHJlcXVpcmUgJ3N0eWx1cy1taXhlcidcblxucmVzZXQoKVxuXG5AcmVxdWlyZSAnX19jb25maWcnXG5cbkByZXF1aXJlICdiYXNlLyonXG5AcmVxdWlyZSAnbGF5ZXJzLyonXG5AcmVxdWlyZSAnY29tcG9uZW50cy8qJ1xuQHJlcXVpcmUgJ2NvbnRlbnQvKidcblxuQHJlcXVpcmUgJ3NsaWNrLyonXG5cbkByZXF1aXJlICdfX3RlbXAnXG4iLCJzdHJpcC11bml0cygpXHJcbiAgdW5pdChhcmd1bWVudHMsICcnKVxyXG5hZGQtYnJhY2VzKClcclxuICBqb2luKCcnLCAnKCcsIGFyZ3VtZW50cywgJyknKVxyXG5hZGQtcXVvdGVzKClcclxuICBqb2luKCcnLCBhcmd1bWVudHMpXHJcbmNyZWF0ZS1zdHJpbmcoKVxyXG4gIGpvaW4oJywgJywgYXJndW1lbnRzKVxyXG5jcmVhdGUtcHJvcCgpXHJcbiAgdW5xdW90ZSggam9pbignJywgYXJndW1lbnRzKSApXHJcbmNyZWF0ZS12YWwoKVxyXG4gIHVucXVvdGUoIGpvaW4oJycsIGFyZ3VtZW50cykgKVxyXG5jcmVhdGUtYmxvY2soKVxyXG4gIHVucXVvdGUoIGpvaW4oJyAnLCBhcmd1bWVudHMpIClcclxuY3JlYXRlLW9iamVjdCgpXHJcbiAgam9pbignJywgJ3snLCBhcmd1bWVudHMsICd9JylcclxuY3JlYXRlLWxpc3QoKVxyXG4gIHVucXVvdGUoIGpvaW4oJywgJywgYXJndW1lbnRzKSApXHJcbmNyZWF0ZS1hcnJheSgpXHJcbiAgam9pbignJywgJ1tcIicsIGFyZ3VtZW50cywgJ1wiXScpXHJcbmNyZWF0ZS1rZXkoKVxyXG4gIGpvaW4oJycsICdcIicsIGFyZ3VtZW50cywgJ1wiOicpXHJcbmNyZWF0ZS12YWx1ZSgpXHJcbiAgam9pbignJywgJ1wiJywgYXJndW1lbnRzLCAnXCInKVxyXG5fX21peGVyID0ganNvbignLi4vY29uZmlnLmpzb24nLCB7IGhhc2g6IHRydWUsIGxlYXZlLXN0cmluZ3M6IHRydWUgfSlcclxuX19taXhlcl9rZXlzID0gXFxcclxuICBhdXRvUHJlZml4ZXIsIGJyb3dzZXJzLCBhdXRvSW1wb3J0YW50LCBhdXRvUmVzZXQsIGF1dG9Ob3JtYWxpemUsIHRhYmxldEJyZWFrcG9pbnQsIG1vYmlsZUJyZWFrcG9pbnQsIG92ZXJ3cml0ZUNvbG9yc1xyXG5taXhlciA/PSBfX21peGVyXHJcbmZvciBrZXkgaW4gX19taXhlcl9rZXlzXHJcbiAgdW5sZXNzKCBtaXhlcltrZXldIClcclxuICAgIG1peGVyW2tleV0gPSBfX21peGVyW2tleV1cclxuY29uZmlndXJlUGx1Z2lucyggbWl4ZXIgKVxyXG5yZXNldCgpXHJcbiAgaHRtbCwgYm9keSwgZGl2LCBzcGFuLCBhcHBsZXQsIG9iamVjdCwgaWZyYW1lLFxyXG4gIGgxLCBoMiwgaDMsIGg0LCBoNSwgaDYsIHAsIGJsb2NrcXVvdGUsIHByZSxcclxuICBhLCBhYmJyLCBhY3JvbnltLCBhZGRyZXNzLCBiaWcsIGNpdGUsIGNvZGUsXHJcbiAgZGVsLCBkZm4sIGVtLCBpbWcsIGlucywga2JkLCBxLCBzLCBzYW1wLFxyXG4gIHNtYWxsLCBzdHJpa2UsIHN0cm9uZywgc3ViLCBzdXAsIHR0LCB2YXIsXHJcbiAgYiwgdSwgaSwgY2VudGVyLFxyXG4gIGRsLCBkdCwgZGQsIG9sLCB1bCwgbGksXHJcbiAgZmllbGRzZXQsIGZvcm0sIGxhYmVsLCBsZWdlbmQsXHJcbiAgdGFibGUsIGNhcHRpb24sIHRib2R5LCB0Zm9vdCwgdGhlYWQsIHRyLCB0aCwgdGQsXHJcbiAgYXJ0aWNsZSwgYXNpZGUsIGNhbnZhcywgZGV0YWlscywgZW1iZWQsXHJcbiAgZmlndXJlLCBmaWdjYXB0aW9uLCBmb290ZXIsIGhlYWRlciwgaGdyb3VwLFxyXG4gIG1lbnUsIG5hdiwgb3V0cHV0LCBydWJ5LCBzZWN0aW9uLCBzdW1tYXJ5LFxyXG4gIHRpbWUsIG1hcmssIGF1ZGlvLCB2aWRlb1xyXG4gICAgbWFyZ2luIDBcclxuICAgIHBhZGRpbmcgMFxyXG4gICAgYm9yZGVyIDBcclxuICAgIGZvbnQtc2l6ZSAxMDAlXHJcbiAgICBmb250IGluaGVyaXRcclxuICAgIHZlcnRpY2FsLWFsaWduIGJhc2VsaW5lXHJcbiAgYXJ0aWNsZSwgYXNpZGUsIGRldGFpbHMsIGZpZ2NhcHRpb24sIGZpZ3VyZSxcclxuICBmb290ZXIsIGhlYWRlciwgaGdyb3VwLCBtZW51LCBuYXYsIHNlY3Rpb25cclxuICAgIGRpc3BsYXkgYmxvY2tcclxuICBib2R5XHJcbiAgICBsaW5lLWhlaWdodCAxXHJcbiAgb2wsIHVsXHJcbiAgICBsaXN0LXN0eWxlIG5vbmVcclxuICBibG9ja3F1b3RlLCBxXHJcbiAgICBxdW90ZXMgbm9uZVxyXG4gIGJsb2NrcXVvdGU6YmVmb3JlLCBibG9ja3F1b3RlOmFmdGVyLFxyXG4gIHE6YmVmb3JlLCBxOmFmdGVyXHJcbiAgICBjb250ZW50ICcnXHJcbiAgICBjb250ZW50IG5vbmVcclxuICB0YWJsZVxyXG4gICAgYm9yZGVyLWNvbGxhcHNlIGNvbGxhcHNlXHJcbiAgICBib3JkZXItc3BhY2luZyAwXHJcbiAgKlxyXG4gICo6YmVmb3JlXHJcbiAgKjphZnRlclxyXG4gICAgYm94LXNpemluZyBib3JkZXItYm94XHJcbnJlc2V0KCkgaWYgYXV0by1yZXNldCA9PSBcImFsbFwiXHJcbnJlc2V0LWJhc2ljcygpXHJcbiAgQGNoYXJzZXQgXCJVVEYtOFwiXHJcbiAgaHRtbCwgYm9keSwgZGl2LCBzcGFuLCBpZnJhbWVcclxuICBoMSwgaDIsIGgzLCBoNCwgaDUsIGg2LCBwXHJcbiAgYmxvY2txdW90ZSwgcHJlLCBzdHJvbmcsIGVtLCB1XHJcbiAgZm9ybSwgbGFiZWwsIHVsLCBvbCwgbGlcclxuICBoZWFkZXIsIGZvb3RlciwgbWVudSwgbmF2XHJcbiAgc2VjdGlvbiwgYXJ0aWNsZSwgdGl0bGVcclxuICBhdWRpbywgdmlkZW8sIGltZ1xyXG4gIGlmcmFtZSwgZW1iZWRcclxuICBhLCBidXR0b25cclxuICAgIG1hcmdpbiAwXHJcbiAgICBwYWRkaW5nIDBcclxuICAgIGJvcmRlciAwXHJcbiAgKlxyXG4gICo6YmVmb3JlXHJcbiAgKjphZnRlclxyXG4gICAgYm94LXNpemluZyBib3JkZXItYm94XHJcbnJlc2V0LWJhc2ljcygpIGlmIGF1dG8tcmVzZXQgPT0gXCJiYXNpY3NcIlxyXG5ub3JtYWxpemUoKVxyXG4gIGh0bWxcclxuICAgIGZvbnQtZmFtaWx5IHNhbnMtc2VyaWZcclxuICAgIGZvbnQtc2l6ZSAxMDAlXHJcbiAgICAtbXMtdGV4dC1zaXplLWFkanVzdCAxMDAlXHJcbiAgICAtd2Via2l0LXRleHQtc2l6ZS1hZGp1c3QgMTAwJVxyXG4gIGJvZHlcclxuICAgIG1hcmdpbiAwXHJcbiAgYXJ0aWNsZSxcclxuICBhc2lkZSxcclxuICBkZXRhaWxzLFxyXG4gIGZpZ2NhcHRpb24sXHJcbiAgZmlndXJlLFxyXG4gIGZvb3RlcixcclxuICBoZWFkZXIsXHJcbiAgbWFpbixcclxuICBtZW51LFxyXG4gIG5hdixcclxuICBzZWN0aW9uLFxyXG4gIHN1bW1hcnlcclxuICAgIGRpc3BsYXkgYmxvY2tcclxuICBoMSwgaDIsIGgzLCBoNCwgaDUsIGg2LCBwXHJcbiAgYSwgYnV0dG9uLCB1bCwgb2wsIGxpLCBsYWJlbFxyXG4gICAgLXdlYmtpdC1mb250LXNtb290aGluZyBhbnRpYWxpYXNlZFxyXG4gICAgLW1vei1vc3gtZm9udC1zbW9vdGhpbmcgZ3JheXNjYWxlXHJcbiAgYXVkaW8sIGNhbnZhcywgcHJvZ3Jlc3MsIHZpZGVvXHJcbiAgICBkaXNwbGF5IGlubGluZS1ibG9ja1xyXG4gICAgdmVydGljYWwtYWxpZ24gYmFzZWxpbmVcclxuICBhdWRpb1xyXG4gICAgJjpub3QoW2NvbnRyb2xzXSlcclxuICAgICAgZGlzcGxheSBub25lXHJcbiAgICAgIGhlaWdodCAwXHJcbiAgW2hpZGRlbl0sIHRlbXBsYXRlXHJcbiAgICBkaXNwbGF5IG5vbmVcclxuICBhXHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yIHRyYW5zcGFyZW50XHJcbiAgYTphY3RpdmVcclxuICBhOmhvdmVyXHJcbiAgICBvdXRsaW5lIDBcclxuICBhLCBidXR0b25cclxuICAgIHRleHQtZGVjb3JhdGlvbiBub25lXHJcbiAgICBib3JkZXIgbm9uZVxyXG4gICAgb3V0bGluZSBub25lXHJcbiAgYTpob3ZlclxyXG4gIGJ1dHRvbjpob3ZlclxyXG4gICAgY3Vyc29yIHBvaW50ZXJcclxuICBhYmJyW3RpdGxlXVxyXG4gICAgYm9yZGVyLWJvdHRvbSBub25lXHJcbiAgICB0ZXh0LWRlY29yYXRpb24gdW5kZXJsaW5lXHJcbiAgICB0ZXh0LWRlY29yYXRpb24gdW5kZXJsaW5lIGRvdHRlZFxyXG4gIGIsIHN0cm9uZ1xyXG4gICAgZm9udC13ZWlnaHQgaW5oZXJpdFxyXG4gICAgZm9udC13ZWlnaHQgYm9sZGVyXHJcbiAgZGZuXHJcbiAgICBmb250LXN0eWxlIGl0YWxpY1xyXG4gIGgxXHJcbiAgICBmb250LXNpemUgMmVtXHJcbiAgICBtYXJnaW4gMC42N2VtIDBcclxuICBtYXJrXHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yICNmZjBcclxuICAgIGNvbG9yICMwMDBcclxuICBzbWFsbFxyXG4gICAgZm9udC1zaXplIDgwJVxyXG4gIHN1Yiwgc3VwXHJcbiAgICBmb250LXNpemUgNzUlXHJcbiAgICBsaW5lLWhlaWdodCAwXHJcbiAgICBwb3NpdGlvbiByZWxhdGl2ZVxyXG4gICAgdmVydGljYWwtYWxpZ24gYmFzZWxpbmVcclxuICBzdXBcclxuICAgIHRvcCAtMC41ZW1cclxuICBzdWJcclxuICAgIGJvdHRvbSAtMC4yNWVtXHJcbiAgaW1nXHJcbiAgICBib3JkZXIgMFxyXG4gIHN2Zzpub3QoOnJvb3QpXHJcbiAgICBvdmVyZmxvdyBoaWRkZW5cclxuICBmaWd1cmVcclxuICAgIG1hcmdpbiAxZW0gNDBweFxyXG4gIGhyXHJcbiAgICBib3gtc2l6aW5nIGNvbnRlbnQtYm94XHJcbiAgICBoZWlnaHQgMFxyXG4gICAgb3ZlcmZsb3cgdmlzaWJsZVxyXG4gIHByZVxyXG4gICAgb3ZlcmZsb3cgYXV0b1xyXG4gIGNvZGUsIGtiZCwgcHJlLCBzYW1wXHJcbiAgICBmb250LWZhbWlseSBtb25vc3BhY2UsIG1vbm9zcGFjZVxyXG4gICAgZm9udC1zaXplIDFlbVxyXG4gIGJ1dHRvbiwgaW5wdXQsIG9wdGdyb3VwLCBzZWxlY3QsIHRleHRhcmVhXHJcbiAgICBmb250IGluaGVyaXRcclxuICAgIG1hcmdpbiAwXHJcbiAgYnV0dG9uXHJcbiAgICBvdmVyZmxvdyB2aXNpYmxlXHJcbiAgYnV0dG9uLFxyXG4gIHNlbGVjdFxyXG4gICAgdGV4dC10cmFuc2Zvcm0gbm9uZVxyXG4gIGJ1dHRvblxyXG4gIGh0bWwgaW5wdXRbdHlwZT1cImJ1dHRvblwiXVxyXG4gIGlucHV0W3R5cGU9XCJyZXNldFwiXVxyXG4gIGlucHV0W3R5cGU9XCJzdWJtaXRcIl1cclxuICAgIC13ZWJraXQtYXBwZWFyYW5jZSBidXR0b25cclxuICAgIGN1cnNvciBwb2ludGVyXHJcbiAgYnV0dG9uW2Rpc2FibGVkXVxyXG4gIGh0bWwgaW5wdXRbZGlzYWJsZWRdXHJcbiAgICBjdXJzb3IgZGVmYXVsdFxyXG4gIGJ1dHRvbjo6LW1vei1mb2N1cy1pbm5lclxyXG4gIGlucHV0OjotbW96LWZvY3VzLWlubmVyXHJcbiAgICBib3JkZXIgMFxyXG4gICAgcGFkZGluZyAwXHJcbiAgYnV0dG9uOi1tb3otZm9jdXNyaW5nXHJcbiAgaW5wdXQ6LW1vei1mb2N1c3JpbmdcclxuICAgIG91dGxpbmUgMXB4IGRvdHRlZCBCdXR0b25UZXh0XHJcbiAgaW5wdXRcclxuICAgIGxpbmUtaGVpZ2h0IG5vcm1hbFxyXG4gIGlucHV0W3R5cGU9XCJjaGVja2JveFwiXVxyXG4gIGlucHV0W3R5cGU9XCJyYWRpb1wiXVxyXG4gICAgYm94LXNpemluZyBib3JkZXItYm94XHJcbiAgICBwYWRkaW5nIDBcclxuICBpbnB1dFt0eXBlPVwibnVtYmVyXCJdOjotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uXHJcbiAgaW5wdXRbdHlwZT1cIm51bWJlclwiXTo6LXdlYmtpdC1vdXRlci1zcGluLWJ1dHRvblxyXG4gICAgaGVpZ2h0IGF1dG9cclxuICBpbnB1dFt0eXBlPVwic2VhcmNoXCJdXHJcbiAgICAtd2Via2l0LWFwcGVhcmFuY2UgdGV4dGZpZWxkXHJcbiAgaW5wdXRbdHlwZT1cInNlYXJjaFwiXTo6LXdlYmtpdC1zZWFyY2gtY2FuY2VsLWJ1dHRvblxyXG4gIGlucHV0W3R5cGU9XCJzZWFyY2hcIl06Oi13ZWJraXQtc2VhcmNoLWRlY29yYXRpb25cclxuICAgIC13ZWJraXQtYXBwZWFyYW5jZSBub25lXHJcbiAgZmllbGRzZXRcclxuICAgIGJvcmRlciAxcHggc29saWQgI2MwYzBjMFxyXG4gICAgbWFyZ2luIDAgMnB4XHJcbiAgICBwYWRkaW5nIDAuMzVlbSAwLjYyNWVtIDAuNzVlbVxyXG4gIGxlZ2VuZFxyXG4gICAgYm9yZGVyIDBcclxuICAgIHBhZGRpbmcgMFxyXG4gIHRleHRhcmVhXHJcbiAgICBvdmVyZmxvdyBhdXRvXHJcbiAgb3B0Z3JvdXBcclxuICAgIGZvbnQtd2VpZ2h0IGJvbGRcclxubm9ybWFsaXplKCkgaWYgYXV0by1ub3JtYWxpemUgPT0gXCJhbGxcIlxyXG5ub3JtYWxpemUtYmFzaWNzKClcclxuICBodG1sXHJcbiAgICBmb250LWZhbWlseSBzYW5zLXNlcmlmXHJcbiAgICBmb250LXNpemUgMTAwJVxyXG4gICAgLW1zLXRleHQtc2l6ZS1hZGp1c3QgMTAwJVxyXG4gICAgLXdlYmtpdC10ZXh0LXNpemUtYWRqdXN0IDEwMCVcclxuICBoMSwgaDIsIGgzLCBoNCwgaDUsIGg2LCBwXHJcbiAgYSwgYnV0dG9uLCB1bCwgb2wsIGxpLCBsYWJlbFxyXG4gICAgLXdlYmtpdC1mb250LXNtb290aGluZyBhbnRpYWxpYXNlZFxyXG4gICAgLW1vei1vc3gtZm9udC1zbW9vdGhpbmcgZ3JheXNjYWxlXHJcbiAgYSwgYnV0dG9uXHJcbiAgICB0ZXh0LWRlY29yYXRpb24gbm9uZVxyXG4gICAgYm9yZGVyIG5vbmVcclxuICAgIG91dGxpbmUgbm9uZVxyXG4gIGE6aG92ZXJcclxuICBidXR0b246aG92ZXJcclxuICAgIGN1cnNvciBwb2ludGVyXHJcbm5vcm1hbGl6ZS1iYXNpY3MoKSBpZiBhdXRvLW5vcm1hbGl6ZSA9PSBcImJhc2ljc1wiXHJcbiRyZWQgICAgPSBoc2woMCwgOTUlLCA1NSUpXHJcbiRncmVlbiAgPSBoc2woOTYsIDYxJSwgNTMlKVxyXG4kYmx1ZSAgID0gaHNsKDIwMCwgOTYlLCA0NCUpXHJcbiR5ZWxsb3cgPSBoc2woNTEsIDk0JSwgNTIlKVxyXG4kZ3JheTEgPSBoc2woMCwwJSwxMCUpXHJcbiRncmF5MiA9IGhzbCgwLDAlLDIwJSlcclxuJGdyYXkzID0gaHNsKDAsMCUsMzAlKVxyXG4kZ3JheTQgPSBoc2woMCwwJSw0MCUpXHJcbiRncmF5NSA9IGhzbCgwLDAlLDUwJSlcclxuJGdyYXk2ID0gaHNsKDAsMCUsNjAlKVxyXG4kZ3JheTcgPSBoc2woMCwwJSw3MCUpXHJcbiRncmF5OCA9IGhzbCgwLDAlLDgwJSlcclxuJGdyYXk5ID0gaHNsKDAsMCUsOTAlKVxyXG4kc2FwaGlyZSAgICAgICA9IGhzbCgxODEsIDEwMCUsIDM4JSlcclxuJGdyZWVuLXNlYSAgICAgPSBoc2woMTY5LCAxMDAlLCAzMyUpXHJcbiR0ZWFsICAgICAgICAgID0gaHNsKDE2OCwgMTAwJSwgMzglKVxyXG4kbmlhZ2FyYSAgICAgICA9IGhzbCgxNzIsIDEwMCUsIDM2JSlcclxuJGZvcmVzdC1ncmVlbiAgPSBoc2woMTUyLCAxMDAlLCAzNiUpXHJcbiRlbWVyYWxkICAgICAgID0gaHNsKDE1MiwgMTAwJSwgNDIlKVxyXG4kc3ByaW5nLWdyYXNzICA9IGhzbCg5NiwgNjElLCA1MyUpXHJcbiRzcXVlZXplZC1saW1lID0gaHNsKDc3LCA2OSUsIDUzJSlcclxuJGNyZWFtLWNhbiAgICAgPSBoc2woNDcsIDY2JSwgNjMlKVxyXG4kcmlwZS1sZW1vbiAgICA9IGhzbCg1MSwgOTQlLCA1MiUpXHJcbiRzdW5mbG93ZXIgICAgID0gaHNsKDQ5LCAxMDAlLCA0OCUpXHJcbiRvcmFuZ2UgICAgICAgID0gaHNsKDM2LCAxMDAlLCA1MCUpXHJcbiRmaXJlLWJ1c2ggICAgID0gaHNsKDIxLCA4NiUsIDU1JSlcclxuJGNhcnJvdCAgICAgICAgPSBoc2woMjksIDEwMCUsIDQ3JSlcclxuJHB1bXBraW4gICAgICAgPSBoc2woMTcsIDEwMCUsIDQ0JSlcclxuJHBvbWVncmFuYXRlICAgPSBoc2woMzU2LCA5MyUsIDQyJSlcclxuJHZhbGVuY2lhICAgICAgPSBoc2woMywgODQlLCA1OCUpXHJcbiRhbGl6YXJpbiAgICAgID0gaHNsKDM1OSwgOTQlLCA1NSUpXHJcbiRyZWQtZGVsaWNpb3VzID0gaHNsKDAsIDEwMCUsIDUwJSlcclxuJGNhbmR5LWNhYW5lICAgPSBoc2woMzQ1LCAxMDAlLCA1MCUpXHJcbiRpY2UtY3JlYW0gICAgID0gaHNsKDMzMiwgMTAwJSwgNTAlKVxyXG4kcGluayAgICAgICAgICA9IGhzbCgzMzIsIDEwMCUsIDUwJSlcclxuJGxhdmVuZGVyICAgICAgPSBoc2woMjkxLCA0OCUsIDY0JSlcclxuJGFtZXRoeXN0ICAgICAgPSBoc2woMjkyLCA0OCUsIDQ4JSlcclxuJHdpc3RlcmlhICAgICAgPSBoc2woMjkzLCA3MyUsIDM5JSlcclxuJHB1cnBsZSAgICAgICAgPSBoc2woMjkyLCA0OCUsIDQ4JSlcclxuJG5hdnkgICAgICAgICAgPSBoc2woMjQ2LCA1NSUsIDUwJSlcclxuJGZhaXJ5bGFuZCAgICAgPSBoc2woMjAwLCA5NiUsIDQ0JSlcclxuJHNoYWtlc3BlYXJlICAgPSBoc2woMTk2LCA1MSUsIDY0JSlcclxuJGFxdWEgICAgICAgICAgPSBoc2woMTgxLCA0NSUsIDU4JSlcclxuJGx5bmNoICAgICAgICAgPSBoc2woMjAxLCAzMCUsIDYyJSlcclxuJHNpbHZlciAgICAgICAgPSBoc2woMjAyLCA5JSwgNzYlKVxyXG4kY29uY3JldGUgICAgICA9IGhzbCgxODAsIDclLCA1MiUpXHJcbiRtaWRuaWdodC1ibHVlID0gaHNsKDIxMSwgMzIlLCAyNCUpXHJcbiRibGFjayAgICAgICAgID0gaHNsKDE5MCwgNiUsIDE5JSlcclxuJG1hY2NoaWF0byAgICAgPSBoc2woMzMsIDQwJSwgNDQlKVxyXG4kbGF0dGUgICAgICAgICA9IGhzbCgzOCwgMzklLCA2NCUpXHJcbiRkYXJrLWNyZWFtICAgID0gaHNsKDQwLCAxOCUsIDY3JSlcclxuJGJyb3duICAgICAgICAgPSBoc2woMzMsIDQwJSwgNDQlKVxyXG5pZiBvdmVyd3JpdGUtY29sb3JzXHJcbiAgcmVkICAgID0gJHJlZFxyXG4gIGdyZWVuICA9ICRncmVlblxyXG4gIGJsdWUgICA9ICRibHVlXHJcbiAgeWVsbG93ID0gJHllbGxvd1xyXG4gIGdyYXkxID0gJGdyYXkxXHJcbiAgZ3JheTIgPSAkZ3JheTJcclxuICBncmF5MyA9ICRncmF5M1xyXG4gIGdyYXk0ID0gJGdyYXk0XHJcbiAgZ3JheTUgPSAkZ3JheTVcclxuICBncmF5NiA9ICRncmF5NlxyXG4gIGdyYXk3ID0gJGdyYXk3XHJcbiAgZ3JheTggPSAkZ3JheThcclxuICBncmF5OSA9ICRncmF5OVxyXG4gIHNhcGhpcmUgICAgICAgPSAkc2FwaGlyZVxyXG4gIGdyZWVuLXNlYSAgICAgPSAkZ3JlZW4tc2VhXHJcbiAgdGVhbCAgICAgICAgICA9ICR0ZWFsXHJcbiAgbmlhZ2FyYSAgICAgICA9ICRuaWFnYXJhXHJcbiAgZm9yZXN0LWdyZWVuICA9ICRmb3Jlc3QtZ3JlZW5cclxuICBlbWVyYWxkICAgICAgID0gJGVtZXJhbGRcclxuICBzcHJpbmctZ3Jhc3MgID0gJHNwcmluZy1ncmFzc1xyXG4gIHNxdWVlemVkLWxpbWUgPSAkc3F1ZWV6ZWQtbGltZVxyXG4gIGNyZWFtLWNhbiAgICAgPSAkY3JlYW0tY2FuXHJcbiAgcmlwZS1sZW1vbiAgICA9ICRyaXBlLWxlbW9uXHJcbiAgc3VuZmxvd2VyICAgICA9ICRzdW5mbG93ZXJcclxuICBvcmFuZ2UgICAgICAgID0gJG9yYW5nZVxyXG4gIGZpcmUtYnVzaCAgICAgPSAkZmlyZS1idXNoXHJcbiAgY2Fycm90ICAgICAgICA9ICRjYXJyb3RcclxuICBwdW1wa2luICAgICAgID0gJHB1bXBraW5cclxuICBwb21lZ3JhbmF0ZSAgID0gJHBvbWVncmFuYXRcclxuICB2YWxlbmNpYSAgICAgID0gJHZhbGVuY2lhXHJcbiAgYWxpemFyaW4gICAgICA9ICRhbGl6YXJpblxyXG4gIHJlZC1kZWxpY2lvdXMgPSAkcmVkLWRlbGljaW91c1xyXG4gIGNhbmR5LWNhYW5lICAgPSAkY2FuZHktY2FhbmVcclxuICBpY2UtY3JlYW0gICAgID0gJGljZS1jcmVhbVxyXG4gIHBpbmsgICAgICAgICAgPSAkcGlua1xyXG4gIGxhdmVuZGVyICAgICAgPSAkbGF2ZW5kZXJcclxuICBhbWV0aHlzdCAgICAgID0gJGFtZXRoeXN0XHJcbiAgd2lzdGVyaWEgICAgICA9ICR3aXN0ZXJpYVxyXG4gIHB1cnBsZSAgICAgICAgPSAkcHVycGxlXHJcbiAgbmF2eSAgICAgICAgICA9ICRuYXZ5XHJcbiAgZmFpcnlsYW5kICAgICA9ICRmYWlyeWxhbmRcclxuICBzaGFrZXNwZWFyZSAgID0gJHNoYWtlc3BlYXJlXHJcbiAgYXF1YSAgICAgICAgICA9ICRhcXVhXHJcbiAgbHluY2ggICAgICAgICA9ICRseW5jaFxyXG4gIHNpbHZlciAgICAgICAgPSAkc2lsdmVyXHJcbiAgY29uY3JldGUgICAgICA9ICRjb25jcmV0ZVxyXG4gIG1pZG5pZ2h0LWJsdWUgPSAkbWlkbmlnaHQtYmx1ZVxyXG4gIGJsYWNrICAgICAgICAgPSAkYmxhY2tcclxuICBtYWNjaGlhdG8gICAgID0gJG1hY2NoaWF0b1xyXG4gIGxhdHRlICAgICAgICAgPSAkbGF0dGVcclxuICBkYXJrLWNyZWFtICAgID0gJGRhcmstY3JlYW1cclxuICBicm93biAgICAgICAgID0gJGJyb3duXHJcbmVhc2VJblF1YWQgICAgID0gY3ViaWMtYmV6aWVyKDAuNTUwLCAwLjA4NSwgMC42ODAsIDAuNTMwKVxyXG5lYXNlSW5DdWJpYyAgICA9IGN1YmljLWJlemllcigwLjU1MCwgMC4wNTUsIDAuNjc1LCAwLjE5MClcclxuZWFzZUluUXVhcnQgICAgPSBjdWJpYy1iZXppZXIoMC44OTUsIDAuMDMwLCAwLjY4NSwgMC4yMjApXHJcbmVhc2VJblF1aW50ICAgID0gY3ViaWMtYmV6aWVyKDAuNzU1LCAwLjA1MCwgMC44NTUsIDAuMDYwKVxyXG5lYXNlSW5TaW5lICAgICA9IGN1YmljLWJlemllcigwLjQ3MCwgMC4wMDAsIDAuNzQ1LCAwLjcxNSlcclxuZWFzZUluRXhwbyAgICAgPSBjdWJpYy1iZXppZXIoMC45NTAsIDAuMDUwLCAwLjc5NSwgMC4wMzUpXHJcbmVhc2VJbkNpcmMgICAgID0gY3ViaWMtYmV6aWVyKDAuNjAwLCAwLjA0MCwgMC45ODAsIDAuMzM1KVxyXG5lYXNlSW5CYWNrICAgICA9IGN1YmljLWJlemllcigwLjYwMCwgLTAuMjgsIDAuNzM1LCAwLjA0NSlcclxuZWFzZU91dFF1YWQgICAgPSBjdWJpYy1iZXppZXIoMC4yNTAsIDAuNDYwLCAwLjQ1MCwgMC45NDApXHJcbmVhc2VPdXRDdWJpYyAgID0gY3ViaWMtYmV6aWVyKDAuMjE1LCAwLjYxMCwgMC4zNTUsIDEuMDAwKVxyXG5lYXNlT3V0UXVhcnQgICA9IGN1YmljLWJlemllcigwLjE2NSwgMC44NDAsIDAuNDQwLCAxLjAwMClcclxuZWFzZU91dFF1aW50ICAgPSBjdWJpYy1iZXppZXIoMC4yMzAsIDEuMDAwLCAwLjMyMCwgMS4wMDApXHJcbmVhc2VPdXRTaW5lICAgID0gY3ViaWMtYmV6aWVyKDAuMzkwLCAwLjU3NSwgMC41NjUsIDEuMDAwKVxyXG5lYXNlT3V0RXhwbyAgICA9IGN1YmljLWJlemllcigwLjE5MCwgMS4wMDAsIDAuMjIwLCAxLjAwMClcclxuZWFzZU91dENpcmMgICAgPSBjdWJpYy1iZXppZXIoMC4wNzUsIDAuODIwLCAwLjE2NSwgMS4wMDApXHJcbmVhc2VPdXRCYWNrICAgID0gY3ViaWMtYmV6aWVyKDAuMTc1LCAwLjg4NSwgMC4zMjAsIDEuMjc1KVxyXG5lYXNlSW5PdXRRdWFkICA9IGN1YmljLWJlemllcigwLjQ1NSwgMC4wMzAsIDAuNTE1LCAwLjk1NSlcclxuZWFzZUluT3V0Q3ViaWMgPSBjdWJpYy1iZXppZXIoMC42NDUsIDAuMDQ1LCAwLjM1NSwgMS4wMDApXHJcbmVhc2VJbk91dFF1YXJ0ID0gY3ViaWMtYmV6aWVyKDAuNzcwLCAwLjAwMCwgMC4xNzUsIDEuMDAwKVxyXG5lYXNlSW5PdXRRdWludCA9IGN1YmljLWJlemllcigwLjg2MCwgMC4wMDAsIDAuMDcwLCAxLjAwMClcclxuZWFzZUluT3V0U2luZSAgPSBjdWJpYy1iZXppZXIoMC40NDUsIDAuMDUwLCAwLjU1MCwgMC45NTApXHJcbmVhc2VJbk91dEV4cG8gID0gY3ViaWMtYmV6aWVyKDEuMDAwLCAwLjAwMCwgMC4wMDAsIDEuMDAwKVxyXG5lYXNlSW5PdXRDaXJjICA9IGN1YmljLWJlemllcigwLjc4NSwgMC4xMzUsIDAuMTUwLCAwLjg2MClcclxuZWFzZUluT3V0QmFjayAgPSBjdWJpYy1iZXppZXIoMC42ODAsIC0wLjU1LCAwLjI2NSwgMS41NTApXHJcbnNjciA9ICdvbmx5IHNjcmVlbiBhbmQnXHJcbnNtYWxsID0gKG1vYmlsZS1icmVha3BvaW50IC0gMSlcclxuc21hbGwgPSBqb2luKCcnLCAnbWF4LXdpZHRoOicsIHNtYWxsKVxyXG5zbWFsbCA9IGFkZC1icmFjZXMoc21hbGwpXHJcbnNtYWxsID0gam9pbignICcsIHNjciwgc21hbGwpXHJcbnNtYWxsID0gdW5xdW90ZShzbWFsbClcclxubWVkaXVtID0gKHRhYmxldC1icmVha3BvaW50IC0gMSlcclxubWVkaXVtID0gam9pbignJywgJ21heC13aWR0aDonLCBtZWRpdW0pXHJcbm1lZGl1bSA9IGFkZC1icmFjZXMobWVkaXVtKVxyXG5tZWRpdW0gPSBqb2luKCcgJywgc2NyLCBtZWRpdW0pXHJcbm1lZGl1bSA9IHVucXVvdGUobWVkaXVtKVxyXG5sYXJnZSA9IHRhYmxldC1icmVha3BvaW50XHJcbmxhcmdlID0gam9pbignJywgJ21pbi13aWR0aDonLCBsYXJnZSlcclxubGFyZ2UgPSBhZGQtYnJhY2VzKGxhcmdlKVxyXG5sYXJnZSA9IGpvaW4oJyAnLCBzY3IsIGxhcmdlKVxyXG5sYXJnZSA9IHVucXVvdGUobGFyZ2UpXHJcbm1vYmlsZSA9IChtb2JpbGUtYnJlYWtwb2ludCAtIDEpXHJcbm1vYmlsZSA9IGpvaW4oJycsICdtYXgtZGV2aWNlLXdpZHRoOicsIG1vYmlsZSlcclxubW9iaWxlID0gYWRkLWJyYWNlcyhtb2JpbGUpXHJcbm1vYmlsZSA9IGpvaW4oJyAnLCBzY3IsIG1vYmlsZSlcclxubW9iaWxlID0gdW5xdW90ZShtb2JpbGUpXHJcbnRhYmxldCA9ICh0YWJsZXQtYnJlYWtwb2ludCAtIDEpXHJcbnRhYmxldCA9IGpvaW4oJycsICdtYXgtZGV2aWNlLXdpZHRoOicsIHRhYmxldClcclxudGFibGV0ID0gYWRkLWJyYWNlcyh0YWJsZXQpXHJcbnRhYmxldCA9IGpvaW4oJyAnLCBzY3IsIHRhYmxldClcclxudGFibGV0ID0gdW5xdW90ZSh0YWJsZXQpXHJcbmRlc2t0b3AgPSB0YWJsZXQtYnJlYWtwb2ludFxyXG5kZXNrdG9wID0gam9pbignJywgJ21pbi1kZXZpY2Utd2lkdGg6JywgZGVza3RvcClcclxuZGVza3RvcCA9IGFkZC1icmFjZXMoZGVza3RvcClcclxuZGVza3RvcCA9IGpvaW4oJyAnLCBzY3IsIGRlc2t0b3ApXHJcbmRlc2t0b3AgPSB1bnF1b3RlKGRlc2t0b3ApXHJcbl9fZWFzZSgpXHJcbiAgdHlwZSA9IGNhbGxlZC1mcm9tXHJcbiAgc3RyZW5ndGggPSB1bml0KGFyZ3VtZW50cywgJycpXHJcbiAgaWYgdHlwZSA9PSAnZWFzZUluJ1xyXG4gICAgeDEgPSAoc3RyZW5ndGggLyAxMDApXHJcbiAgICB4MiA9IDBcclxuICAgIHkxID0gMVxyXG4gICAgeTIgPSAoICgxMDAgLSBzdHJlbmd0aCkgLyAxMDAgKVxyXG4gIGVsc2UgaWYgdHlwZSA9PSAnZWFzZU91dCdcclxuICAgIHgxID0gMFxyXG4gICAgeDIgPSAoc3RyZW5ndGgvMTAwKVxyXG4gICAgeTEgPSAoICgxMDAgLSBzdHJlbmd0aCkgLyAxMDApXHJcbiAgICB5MiA9IDFcclxuICBlbHNlXHJcbiAgICB4MSA9IChzdHJlbmd0aCAvIDEwMClcclxuICAgIHgyID0gMFxyXG4gICAgeTEgPSAoICgxMDAgLSBzdHJlbmd0aCkgLyAxMDAgKVxyXG4gICAgeTIgPSAxXHJcbiAgY3ViaWMtYmV6aWVyKHgxLCB4MiwgeTEsIHkyKVxyXG5lYXNlSW4oKVxyXG4gIF9fZWFzZShhcmd1bWVudHMpXHJcbmVhc2VPdXQoKVxyXG4gIF9fZWFzZShhcmd1bWVudHMpXHJcbmVhc2VJbk91dCgpXHJcbiAgX19lYXNlKGFyZ3VtZW50cylcclxuZWFzZSA9IGVhc2VJbk91dFxyXG5fX2NvbnZlcnQoc2l6ZSwgYmFzZSlcclxuICBiYXNlID0gc3RyaXAtdW5pdHMoYmFzZSlcclxuICB2YWx1ZXMgPSAoKVxyXG4gIGZvciBpbmRleCBpbiBzaXplXHJcbiAgICB2YWwgPSBzdHJpcC11bml0cyhpbmRleClcclxuICAgIHZhbCA9IHZhbC9iYXNlXHJcbiAgICB2YWwgPSB1bml0KHZhbCwgY2FsbGVkLWZyb20pXHJcbiAgICBwdXNoKHZhbHVlcywgdmFsKVxyXG4gIHZhbHVlc1xyXG5lbShzaXplLCBiYXNlID0gMTYpXHJcbiAgX19jb252ZXJ0KHNpemUsIGJhc2UpXHJcbnJlbShzaXplLCBiYXNlID0gMTYpXHJcbiAgX19jb252ZXJ0KHNpemUsIGJhc2UpXHJcbnBlcmNlbnQodmFsdWUsIHRvdGFsKVxyXG4gIHZhbHVlID0gc3RyaXAtdW5pdHModmFsdWUpXHJcbiAgdG90YWwgPSBzdHJpcC11bml0cyh0b3RhbClcclxuICAodmFsdWUvdG90YWwpICogMTAwJVxyXG5wZXJjZW50YWdlID0gcGVyY2VudFxyXG5yYW5kb20obWluLG1heClcclxuICByZXR1cm4gZmxvb3IoIG1hdGgoMCwgJ3JhbmRvbScpKihtYXggLSBtaW4gKyAxKSArIG1pbiApXHJcbnRyYW5zcGFyZW50KClcclxuICByZ2JhKGFyZ3VtZW50c1swXSwgYXJndW1lbnRzWzFdKVxyXG5hbmltYXRlKG9wdGlvbnMsIGtleWZyYW1lcy4uLilcclxuICBvcHRpb25zQ2hlY2sgPSBqb2luKCcsICcsIG9wdGlvbnMpXHJcbiAgY3VzdG9tTmFtZUF2YWlsYWJsZSA9IHRydWVcclxuICBpZiAoXHJcbiAgICBtYXRjaCgnXlxcZHxeZWFzZXxeYm91bmNlfF5lbGFzdGljfF5saW5lYXJ8XmluZmluaXRlfF5ub3JtYWx8XmFsdGVybmF0ZXxeZm9yd2FyZHN8XmJhY2t3YXJkc3xeYm90aHxec3RlcHNcXCh8XmNvbnRpbnVvdXMnLCBvcHRpb25zQ2hlY2spXHJcbiAgKVxyXG4gICAgY3VzdG9tTmFtZUF2YWlsYWJsZSA9IGZhbHNlXHJcbiAgY29udGludW91c0F2YWlsYWJsZSA9IGZhbHNlXHJcbiAgaWYgKCBtYXRjaCgnY29udGludW91cycsIG9wdGlvbnNDaGVjaykgKVxyXG4gICAgY29udGludW91c0F2YWlsYWJsZSA9IHRydWVcclxuICBpZiAoIGN1c3RvbU5hbWVBdmFpbGFibGUgKVxyXG4gICAgbmFtZSA9IG9wdGlvbnNbMF1cclxuICBlbHNlXHJcbiAgICBzZWxlY3RvciA9IHNlbGVjdG9yKClcclxuICAgIHNlbGVjdG9yID0gXFxcclxuICAgICAgcmVwbGFjZSgnOmJlZm9yZXw6YWZ0ZXJ8OmhvdmVyfDphY3RpdmV8OnZpc2l0ZWR8OnRhcmdldCcsICcnLCBzZWxlY3RvcilcclxuICAgIHNlbGVjdG9yID0gcmVwbGFjZSgnLipbXmEtekEtWl0rJywgJycsIHNlbGVjdG9yKVxyXG4gICAgc3RyaW5nID0gcmVwbGFjZSgnXFxXJywgJyAnLCBzZWxlY3RvcilcclxuICAgIG5hbWUgPSB1bnF1b3RlKHNlbGVjdG9yKVxyXG4gIGlmICggY29udGludW91c0F2YWlsYWJsZSApXHJcbiAgICBpZiAoIG1hdGNoKCc6aG92ZXJ8OmFjdGl2ZScsIHNlbGVjdG9yKCkpIClcclxuICAgICAgb3B0aW9ucyA9IGpvaW4oJyAnLCBvcHRpb25zKVxyXG4gICAgICBvcHRpb25zID0gcmVwbGFjZSgnIGNvbnRpbnVvdXN8Y29udGludW91cyAnLCAnJywgb3B0aW9ucylcclxuICAgICAgb3B0aW9ucyA9IHVucXVvdGUob3B0aW9ucylcclxuICAgICAgc2VsZWN0b3IgPSByZXBsYWNlKCc6aG92ZXJ8OmFjdGl2ZScsICcnLCBzZWxlY3RvcigpKVxyXG4gICAgICAvIHtzZWxlY3Rvcn1cclxuICAgICAgICBhbmltYXRpb24gbmFtZSAwbXMgMTAwbXNcclxuICAgIGVsc2VcclxuICAgICAgZXJyb3IoJ2NvbnRpbnVvdXMgaXMgYXZhaWxhYmxlIG9ubHkgZm9yIDpob3ZlciBhbmQgOmFjdGl2ZSBwc2V1ZG8gc2VsZWN0b3JzJylcclxuICBpZiAoIGN1c3RvbU5hbWVBdmFpbGFibGUgKVxyXG4gICAgYW5pbWF0aW9uIG9wdGlvbnNcclxuICBlbHNlXHJcbiAgICBhbmltYXRpb24gbmFtZSBvcHRpb25zXHJcbiAgQGtleWZyYW1lcyB7bmFtZX1cclxuICAgIGZvciBrZXlmcmFtZSwgbiBpbiBrZXlmcmFtZXNcclxuICAgICAga2V5ZnJhbWVDaGVjayA9IGpvaW4oJywgJywga2V5ZnJhbWUpXHJcbiAgICAgIHBlcmNlbnRhZ2VBdmFpbGFibGUgPSBmYWxzZVxyXG4gICAgICBpZiAoIG1hdGNoKCdeXFxkJywga2V5ZnJhbWVDaGVjaykgKVxyXG4gICAgICAgIHBlcmNlbnRhZ2VBdmFpbGFibGUgPSB0cnVlXHJcbiAgICAgIHRyYW5zZm9ybUF2YWlsYWJsZSA9IGZhbHNlXHJcbiAgICAgIGlmICggbWF0Y2goJ3RyYW5zbGF0ZXxcXGJyb3RhdGV8XFxic2NhbGV8c2tldycsIGtleWZyYW1lQ2hlY2spIClcclxuICAgICAgICB0cmFuc2Zvcm1BdmFpbGFibGUgPSB0cnVlXHJcbiAgICAgIGZpbHRlckF2YWlsYWJsZSA9IGZhbHNlXHJcbiAgICAgIGlmICggbWF0Y2goJ2JsdXJ8YnJpZ2h0bmVzc3xjb250cmFzdHxkcm9wLXNoYWRvd3xncmF5c2NhbGV8aHVlLXJvdGF0ZXxpbnZlcnR8c2F0dXJhdGV8c2VwaWEnLCBrZXlmcmFtZUNoZWNrKSApXHJcbiAgICAgICAgZmlsdGVyQXZhaWxhYmxlID0gdHJ1ZVxyXG4gICAgICBpZiAocGVyY2VudGFnZUF2YWlsYWJsZSA9PSB0cnVlKVxyXG4gICAgICAgIHBlcmNlbnRhZ2UgPSBrZXlmcmFtZVswXVxyXG4gICAgICBlbHNlXHJcbiAgICAgICAgaWYgKGxlbmd0aChrZXlmcmFtZXMpID4gMSlcclxuICAgICAgICAgIHBlcmNlbnRhZ2UgPSAoMTAwIC8gKCAoIGxlbmd0aChrZXlmcmFtZXMpIC0gMSkgLyBuKSApICogMSVcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICBwZXJjZW50YWdlID0gMCVcclxuICAgICAge3BlcmNlbnRhZ2V9XHJcbiAgICAgICAgdHJhbnNmb3JtUHJvcHMgPSB7fVxyXG4gICAgICAgIGZpbHRlclByb3BzID0ge31cclxuICAgICAgICBmb3IgcHJvcCwgbiBpbiBrZXlmcmFtZVxyXG4gICAgICAgICAgcHJvcENoZWNrID0gam9pbignLCAnLCBwcm9wKVxyXG4gICAgICAgICAgaXNQZXJjZW50YWdlID0gZmFsc2VcclxuICAgICAgICAgIGlmICggbWF0Y2goJ15cXGQnLCBwcm9wQ2hlY2spIClcclxuICAgICAgICAgICAgaXNQZXJjZW50YWdlID0gdHJ1ZVxyXG4gICAgICAgICAgaXNUcmFuc2Zvcm0gPSBmYWxzZVxyXG4gICAgICAgICAgaWYgKCBtYXRjaCgnXnRyYW5zbGF0ZXxecm90YXRlfF5zY2FsZXxec2tldyAnLCBwcm9wQ2hlY2spIClcclxuICAgICAgICAgICAgaXNUcmFuc2Zvcm0gPSB0cnVlXHJcbiAgICAgICAgICBpc0ZpbHRlciA9IGZhbHNlXHJcbiAgICAgICAgICBpZiAoIG1hdGNoKCdibHVyfGJyaWdodG5lc3N8Y29udHJhc3R8ZHJvcC1zaGFkb3d8Z3JheXNjYWxlfGh1ZS1yb3RhdGV8aW52ZXJ0fHNhdHVyYXRlfHNlcGlhJywgcHJvcENoZWNrKSApXHJcbiAgICAgICAgICAgIGlzRmlsdGVyID0gdHJ1ZVxyXG4gICAgICAgICAgaXNFYXNpbmcgPSBmYWxzZVxyXG4gICAgICAgICAgaWYgKCBtYXRjaCgnZWFzZXxjdWJpYy1iZXppZXInLCBwcm9wQ2hlY2spIClcclxuICAgICAgICAgICAgaXNFYXNpbmcgPSB0cnVlXHJcbiAgICAgICAgICBpZiAoIGlzVHJhbnNmb3JtIClcclxuICAgICAgICAgICAgdHJhbnNmb3JtUHJvcHNbbl0gPSBwcm9wXHJcbiAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHRyYW5zZm9ybVByb3BzW25dID0gdW5xdW90ZSgnJylcclxuICAgICAgICAgIGlmICggaXNGaWx0ZXIgKVxyXG4gICAgICAgICAgICBmaWx0ZXJQcm9wc1tuXSA9IHByb3BcclxuICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgZmlsdGVyUHJvcHNbbl0gPSB1bnF1b3RlKCcnKVxyXG4gICAgICAgICAgaWYgKCBpc0Vhc2luZyApXHJcbiAgICAgICAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb24gcHJvcFxyXG4gICAgICAgICAgaWYgKCAhaXNQZXJjZW50YWdlICYmICFpc1RyYW5zZm9ybSAmJiAhaXNGaWx0ZXIgJiYgIWlzRWFzaW5nIClcclxuICAgICAgICAgICAgcmVndWxhclByb3AgPSBzcGxpdCgnKCcsICcnICsgcHJvcClcclxuICAgICAgICAgICAgcmVndWxhclZhbHVlID0gc3BsaXQoJyknLCAnJyArIHJlZ3VsYXJQcm9wWzFdKVxyXG4gICAgICAgICAgICBwcmludFByb3AgPSB1bnF1b3RlKHJlZ3VsYXJQcm9wWzBdKVxyXG4gICAgICAgICAgICBwcmludFZhbHVlID0gdW5xdW90ZShyZWd1bGFyVmFsdWVbMF0pXHJcbiAgICAgICAgICAgIHtwcmludFByb3B9IHByaW50VmFsdWVcclxuICAgICAgICBpZiAoIHRyYW5zZm9ybUF2YWlsYWJsZSApXHJcbiAgICAgICAgICB0cmFuc2Zvcm0gdHJhbnNmb3JtUHJvcHNcclxuICAgICAgICBpZiAoIGZpbHRlckF2YWlsYWJsZSApXHJcbiAgICAgICAgICBmaWx0ZXIgZmlsdGVyUHJvcHNcclxuYW50aWFsaWFzKClcclxuICAtd2Via2l0LWZvbnQtc21vb3RoaW5nIGFudGlhbGlhc2VkXHJcbiAgLW1vei1vc3gtZm9udC1zbW9vdGhpbmcgZ3JheXNjYWxlXHJcbmNsb2NraGFuZCgpXHJcbiAgaWYgbGVuZ3RoKGFyZ3VtZW50cykgPiA0XHJcbiAgICBlcnJvcihcIkNsb2NraGFuZCBwcm9wZXJ0eSBzdXBwb3J0IHVwIHRvIDQgdmFsdWVzIGF0IGEgdGltZS5cIilcclxuICBzaWRlcyA9IHRvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdFxyXG4gIGZvciBzaWRlLCBuIGluIHNpZGVzXHJcbiAgICBpZiBsZW5ndGgoYXJndW1lbnRzKSA9PSAxXHJcbiAgICAgIHtzaWRlfSBhcmd1bWVudHNcclxuICAgIGVsc2UgaWYgbGVuZ3RoKGFyZ3VtZW50cykgPT0gMlxyXG4gICAgICB7c2lkZX0gYXJndW1lbnRzWzBdIGlmIG4gPT0gMCB8fCBuID09IDIgdW5sZXNzIGFyZ3VtZW50c1swXSA9PSAnXydcclxuICAgICAge3NpZGV9IGFyZ3VtZW50c1sxXSBpZiBuID09IDEgfHwgbiA9PSAzIHVubGVzcyBhcmd1bWVudHNbMV0gPT0gJ18nXHJcbiAgICBlbHNlIGlmIGxlbmd0aChhcmd1bWVudHMpID09IDNcclxuICAgICAge3NpZGV9IGFyZ3VtZW50c1swXSBpZiBuID09IDAgdW5sZXNzIGFyZ3VtZW50c1swXSA9PSAnXydcclxuICAgICAge3NpZGV9IGFyZ3VtZW50c1sxXSBpZiBuID09IDEgfHwgbiA9PSAzIHVubGVzcyBhcmd1bWVudHNbMV0gPT0gJ18nXHJcbiAgICAgIHtzaWRlfSBhcmd1bWVudHNbMl0gaWYgbiA9PSAyIHVubGVzcyBhcmd1bWVudHNbMl0gPT0gJ18nXHJcbiAgICBlbHNlXHJcbiAgICAgIHtzaWRlfSBhcmd1bWVudHNbbl0gdW5sZXNzIGFyZ3VtZW50c1tuXSA9PSAnXydcclxudHJibCA9IHRibHIgPSBjbG9ja2hhbmRcclxuZXZlcnl0aGluZygpXHJcbiAgKlxyXG4gICo6YmVmb3JlXHJcbiAgKjphZnRlclxyXG4gICAge2Jsb2NrfVxyXG4gICAgJjo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlclxyXG4gICAgICB7YmxvY2t9XHJcbiAgICAmOi1tb3otcGxhY2Vob2xkZXJcclxuICAgICAge2Jsb2NrfVxyXG4gICAgJjo6LW1vei1wbGFjZWhvbGRlclxyXG4gICAgICB7YmxvY2t9XHJcbiAgICAmOi1tcy1pbnB1dC1wbGFjZWhvbGRlclxyXG4gICAgICB7YmxvY2t9XHJcbmZvbnQtZmFjZSggbmFtZSwgZm9udC1zcmMsIHdlaWdodCA9IGZhbHNlLCBzdHlsZSA9IGZhbHNlLCBmb3JtYXRzID0gbG9jYWwgZW90IHdvZmYyIHdvZmYgdHJ1ZXR5cGUgc3ZnLCBzdmctZm9udC1uYW1lID0gZmFsc2UsIGxvY2FsLWZvbnQtbmFtZSA9IGZhbHNlIClcclxuICBAZm9udC1mYWNlXHJcbiAgICBmb250LWZhbWlseSBuYW1lXHJcbiAgICBpZiB3ZWlnaHRcclxuICAgICAgZm9udC13ZWlnaHQgd2VpZ2h0XHJcbiAgICBpZiBzdHlsZVxyXG4gICAgICBmb250LXN0eWxlIHN0eWxlXHJcbiAgICBmb250cyA9ICgpXHJcbiAgICBpZiBsb2NhbCBpbiBmb3JtYXRzXHJcbiAgICAgIGxvY2FsLW5hbWUgPSBsb2NhbC1mb250LW5hbWUgPyBsb2NhbC1mb250LW5hbWUgOiBuYW1lXHJcbiAgICAgIHB1c2goZm9udHMsICdsb2NhbChcIicgKyBsb2NhbC1uYW1lICsgJ1wiKScpXHJcbiAgICBpZiBlb3QgaW4gZm9ybWF0c1xyXG4gICAgICBzcmM6IHVybCggZm9udC1zcmMgKyBcIi5lb3RcIiApXHJcbiAgICAgIHB1c2goIGZvbnRzLCAndXJsKFwiJyArIGZvbnQtc3JjICsgJy5lb3Q/I2llZml4XCIpIGZvcm1hdChcImVtYmVkZGVkLW9wZW50eXBlXCIpJyApXHJcbiAgICBpZiB3b2ZmMiBpbiBmb3JtYXRzXHJcbiAgICAgIHB1c2goIGZvbnRzLCAndXJsKFwiJyArIGZvbnQtc3JjICsgJy53b2ZmMlwiKSBmb3JtYXQoXCJ3b2ZmMlwiKScgKVxyXG4gICAgaWYgd29mZiBpbiBmb3JtYXRzXHJcbiAgICAgIHB1c2goIGZvbnRzLCAndXJsKFwiJyArIGZvbnQtc3JjICsgJy53b2ZmXCIpIGZvcm1hdChcIndvZmZcIiknIClcclxuICAgIGlmIG9wZW50eXBlIGluIGZvcm1hdHMgfHwgb3RmIGluIGZvcm1hdHNcclxuICAgICAgcHVzaCggZm9udHMsICd1cmwoXCInICsgZm9udC1zcmMgKyAnLm90ZlwiKSBmb3JtYXQoXCJvcGVudHlwZVwiKScgKVxyXG4gICAgaWYgdHJ1ZXR5cGUgaW4gZm9ybWF0cyB8fCB0dGYgaW4gZm9ybWF0c1xyXG4gICAgICBwdXNoKCBmb250cywgJ3VybChcIicgKyBmb250LXNyYyArICcudHRmXCIpIGZvcm1hdChcInRydWV0eXBlXCIpJyApXHJcbiAgICBpZiBzdmcgaW4gZm9ybWF0c1xyXG4gICAgICBzdmctbmFtZSA9IHN2Zy1mb250LW5hbWUgPyBzdmctZm9udC1uYW1lIDogbmFtZVxyXG4gICAgICBwdXNoKCBmb250cywgJ3VybChcIicgKyBmb250LXNyYyArICcuc3ZnIycgKyBzdmctbmFtZSArICdcIikgZm9ybWF0KFwic3ZnXCIpJyApXHJcbiAgICBzcmMgdW5xdW90ZSggam9pbiggXCIsIFwiLCBmb250cyApIClcclxuc2xpZGVyVGh1bWIoKVxyXG4gIGlmIHNlbGVjdG9yKCkgPT0gXCImXCJcclxuICAgIGVycm9yKCBcInBsYWNlaG9sZGVyKCkgbXVzdCBiZSBjYWxsZWQgZnJvbSBhIHJ1bGVzZXQhXCIgKVxyXG4gICY6Oi13ZWJraXQtc2xpZGVyLXRodW1iXHJcbiAgICB7YmxvY2t9XHJcbiAgJjo6LW1vei1yYW5nZS10aHVtYlxyXG4gICAge2Jsb2NrfVxyXG4gICY6Oi1tcy10aHVtYlxyXG4gICAge2Jsb2NrfVxyXG5zbGlkZXJUcmFjaygpXHJcbiAgaWYgc2VsZWN0b3IoKSA9PSBcIiZcIlxyXG4gICAgZXJyb3IoIFwicGxhY2Vob2xkZXIoKSBtdXN0IGJlIGNhbGxlZCBmcm9tIGEgcnVsZXNldCFcIiApXHJcbiAgJjo6LW1zLXRyYWNrXHJcbiAgICBiYWNrZ3JvdW5kIHRyYW5zcGFyZW50XHJcbiAgICBib3JkZXItY29sb3IgdHJhbnNwYXJlbnRcclxuICAgIGNvbG9yIHRyYW5zcGFyZW50XHJcbiAgJjo6LXdlYmtpdC1zbGlkZXItcnVubmFibGUtdHJhY2tcclxuICAgIHtibG9ja31cclxuICAmOjotbW96LXJhbmdlLXRyYWNrXHJcbiAgICB7YmxvY2t9XHJcbiAgJjo6LW1zLXRyYWNrXHJcbiAgICB7YmxvY2t9XHJcbi1wb3ModHlwZSwgYXJncylcclxuICBwb3NpdGlvbiB0eXBlXHJcbiAgaWYgbGVuZ3RoKGFyZ3MpID4gNFxyXG4gICAgZXJyb3IoXCJQb3NpdGlvbiBwcm9wZXJ0eSBzdXBwb3J0IHVwIHRvIDQgdmFsdWVzIGF0IGEgdGltZS5cIilcclxuICBhcmdzU3RyaW5nID0gY3JlYXRlLXN0cmluZyhhcmdzKVxyXG4gIGlmIG1hdGNoKCd0b3B8Ym90dG9tfGxlZnR8cmlnaHQnLCBhcmdzU3RyaW5nKVxyXG4gICAgZm9yIGFyZyBpbiBhcmdzXHJcbiAgICAgIHthcmd9IDBcclxuICBlbHNlXHJcbiAgICBzaWRlcyA9IHRvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdFxyXG4gICAgZm9yIHNpZGUsIG4gaW4gc2lkZXNcclxuICAgICAgaWYgbGVuZ3RoKGFyZ3MpID09IDFcclxuICAgICAgICB7c2lkZX0gYXJnc1xyXG4gICAgICBlbHNlIGlmIGxlbmd0aChhcmdzKSA9PSAyXHJcbiAgICAgICAge3NpZGV9IGFyZ3NbMF0gaWYgbiA9PSAwIHx8IG4gPT0gMiB1bmxlc3MgYXJnc1swXSA9PSAnXydcclxuICAgICAgICB7c2lkZX0gYXJnc1sxXSBpZiBuID09IDEgfHwgbiA9PSAzIHVubGVzcyBhcmdzWzFdID09ICdfJ1xyXG4gICAgICBlbHNlIGlmIGxlbmd0aChhcmdzKSA9PSAzXHJcbiAgICAgICAge3NpZGV9IGFyZ3NbMF0gaWYgbiA9PSAwIHVubGVzcyBhcmdzWzBdID09ICdfJ1xyXG4gICAgICAgIHtzaWRlfSBhcmdzWzFdIGlmIG4gPT0gMSB8fCBuID09IDMgdW5sZXNzIGFyZ3NbMV0gPT0gJ18nXHJcbiAgICAgICAge3NpZGV9IGFyZ3NbMl0gaWYgbiA9PSAyIHVubGVzcyBhcmdzWzJdID09ICdfJ1xyXG4gICAgICBlbHNlXHJcbiAgICAgICAge3NpZGV9IGFyZ3Nbbl0gdW5sZXNzIGFyZ3Nbbl0gPT0gJ18nXHJcbmZpeGVkKClcclxuICAtcG9zKGZpeGVkLCBhcmd1bWVudHMpXHJcbmFic29sdXRlKClcclxuICAtcG9zKGFic29sdXRlLCBhcmd1bWVudHMpXHJcbnJlbGF0aXZlKClcclxuICAtcG9zKHJlbGF0aXZlLCBhcmd1bWVudHMpXHJcbnN0YXRpYygpXHJcbiAgLXBvcyhzdGF0aWMsIGFyZ3VtZW50cylcclxucGxhY2Vob2xkZXIoKVxyXG4gIGlmIHNlbGVjdG9yKCkgPT0gXCImXCJcclxuICAgIGVycm9yKCBcInBsYWNlaG9sZGVyKCkgbXVzdCBiZSBjYWxsZWQgZnJvbSBhIHJ1bGVzZXQhXCIgKVxyXG4gICY6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXJcclxuICAgIHtibG9ja31cclxuICAmOi1tb3otcGxhY2Vob2xkZXJcclxuICAgIHtibG9ja31cclxuICAmOjotbW96LXBsYWNlaG9sZGVyXHJcbiAgICB7YmxvY2t9XHJcbiAgJjotbXMtaW5wdXQtcGxhY2Vob2xkZXJcclxuICAgIHtibG9ja31cclxucHNldWRvKClcclxuICBeWy0xXTp7YXJndW1lbnRzfV5bLTEuLi0xXVxyXG4gICAge2Jsb2NrfVxyXG5yZWFsLWhlaWdodCgpXHJcbiAgYXJncyA9IHN0cmlwLXVuaXRzKGFyZ3VtZW50cylcclxuICBoZWlnaHQgYXJncyAqIDF2aFxyXG4gIEBtZWRpYSB0YWJsZXRcclxuICAgIHJhdGlvcyA9ICczLzQnLCAnMi8zJywgJzEwLzE2JywgJzkvMTYnXHJcbiAgICBmb3IgcmF0aW8gaW4gcmF0aW9zXHJcbiAgICAgIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgXFxcclxuICAgICAgICAgICAgIChtYXgtZGV2aWNlLWFzcGVjdC1yYXRpbzogdW5xdW90ZShyYXRpbykpIGFuZCBcXFxyXG4gICAgICAgICAgICAgKG9yaWVudGF0aW9uOiBwb3J0cmFpdClcclxuICAgICAgICBoZWlnaHQgcm91bmQoIChhcmdzIC8gY29udmVydChyYXRpbykgKSwgMikgKiAxdndcclxuICAgIGZvciByYXRpbyBpbiByYXRpb3NcclxuICAgICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCBcXFxyXG4gICAgICAgICAgICAgKG1heC1kZXZpY2UtYXNwZWN0LXJhdGlvOiB1bnF1b3RlKHJhdGlvKSkgYW5kIFxcXHJcbiAgICAgICAgICAgICAob3JpZW50YXRpb246IGxhbmRzY2FwZSlcclxuICAgICAgICBoZWlnaHQgcm91bmQoIChhcmdzICogY29udmVydChyYXRpbykgKSwgMikgKiAxdndcclxuc2l6ZSgpXHJcbiAgaWYgbGVuZ3RoKGFyZ3VtZW50cykgPiAyXHJcbiAgICBlcnJvcihcIlNpemUgcHJvcGVydHkgc3VwcG9ydCB1cCB0byAyIHZhbHVlcyBhdCBhIHRpbWUuXCIpXHJcbiAgaWYgbGVuZ3RoKGFyZ3VtZW50cykgPT0gMVxyXG4gICAgYXJncyA9IGpvaW4oJywgJyxhcmd1bWVudHMpXHJcbiAgICBpZiBtYXRjaCgndnU/JywgYXJncylcclxuICAgICAgYXJncyA9IHJlcGxhY2UoJ3Z1JywgJycsIGFyZ3MpXHJcbiAgICAgIGFyZ3MgPSB1bnF1b3RlKGFyZ3MpXHJcbiAgICAgIHdpZHRoIGFyZ3MgKyAndncnXHJcbiAgICAgIGhlaWdodCBhcmdzICsgJ3ZoJ1xyXG4gICAgZWxzZVxyXG4gICAgICB3aWR0aCBhcmd1bWVudHNcclxuICAgICAgaGVpZ2h0IGFyZ3VtZW50c1xyXG4gIGVsc2VcclxuICAgIHdpZHRoIGFyZ3VtZW50c1swXVxyXG4gICAgaGVpZ2h0IGFyZ3VtZW50c1sxXVxyXG5zcHJpbmctZnJvbShvcHRpb25zLCBzdHJlbmd0aCwgZWxhc3RpY2l0eSwgcHJvcHMpXHJcbiAgb3B0aW9uc0NoZWNrID0gam9pbignLCAnLCBvcHRpb25zKVxyXG4gIGN1c3RvbU5hbWVBdmFpbGFibGUgPSB0cnVlXHJcbiAgaWYgKFxyXG4gICAgbWF0Y2goJ15cXGR8XmN1YmljfF5lYXNlfF5saW5lYXJ8XmluZmluaXRlfF5ub3JtYWx8XmFsdGVybmF0ZXxeZm9yd2FyZHN8XmJhY2t3YXJkc3xeYm90aHxec3RlcHNcXCh8XmNvbnRpbnVvdXMnLCBvcHRpb25zQ2hlY2spXHJcbiAgKVxyXG4gICAgY3VzdG9tTmFtZUF2YWlsYWJsZSA9IGZhbHNlXHJcbiAgY29udGludW91c0F2YWlsYWJsZSA9IGZhbHNlXHJcbiAgaWYgKCBtYXRjaCgnY29udGludW91cycsIG9wdGlvbnNDaGVjaykgKVxyXG4gICAgY29udGludW91c0F2YWlsYWJsZSA9IHRydWVcclxuICBpZiAoIGN1c3RvbU5hbWVBdmFpbGFibGUgKVxyXG4gICAgbmFtZSA9IG9wdGlvbnNbMF1cclxuICBlbHNlXHJcbiAgICBzZWxlY3RvciA9IHNlbGVjdG9yKClcclxuICAgIHNlbGVjdG9yID0gXFxcclxuICAgICAgcmVwbGFjZSgnOmJlZm9yZXw6YWZ0ZXJ8OmhvdmVyfDphY3RpdmV8OnZpc2l0ZWR8OnRhcmdldCcsICcnLCBzZWxlY3RvcilcclxuICAgIHNlbGVjdG9yID0gcmVwbGFjZSgnLipbXmEtekEtWl0rJywgJycsIHNlbGVjdG9yKVxyXG4gICAgc3RyaW5nID0gcmVwbGFjZSgnXFxXJywgJyAnLCBzZWxlY3RvcilcclxuICAgIG5hbWUgPSB1bnF1b3RlKHNlbGVjdG9yKVxyXG4gIGlmICggY29udGludW91c0F2YWlsYWJsZSApXHJcbiAgICBpZiAoIG1hdGNoKCc6aG92ZXJ8OmFjdGl2ZScsIHNlbGVjdG9yKCkpIClcclxuICAgICAgb3B0aW9ucyA9IGpvaW4oJyAnLCBvcHRpb25zKVxyXG4gICAgICBvcHRpb25zID0gcmVwbGFjZSgnIGNvbnRpbnVvdXN8Y29udGludW91cyAnLCAnJywgb3B0aW9ucylcclxuICAgICAgb3B0aW9ucyA9IHVucXVvdGUob3B0aW9ucylcclxuICAgICAgc2VsZWN0b3IgPSByZXBsYWNlKCc6aG92ZXJ8OmFjdGl2ZScsICcnLCBzZWxlY3RvcigpKVxyXG4gICAgICAvIHtzZWxlY3Rvcn1cclxuICAgICAgICBhbmltYXRpb24gbmFtZSAwbXMgMTAwbXNcclxuICAgIGVsc2VcclxuICAgICAgZXJyb3IoJ2NvbnRpbnVvdXMgaXMgYXZhaWxhYmxlIG9ubHkgZm9yIDpob3ZlciBhbmQgOmFjdGl2ZSBwc2V1ZG8gc2VsZWN0b3JzJylcclxuICBpZiAoIGN1c3RvbU5hbWVBdmFpbGFibGUgKVxyXG4gICAgYW5pbWF0aW9uIG9wdGlvbnNcclxuICBlbHNlXHJcbiAgICBhbmltYXRpb24gbmFtZSBvcHRpb25zXHJcbiAgY29lZmZpY2llbnQgPSAoIChzdHJlbmd0aCAqIGVsYXN0aWNpdHkpICsgKCAoc3RyZW5ndGggKyBlbGFzdGljaXR5KSAvIDIgKSAtICggKHN0cmVuZ3RoICsgZWxhc3RpY2l0eSkgLyA0ICkgLyAyIClcclxuICBjb2VmZmljaWVudCA9ICggY29lZmZpY2llbnQgLyAoLTEwMCkgKVxyXG4gIHN0ZXBzID0gc3RyZW5ndGhcclxuICBAa2V5ZnJhbWVzIHtuYW1lfVxyXG4gICAgZm9yIHN0ZXAsIG4gaW4gMC4uLnN0ZXBzXHJcbiAgICAgIHBlcmNlbnRhZ2UgPSAxMDAgLyBzdGVwcyAqIHN0ZXBcclxuICAgICAgcGVyY2VudGFnZSA9IHJvdW5kKCBwZXJjZW50YWdlLCAyIClcclxuICAgICAgcGVyY2VudGFnZSA9IHBlcmNlbnRhZ2UgKiAxJVxyXG4gICAgICBrZXlmcmFtZUNoZWNrID0gam9pbignLCAnLCBwcm9wcylcclxuICAgICAgdHJhbnNmb3JtQXZhaWxhYmxlID0gZmFsc2VcclxuICAgICAgaWYgKCBtYXRjaCgndHJhbnNsYXRlfFxcYnJvdGF0ZXxcXGJzY2FsZXxza2V3Jywga2V5ZnJhbWVDaGVjaykgKVxyXG4gICAgICAgIHRyYW5zZm9ybUF2YWlsYWJsZSA9IHRydWVcclxuICAgICAgZmlsdGVyQXZhaWxhYmxlID0gZmFsc2VcclxuICAgICAgaWYgKCBtYXRjaCgnYmx1cnxicmlnaHRuZXNzfGNvbnRyYXN0fGRyb3Atc2hhZG93fGdyYXlzY2FsZXxodWUtcm90YXRlfGludmVydHxzYXR1cmF0ZXxzZXBpYScsIGtleWZyYW1lQ2hlY2spIClcclxuICAgICAgICBmaWx0ZXJBdmFpbGFibGUgPSB0cnVlXHJcbiAgICAgIHtwZXJjZW50YWdlfVxyXG4gICAgICAgIHRyYW5zZm9ybVByb3BzID0ge31cclxuICAgICAgICBmaWx0ZXJQcm9wcyA9IHt9XHJcbiAgICAgICAgZm9yIHByb3AsIG4gaW4gcHJvcHNcclxuICAgICAgICAgIHByb3BDaGVjayA9IGpvaW4oJywgJywgcHJvcClcclxuICAgICAgICAgIGlzVHJhbnNmb3JtID0gZmFsc2VcclxuICAgICAgICAgIGlmICggbWF0Y2goJ150cmFuc2xhdGV8XnJvdGF0ZXxec2NhbGV8XnNrZXcgJywgcHJvcENoZWNrKSApXHJcbiAgICAgICAgICAgIGlzVHJhbnNmb3JtID0gdHJ1ZVxyXG4gICAgICAgICAgaXNGaWx0ZXIgPSBmYWxzZVxyXG4gICAgICAgICAgaWYgKCBtYXRjaCgnYmx1cnxicmlnaHRuZXNzfGNvbnRyYXN0fGRyb3Atc2hhZG93fGdyYXlzY2FsZXxodWUtcm90YXRlfGludmVydHxzYXR1cmF0ZXxzZXBpYScsIHByb3BDaGVjaykgKVxyXG4gICAgICAgICAgICBpc0ZpbHRlciA9IHRydWVcclxuICAgICAgICAgIGlmICggaXNUcmFuc2Zvcm0gKVxyXG4gICAgICAgICAgICBzcGxpdCA9IHNwbGl0KCcoJywgJycgKyBwcm9wKVxyXG4gICAgICAgICAgICB0cmFuc2Zvcm1WYWx1ZSA9IHNwbGl0KCcpJywgJycgKyBzcGxpdFsxXSlcclxuICAgICAgICAgICAgdHJhbnNmb3JtVmFsdWUgPSBjb252ZXJ0KHRyYW5zZm9ybVZhbHVlKVxyXG4gICAgICAgICAgICBvcmlnaW5hbFZhbHVlID0gQHRyYW5zZm9ybVxyXG4gICAgICAgICAgICBvcmlnaW5hbFZhbHVlID0gc3BsaXQoc3BsaXRbMF0sICcnICsgb3JpZ2luYWxWYWx1ZSlcclxuICAgICAgICAgICAgb3JpZ2luYWxWYWx1ZSA9IHNwbGl0KCcoJywgJycgKyBvcmlnaW5hbFZhbHVlWzFdKVxyXG4gICAgICAgICAgICBvcmlnaW5hbFZhbHVlID0gc3BsaXQoJyknLCAnJyArIG9yaWdpbmFsVmFsdWVbMV0pXHJcbiAgICAgICAgICAgIG9yaWdpbmFsVmFsdWUgPSBjb252ZXJ0KG9yaWdpbmFsVmFsdWUpXHJcbiAgICAgICAgICAgIGlmICggb3JpZ2luYWxWYWx1ZSA9PSBudWxsIClcclxuICAgICAgICAgICAgICBpZiAoIHNwbGl0WzBdID09ICdzY2FsZScgKVxyXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxWYWx1ZSA9IDFcclxuICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICBvcmlnaW5hbFZhbHVlID0gMFxyXG4gICAgICAgICAgICBpZiAodHJhbnNmb3JtVmFsdWUgPT0gMCAmJiBzcGxpdFswXSA9PSAnc2NhbGUnICYmIHBlcmNlbnRhZ2UgIT0gJzAlJylcclxuICAgICAgICAgICAgICB0cmFuc2Zvcm1WYWx1ZSA9IDAuMDFcclxuICAgICAgICAgICAgbmV3VmFsdWUgPSBvcmlnaW5hbFZhbHVlIC0gKCh0cmFuc2Zvcm1WYWx1ZSAtIG9yaWdpbmFsVmFsdWUpICogKGNvZWZmaWNpZW50ICoqIHN0ZXApICogKC0xKSlcclxuICAgICAgICAgICAgaWYgKHNwbGl0WzBdID09ICdzY2FsZScpXHJcbiAgICAgICAgICAgICAgaWYgKCB0cmFuc2Zvcm1WYWx1ZSA8PSAxIClcclxuICAgICAgICAgICAgICAgIG5ld1ZhbHVlID0gb3JpZ2luYWxWYWx1ZSArICgodHJhbnNmb3JtVmFsdWUgLSBvcmlnaW5hbFZhbHVlKSAqIChjb2VmZmljaWVudCAqKiBzdGVwKSlcclxuICAgICAgICAgICAgbmV3VmFsdWUgPSByb3VuZCggbmV3VmFsdWUsIDIpXHJcbiAgICAgICAgICAgIG5ld1Byb3AgPSBqb2luKCcnLCBzcGxpdFswXSwgJygnLCBuZXdWYWx1ZSwgJyknKVxyXG4gICAgICAgICAgICB0cmFuc2Zvcm1Qcm9wc1tuXSA9IHVucXVvdGUobmV3UHJvcClcclxuICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgdHJhbnNmb3JtUHJvcHNbbl0gPSB1bnF1b3RlKCcnKVxyXG4gICAgICAgICAgICBpZiAoIHBlcmNlbnRhZ2UgPT0gJzAlJyApXHJcbiAgICAgICAgICAgICAgaWYgKCBpc0ZpbHRlciApXHJcbiAgICAgICAgICAgICAgICBmaWx0ZXJQcm9wc1tuXSA9IHByb3BcclxuICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICBmaWx0ZXJQcm9wc1tuXSA9IHVucXVvdGUoJycpXHJcbiAgICAgICAgICAgICAgICByZWd1bGFyUHJvcCA9IHNwbGl0KCcoJywgJycgKyBwcm9wKVxyXG4gICAgICAgICAgICAgICAgcmVndWxhclZhbHVlID0gc3BsaXQoJyknLCAnJyArIHJlZ3VsYXJQcm9wWzFdKVxyXG4gICAgICAgICAgICAgICAgcHJpbnRQcm9wID0gdW5xdW90ZShyZWd1bGFyUHJvcFswXSlcclxuICAgICAgICAgICAgICAgIHByaW50VmFsdWUgPSB1bnF1b3RlKHJlZ3VsYXJWYWx1ZVswXSlcclxuICAgICAgICAgICAgICAgIHtwcmludFByb3B9IHByaW50VmFsdWVcclxuICAgICAgICAgICAgaGFsZiA9IGNlaWwoc3RlcHMvMilcclxuICAgICAgICAgICAgaWYgKCBzdGVwID09IGhhbGYgKVxyXG4gICAgICAgICAgICAgIGlmICggaXNGaWx0ZXIgKVxyXG4gICAgICAgICAgICAgICAgZmlsdGVyUHJvcHMgPSB1bnF1b3RlKCdpbmhlcml0JylcclxuICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICByZWd1bGFyUHJvcCA9IHNwbGl0KCcoJywgJycgKyBwcm9wKVxyXG4gICAgICAgICAgICAgICAgcHJpbnRQcm9wID0gdW5xdW90ZShyZWd1bGFyUHJvcFswXSlcclxuICAgICAgICAgICAgICAgIHtwcmludFByb3B9IGluaGVyaXRcclxuICAgICAgICBpZiAoIHRyYW5zZm9ybUF2YWlsYWJsZSApXHJcbiAgICAgICAgICB0cmFuc2Zvcm0gdHJhbnNmb3JtUHJvcHNcclxuICAgICAgICBpZiAoIGZpbHRlckF2YWlsYWJsZSAmJiBsZW5ndGgoZmlsdGVyUHJvcHMpID4gMCApXHJcbiAgICAgICAgICBmaWx0ZXIgZmlsdGVyUHJvcHNcclxuc3ByaW5nLWluLXBsYWNlKG9wdGlvbnMsIHN0cmVuZ3RoLCBlbGFzdGljaXR5LCBwcm9wcylcclxuICBvcHRpb25zQ2hlY2sgPSBqb2luKCcsICcsIG9wdGlvbnMpXHJcbiAgY3VzdG9tTmFtZUF2YWlsYWJsZSA9IHRydWVcclxuICBpZiAoXHJcbiAgICBtYXRjaCgnXlxcZHxeY3ViaWN8XmVhc2V8XmxpbmVhcnxeaW5maW5pdGV8Xm5vcm1hbHxeYWx0ZXJuYXRlfF5mb3J3YXJkc3xeYmFja3dhcmRzfF5ib3RofF5zdGVwc1xcKHxeY29udGludW91cycsIG9wdGlvbnNDaGVjaylcclxuICApXHJcbiAgICBjdXN0b21OYW1lQXZhaWxhYmxlID0gZmFsc2VcclxuICBjb250aW51b3VzQXZhaWxhYmxlID0gZmFsc2VcclxuICBpZiAoIG1hdGNoKCdjb250aW51b3VzJywgb3B0aW9uc0NoZWNrKSApXHJcbiAgICBjb250aW51b3VzQXZhaWxhYmxlID0gdHJ1ZVxyXG4gIGlmICggY3VzdG9tTmFtZUF2YWlsYWJsZSApXHJcbiAgICBuYW1lID0gb3B0aW9uc1swXVxyXG4gIGVsc2VcclxuICAgIHNlbGVjdG9yID0gc2VsZWN0b3IoKVxyXG4gICAgc2VsZWN0b3IgPSBcXFxyXG4gICAgICByZXBsYWNlKCc6YmVmb3JlfDphZnRlcnw6aG92ZXJ8OmFjdGl2ZXw6dmlzaXRlZHw6dGFyZ2V0JywgJycsIHNlbGVjdG9yKVxyXG4gICAgc2VsZWN0b3IgPSByZXBsYWNlKCcuKlteYS16QS1aXSsnLCAnJywgc2VsZWN0b3IpXHJcbiAgICBzdHJpbmcgPSByZXBsYWNlKCdcXFcnLCAnICcsIHNlbGVjdG9yKVxyXG4gICAgbmFtZSA9IHVucXVvdGUoc2VsZWN0b3IpXHJcbiAgaWYgKCBjb250aW51b3VzQXZhaWxhYmxlIClcclxuICAgIGlmICggbWF0Y2goJzpob3Zlcnw6YWN0aXZlJywgc2VsZWN0b3IoKSkgKVxyXG4gICAgICBvcHRpb25zID0gam9pbignICcsIG9wdGlvbnMpXHJcbiAgICAgIG9wdGlvbnMgPSByZXBsYWNlKCcgY29udGludW91c3xjb250aW51b3VzICcsICcnLCBvcHRpb25zKVxyXG4gICAgICBvcHRpb25zID0gdW5xdW90ZShvcHRpb25zKVxyXG4gICAgICBzZWxlY3RvciA9IHJlcGxhY2UoJzpob3Zlcnw6YWN0aXZlJywgJycsIHNlbGVjdG9yKCkpXHJcbiAgICAgIC8ge3NlbGVjdG9yfVxyXG4gICAgICAgIGFuaW1hdGlvbiBuYW1lIDBtcyAxMDBtc1xyXG4gICAgZWxzZVxyXG4gICAgICBlcnJvcignY29udGludW91cyBpcyBhdmFpbGFibGUgb25seSBmb3IgOmhvdmVyIGFuZCA6YWN0aXZlIHBzZXVkbyBzZWxlY3RvcnMnKVxyXG4gIGlmICggY3VzdG9tTmFtZUF2YWlsYWJsZSApXHJcbiAgICBhbmltYXRpb24gb3B0aW9uc1xyXG4gIGVsc2VcclxuICAgIGFuaW1hdGlvbiBuYW1lIG9wdGlvbnNcclxuICBjb2VmZmljaWVudCA9ICggKHN0cmVuZ3RoICogZWxhc3RpY2l0eSkgKyAoIChzdHJlbmd0aCArIGVsYXN0aWNpdHkpIC8gMiApIC0gKCAoc3RyZW5ndGggKyBlbGFzdGljaXR5KSAvIDQgKSAvIDIgKVxyXG4gIGNvZWZmaWNpZW50ID0gKCBjb2VmZmljaWVudCAvICgtMTAwKSApXHJcbiAgc3RlcHMgPSBzdHJlbmd0aFxyXG4gIEBrZXlmcmFtZXMge25hbWV9XHJcbiAgICBmb3Igc3RlcCwgbiBpbiAxLi4oc3RlcHMgLSAxKVxyXG4gICAgICBwZXJjZW50YWdlID0gMTAwIC8gc3RlcHMgKiBzdGVwXHJcbiAgICAgIHBlcmNlbnRhZ2UgPSByb3VuZCggcGVyY2VudGFnZSwgMiApXHJcbiAgICAgIHBlcmNlbnRhZ2UgPSBwZXJjZW50YWdlICogMSVcclxuICAgICAga2V5ZnJhbWVDaGVjayA9IGpvaW4oJywgJywgcHJvcHMpXHJcbiAgICAgIHRyYW5zZm9ybUF2YWlsYWJsZSA9IGZhbHNlXHJcbiAgICAgIGlmICggbWF0Y2goJ3RyYW5zbGF0ZXxcXGJyb3RhdGV8XFxic2NhbGV8c2tldycsIGtleWZyYW1lQ2hlY2spIClcclxuICAgICAgICB0cmFuc2Zvcm1BdmFpbGFibGUgPSB0cnVlXHJcbiAgICAgIGZpbHRlckF2YWlsYWJsZSA9IGZhbHNlXHJcbiAgICAgIGlmICggbWF0Y2goJ2JsdXJ8YnJpZ2h0bmVzc3xjb250cmFzdHxkcm9wLXNoYWRvd3xncmF5c2NhbGV8aHVlLXJvdGF0ZXxpbnZlcnR8c2F0dXJhdGV8c2VwaWEnLCBrZXlmcmFtZUNoZWNrKSApXHJcbiAgICAgICAgZmlsdGVyQXZhaWxhYmxlID0gdHJ1ZVxyXG4gICAgICB7cGVyY2VudGFnZX1cclxuICAgICAgICB0cmFuc2Zvcm1Qcm9wcyA9IHt9XHJcbiAgICAgICAgZmlsdGVyUHJvcHMgPSB7fVxyXG4gICAgICAgIGZvciBwcm9wLCBuIGluIHByb3BzXHJcbiAgICAgICAgICBwcm9wQ2hlY2sgPSBqb2luKCcsICcsIHByb3ApXHJcbiAgICAgICAgICBpc1RyYW5zZm9ybSA9IGZhbHNlXHJcbiAgICAgICAgICBpZiAoIG1hdGNoKCdedHJhbnNsYXRlfF5yb3RhdGV8XnNjYWxlfF5za2V3ICcsIHByb3BDaGVjaykgKVxyXG4gICAgICAgICAgICBpc1RyYW5zZm9ybSA9IHRydWVcclxuICAgICAgICAgIGlzRmlsdGVyID0gZmFsc2VcclxuICAgICAgICAgIGlmICggbWF0Y2goJ2JsdXJ8YnJpZ2h0bmVzc3xjb250cmFzdHxkcm9wLXNoYWRvd3xncmF5c2NhbGV8aHVlLXJvdGF0ZXxpbnZlcnR8c2F0dXJhdGV8c2VwaWEnLCBwcm9wQ2hlY2spIClcclxuICAgICAgICAgICAgaXNGaWx0ZXIgPSB0cnVlXHJcbiAgICAgICAgICBpZiAoIGlzVHJhbnNmb3JtIClcclxuICAgICAgICAgICAgc3BsaXQgPSBzcGxpdCgnKCcsICcnICsgcHJvcClcclxuICAgICAgICAgICAgdHJhbnNmb3JtVmFsdWUgPSBzcGxpdCgnKScsICcnICsgc3BsaXRbMV0pXHJcbiAgICAgICAgICAgIHRyYW5zZm9ybVZhbHVlID0gY29udmVydCh0cmFuc2Zvcm1WYWx1ZSlcclxuICAgICAgICAgICAgb3JpZ2luYWxWYWx1ZSA9IEB0cmFuc2Zvcm1cclxuICAgICAgICAgICAgb3JpZ2luYWxWYWx1ZSA9IHNwbGl0KHNwbGl0WzBdLCAnJyArIG9yaWdpbmFsVmFsdWUpXHJcbiAgICAgICAgICAgIG9yaWdpbmFsVmFsdWUgPSBzcGxpdCgnKCcsICcnICsgb3JpZ2luYWxWYWx1ZVsxXSlcclxuICAgICAgICAgICAgb3JpZ2luYWxWYWx1ZSA9IHNwbGl0KCcpJywgJycgKyBvcmlnaW5hbFZhbHVlWzFdKVxyXG4gICAgICAgICAgICBvcmlnaW5hbFZhbHVlID0gY29udmVydChvcmlnaW5hbFZhbHVlKVxyXG4gICAgICAgICAgICBpZiAoIG9yaWdpbmFsVmFsdWUgPT0gbnVsbCApXHJcbiAgICAgICAgICAgICAgaWYgKCBzcGxpdFswXSA9PSAnc2NhbGUnIClcclxuICAgICAgICAgICAgICAgIG9yaWdpbmFsVmFsdWUgPSAxXHJcbiAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxWYWx1ZSA9IDBcclxuICAgICAgICAgICAgaWYgKHRyYW5zZm9ybVZhbHVlID09IDAgJiYgc3BsaXRbMF0gPT0gJ3NjYWxlJyAmJiBwZXJjZW50YWdlICE9ICcwJScpXHJcbiAgICAgICAgICAgICAgdHJhbnNmb3JtVmFsdWUgPSAwLjAxXHJcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gb3JpZ2luYWxWYWx1ZSAtICgob3JpZ2luYWxWYWx1ZSAtIHRyYW5zZm9ybVZhbHVlKSAqIChjb2VmZmljaWVudCAqKiBzdGVwKSAqICgtMSkpICogMlxyXG4gICAgICAgICAgICBpZiAoc3BsaXRbMF0gPT0gJ3NjYWxlJylcclxuICAgICAgICAgICAgICBpZiAoIHRyYW5zZm9ybVZhbHVlIDw9IDEgKVxyXG4gICAgICAgICAgICAgICAgbmV3VmFsdWUgPSBvcmlnaW5hbFZhbHVlICsgKChvcmlnaW5hbFZhbHVlIC0gdHJhbnNmb3JtVmFsdWUpICogKGNvZWZmaWNpZW50ICoqIHN0ZXApKSAqIDJcclxuICAgICAgICAgICAgbmV3VmFsdWUgPSByb3VuZCggbmV3VmFsdWUsIDIpXHJcbiAgICAgICAgICAgIG5ld1Byb3AgPSBqb2luKCcnLCBzcGxpdFswXSwgJygnLCBuZXdWYWx1ZSwgJyknKVxyXG4gICAgICAgICAgICB0cmFuc2Zvcm1Qcm9wc1tuXSA9IHVucXVvdGUobmV3UHJvcClcclxuICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgdHJhbnNmb3JtUHJvcHNbbl0gPSB1bnF1b3RlKCcnKVxyXG4gICAgICAgICAgICBoYWxmID0gZmxvb3Ioc3RlcHMvMilcclxuICAgICAgICAgICAgaWYgKCBzdGVwID09IGhhbGYgKVxyXG4gICAgICAgICAgICAgIGlmICggaXNGaWx0ZXIgKVxyXG4gICAgICAgICAgICAgICAgZmlsdGVyUHJvcHNbbl0gPSBwcm9wXHJcbiAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgZmlsdGVyUHJvcHNbbl0gPSB1bnF1b3RlKCcnKVxyXG4gICAgICAgICAgICAgICAgcmVndWxhclByb3AgPSBzcGxpdCgnKCcsICcnICsgcHJvcClcclxuICAgICAgICAgICAgICAgIHJlZ3VsYXJWYWx1ZSA9IHNwbGl0KCcpJywgJycgKyByZWd1bGFyUHJvcFsxXSlcclxuICAgICAgICAgICAgICAgIHByaW50UHJvcCA9IHVucXVvdGUocmVndWxhclByb3BbMF0pXHJcbiAgICAgICAgICAgICAgICBwcmludFZhbHVlID0gdW5xdW90ZShyZWd1bGFyVmFsdWVbMF0pXHJcbiAgICAgICAgICAgICAgICB7cHJpbnRQcm9wfSBwcmludFZhbHVlXHJcbiAgICAgICAgaWYgKCB0cmFuc2Zvcm1BdmFpbGFibGUgKVxyXG4gICAgICAgICAgdHJhbnNmb3JtIHRyYW5zZm9ybVByb3BzXHJcbiAgICAgICAgaWYgKCBmaWx0ZXJBdmFpbGFibGUgJiYgbGVuZ3RoKGZpbHRlclByb3BzKSA+IDAgKVxyXG4gICAgICAgICAgZmlsdGVyIGZpbHRlclByb3BzXHJcbnNwcmluZy10byhvcHRpb25zLCBzdHJlbmd0aCwgZWxhc3RpY2l0eSwgcHJvcHMpXHJcbiAgb3B0aW9uc0NoZWNrID0gam9pbignLCAnLCBvcHRpb25zKVxyXG4gIGN1c3RvbU5hbWVBdmFpbGFibGUgPSB0cnVlXHJcbiAgaWYgKFxyXG4gICAgbWF0Y2goJ15cXGR8XmN1YmljfF5lYXNlfF5saW5lYXJ8XmluZmluaXRlfF5ub3JtYWx8XmFsdGVybmF0ZXxeZm9yd2FyZHN8XmJhY2t3YXJkc3xeYm90aHxec3RlcHNcXCh8XmNvbnRpbnVvdXMnLCBvcHRpb25zQ2hlY2spXHJcbiAgKVxyXG4gICAgY3VzdG9tTmFtZUF2YWlsYWJsZSA9IGZhbHNlXHJcbiAgY29udGludW91c0F2YWlsYWJsZSA9IGZhbHNlXHJcbiAgaWYgKCBtYXRjaCgnY29udGludW91cycsIG9wdGlvbnNDaGVjaykgKVxyXG4gICAgY29udGludW91c0F2YWlsYWJsZSA9IHRydWVcclxuICBpZiAoIGN1c3RvbU5hbWVBdmFpbGFibGUgKVxyXG4gICAgbmFtZSA9IG9wdGlvbnNbMF1cclxuICBlbHNlXHJcbiAgICBzZWxlY3RvciA9IHNlbGVjdG9yKClcclxuICAgIHNlbGVjdG9yID0gXFxcclxuICAgICAgcmVwbGFjZSgnOmJlZm9yZXw6YWZ0ZXJ8OmhvdmVyfDphY3RpdmV8OnZpc2l0ZWR8OnRhcmdldCcsICcnLCBzZWxlY3RvcilcclxuICAgIHNlbGVjdG9yID0gcmVwbGFjZSgnLipbXmEtekEtWl0rJywgJycsIHNlbGVjdG9yKVxyXG4gICAgc3RyaW5nID0gcmVwbGFjZSgnXFxXJywgJyAnLCBzZWxlY3RvcilcclxuICAgIG5hbWUgPSB1bnF1b3RlKHNlbGVjdG9yKVxyXG4gIHVubGVzcyAoIG1hdGNoKCdmb3J3YXJkc3xiYWNrd2FyZHN8Ym90aCcsIG9wdGlvbnNDaGVjaykgKVxyXG4gICAgb3B0aW9ucyA9IGpvaW4oJyAnLCBvcHRpb25zLCAnZm9yd2FyZHMnKVxyXG4gICAgb3B0aW9ucyA9IHVucXVvdGUob3B0aW9ucylcclxuICBpZiAoIGNvbnRpbnVvdXNBdmFpbGFibGUgKVxyXG4gICAgaWYgKCBtYXRjaCgnOmhvdmVyfDphY3RpdmUnLCBzZWxlY3RvcigpKSApXHJcbiAgICAgIG9wdGlvbnMgPSBqb2luKCcgJywgb3B0aW9ucylcclxuICAgICAgb3B0aW9ucyA9IHJlcGxhY2UoJyBjb250aW51b3VzfGNvbnRpbnVvdXMgJywgJycsIG9wdGlvbnMpXHJcbiAgICAgIG9wdGlvbnMgPSB1bnF1b3RlKG9wdGlvbnMpXHJcbiAgICAgIHNlbGVjdG9yID0gcmVwbGFjZSgnOmhvdmVyfDphY3RpdmUnLCAnJywgc2VsZWN0b3IoKSlcclxuICAgICAgLyB7c2VsZWN0b3J9XHJcbiAgICAgICAgYW5pbWF0aW9uIG5hbWUgMG1zIDEwMG1zXHJcbiAgICBlbHNlXHJcbiAgICAgIGVycm9yKCdjb250aW51b3VzIGlzIGF2YWlsYWJsZSBvbmx5IGZvciA6aG92ZXIgYW5kIDphY3RpdmUgcHNldWRvIHNlbGVjdG9ycycpXHJcbiAgaWYgKCBjdXN0b21OYW1lQXZhaWxhYmxlIClcclxuICAgIGFuaW1hdGlvbiBvcHRpb25zXHJcbiAgZWxzZVxyXG4gICAgYW5pbWF0aW9uIG5hbWUgb3B0aW9uc1xyXG4gIGNvZWZmaWNpZW50ID0gKCAoc3RyZW5ndGggKiBlbGFzdGljaXR5KSArICggKHN0cmVuZ3RoICsgZWxhc3RpY2l0eSkgLyAyICkgLSAoIChzdHJlbmd0aCArIGVsYXN0aWNpdHkpIC8gNCApIC8gMiApXHJcbiAgY29lZmZpY2llbnQgPSAoIGNvZWZmaWNpZW50IC8gKC0xMDApIClcclxuICBzdGVwcyA9IHN0cmVuZ3RoXHJcbiAgQGtleWZyYW1lcyB7bmFtZX1cclxuICAgIGZvciBzdGVwLCBuIGluIDEuLnN0ZXBzXHJcbiAgICAgIHBlcmNlbnRhZ2UgPSAxMDAgLyBzdGVwcyAqIHN0ZXBcclxuICAgICAgcGVyY2VudGFnZSA9IHJvdW5kKCBwZXJjZW50YWdlLCAyIClcclxuICAgICAgcGVyY2VudGFnZSA9IHBlcmNlbnRhZ2UgKiAxJVxyXG4gICAgICBrZXlmcmFtZUNoZWNrID0gam9pbignLCAnLCBwcm9wcylcclxuICAgICAgdHJhbnNmb3JtQXZhaWxhYmxlID0gZmFsc2VcclxuICAgICAgaWYgKCBtYXRjaCgndHJhbnNsYXRlfFxcYnJvdGF0ZXxcXGJzY2FsZXxza2V3Jywga2V5ZnJhbWVDaGVjaykgKVxyXG4gICAgICAgIHRyYW5zZm9ybUF2YWlsYWJsZSA9IHRydWVcclxuICAgICAgZmlsdGVyQXZhaWxhYmxlID0gZmFsc2VcclxuICAgICAgaWYgKCBtYXRjaCgnYmx1cnxicmlnaHRuZXNzfGNvbnRyYXN0fGRyb3Atc2hhZG93fGdyYXlzY2FsZXxodWUtcm90YXRlfGludmVydHxzYXR1cmF0ZXxzZXBpYScsIGtleWZyYW1lQ2hlY2spIClcclxuICAgICAgICBmaWx0ZXJBdmFpbGFibGUgPSB0cnVlXHJcbiAgICAgIHtwZXJjZW50YWdlfVxyXG4gICAgICAgIHRyYW5zZm9ybVByb3BzID0ge31cclxuICAgICAgICBmaWx0ZXJQcm9wcyA9IHt9XHJcbiAgICAgICAgZm9yIHByb3AsIG4gaW4gcHJvcHNcclxuICAgICAgICAgIHByb3BDaGVjayA9IGpvaW4oJywgJywgcHJvcClcclxuICAgICAgICAgIGlzVHJhbnNmb3JtID0gZmFsc2VcclxuICAgICAgICAgIGlmICggbWF0Y2goJ150cmFuc2xhdGV8XnJvdGF0ZXxec2NhbGV8XnNrZXcgJywgcHJvcENoZWNrKSApXHJcbiAgICAgICAgICAgIGlzVHJhbnNmb3JtID0gdHJ1ZVxyXG4gICAgICAgICAgaXNGaWx0ZXIgPSBmYWxzZVxyXG4gICAgICAgICAgaWYgKCBtYXRjaCgnYmx1cnxicmlnaHRuZXNzfGNvbnRyYXN0fGRyb3Atc2hhZG93fGdyYXlzY2FsZXxodWUtcm90YXRlfGludmVydHxzYXR1cmF0ZXxzZXBpYScsIHByb3BDaGVjaykgKVxyXG4gICAgICAgICAgICBpc0ZpbHRlciA9IHRydWVcclxuICAgICAgICAgIGlmICggaXNUcmFuc2Zvcm0gKVxyXG4gICAgICAgICAgICBzcGxpdCA9IHNwbGl0KCcoJywgJycgKyBwcm9wKVxyXG4gICAgICAgICAgICB0cmFuc2Zvcm1WYWx1ZSA9IHNwbGl0KCcpJywgJycgKyBzcGxpdFsxXSlcclxuICAgICAgICAgICAgdHJhbnNmb3JtVmFsdWUgPSBjb252ZXJ0KHRyYW5zZm9ybVZhbHVlKVxyXG4gICAgICAgICAgICBvcmlnaW5hbFZhbHVlID0gQHRyYW5zZm9ybVxyXG4gICAgICAgICAgICBvcmlnaW5hbFZhbHVlID0gc3BsaXQoc3BsaXRbMF0sICcnICsgb3JpZ2luYWxWYWx1ZSlcclxuICAgICAgICAgICAgb3JpZ2luYWxWYWx1ZSA9IHNwbGl0KCcoJywgJycgKyBvcmlnaW5hbFZhbHVlWzFdKVxyXG4gICAgICAgICAgICBvcmlnaW5hbFZhbHVlID0gc3BsaXQoJyknLCAnJyArIG9yaWdpbmFsVmFsdWVbMV0pXHJcbiAgICAgICAgICAgIG9yaWdpbmFsVmFsdWUgPSBjb252ZXJ0KG9yaWdpbmFsVmFsdWUpXHJcbiAgICAgICAgICAgIGlmICggb3JpZ2luYWxWYWx1ZSA9PSBudWxsIClcclxuICAgICAgICAgICAgICBpZiAoIHNwbGl0WzBdID09ICdzY2FsZScgKVxyXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxWYWx1ZSA9IDFcclxuICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICBvcmlnaW5hbFZhbHVlID0gMFxyXG4gICAgICAgICAgICBpZiAodHJhbnNmb3JtVmFsdWUgPT0gMCAmJiBzcGxpdFswXSA9PSAnc2NhbGUnICYmIHBlcmNlbnRhZ2UgIT0gJzEwMCUnKVxyXG4gICAgICAgICAgICAgIHRyYW5zZm9ybVZhbHVlID0gMC4wMVxyXG4gICAgICAgICAgICBuZXdWYWx1ZSA9IHRyYW5zZm9ybVZhbHVlIC0gKChvcmlnaW5hbFZhbHVlIC0gdHJhbnNmb3JtVmFsdWUpICogKGNvZWZmaWNpZW50ICoqIHN0ZXApICogKC0xKSlcclxuICAgICAgICAgICAgaWYgKHNwbGl0WzBdID09ICdzY2FsZScpXHJcbiAgICAgICAgICAgICAgaWYgKCB0cmFuc2Zvcm1WYWx1ZSA8PSAxIClcclxuICAgICAgICAgICAgICAgIG5ld1ZhbHVlID0gdHJhbnNmb3JtVmFsdWUgKyAoKG9yaWdpbmFsVmFsdWUgLSB0cmFuc2Zvcm1WYWx1ZSkgKiAoY29lZmZpY2llbnQgKiogc3RlcCkpXHJcbiAgICAgICAgICAgIGlmICggcGVyY2VudGFnZSA9PSAnMTAwJScgKVxyXG4gICAgICAgICAgICAgIG5ld1ZhbHVlID0gdHJhbnNmb3JtVmFsdWVcclxuICAgICAgICAgICAgbmV3VmFsdWUgPSByb3VuZCggbmV3VmFsdWUsIDIpXHJcbiAgICAgICAgICAgIG5ld1Byb3AgPSBqb2luKCcnLCBzcGxpdFswXSwgJygnLCBuZXdWYWx1ZSwgJyknKVxyXG4gICAgICAgICAgICB0cmFuc2Zvcm1Qcm9wc1tuXSA9IHVucXVvdGUobmV3UHJvcClcclxuICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgdHJhbnNmb3JtUHJvcHNbbl0gPSB1bnF1b3RlKCcnKVxyXG4gICAgICAgICAgICBoYWxmID0gZmxvb3Ioc3RlcHMvMilcclxuICAgICAgICAgICAgaWYgKCBzdGVwID49IGhhbGYgKVxyXG4gICAgICAgICAgICAgIGlmICggaXNGaWx0ZXIgKVxyXG4gICAgICAgICAgICAgICAgZmlsdGVyUHJvcHNbbl0gPSBwcm9wXHJcbiAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgZmlsdGVyUHJvcHNbbl0gPSB1bnF1b3RlKCcnKVxyXG4gICAgICAgICAgICAgICAgcmVndWxhclByb3AgPSBzcGxpdCgnKCcsICcnICsgcHJvcClcclxuICAgICAgICAgICAgICAgIHJlZ3VsYXJWYWx1ZSA9IHNwbGl0KCcpJywgJycgKyByZWd1bGFyUHJvcFsxXSlcclxuICAgICAgICAgICAgICAgIHByaW50UHJvcCA9IHVucXVvdGUocmVndWxhclByb3BbMF0pXHJcbiAgICAgICAgICAgICAgICBwcmludFZhbHVlID0gdW5xdW90ZShyZWd1bGFyVmFsdWVbMF0pXHJcbiAgICAgICAgICAgICAgICB7cHJpbnRQcm9wfSBwcmludFZhbHVlXHJcbiAgICAgICAgaWYgKCB0cmFuc2Zvcm1BdmFpbGFibGUgKVxyXG4gICAgICAgICAgdHJhbnNmb3JtIHRyYW5zZm9ybVByb3BzXHJcbiAgICAgICAgaWYgKCBmaWx0ZXJBdmFpbGFibGUgJiYgbGVuZ3RoKGZpbHRlclByb3BzKSA+IDAgKVxyXG4gICAgICAgICAgZmlsdGVyIGZpbHRlclByb3BzXHJcbnN0YXRlcyhvcHRpb25zLCBwcm9wcy4uLilcclxuICBpZiBsZW5ndGgob3B0aW9ucykgPiAxXHJcbiAgICB0eXBlID0gb3B0aW9uc1swXVxyXG4gICAgcGVyY2VudGFnZSA9IG9wdGlvbnNbMV1cclxuICBlbHNlXHJcbiAgICB0eXBlID0gb3B0aW9uc1xyXG4gICAgcGVyY2VudGFnZSA9IDIwJVxyXG4gICY6aG92ZXJcclxuICAgIGZvciBwcm9wIGluIHByb3BzXHJcbiAgICAgIHByb3BDaGVjayA9IGNyZWF0ZS1zdHJpbmcocHJvcClcclxuICAgICAgaWYgbWF0Y2goJ2JhY2tncm91bmQnLCBwcm9wQ2hlY2spXHJcbiAgICAgICAgaWYgQGJhY2tncm91bmRcclxuICAgICAgICAgIGJhY2tncm91bmQgdHlwZShAYmFja2dyb3VuZCwgcGVyY2VudGFnZSlcclxuICAgICAgICBlbHNlIGlmIEBiYWNrZ3JvdW5kLWNvbG9yXHJcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yIHR5cGUoQGJhY2tncm91bmQtY29sb3IsIHBlcmNlbnRhZ2UpXHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgZXJyb3IoJ25vIGJhY2tncm91bmQvYmFja2dyb3VuZC1jb2xvciBwcm9wIGF2YWlsYWJsZScpXHJcbiAgICAgIGVsc2UgaWYgbWF0Y2goJ2NvbG9yJywgcHJvcENoZWNrKVxyXG4gICAgICAgIGlmIEBjb2xvclxyXG4gICAgICAgICAgY29sb3IgdHlwZShAY29sb3IsIHBlcmNlbnRhZ2UpXHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgZXJyb3IoJ25vIGNvbG9yIHByb3AgYXZhaWxhYmxlJylcclxuICAgICAgZWxzZSBpZiBtYXRjaCgnYm9yZGVyJywgcHJvcENoZWNrKVxyXG4gICAgICAgIGlmIEBib3JkZXJcclxuICAgICAgICAgIGZvciBib3JkZXJQcm9wIGluIEBib3JkZXJcclxuICAgICAgICAgICAgcHJvcFR5cGUgPSB0eXBlb2YoYm9yZGVyUHJvcClcclxuICAgICAgICAgICAgaWYgcHJvcFR5cGUgPT0gJ3JnYmEnIHx8IHByb3BUeXBlID09ICdoc2xhJ1xyXG4gICAgICAgICAgICAgIGJvcmRlci1jb2xvciB0eXBlKGJvcmRlclByb3AsIHBlcmNlbnRhZ2UpXHJcbiAgICAgICAgZWxzZSBpZiBAYm9yZGVyLWNvbG9yXHJcbiAgICAgICAgICBib3JkZXItY29sb3IgdHlwZShib3JkZXJQcm9wLCBwZXJjZW50YWdlKVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgIGVycm9yKCdubyBib3JkZXIvYm9yZGVyLWNvbG9yIHByb3AgYXZhaWxhYmxlJylcclxuICAmOmFjdGl2ZVxyXG4gICAgZm9yIHByb3AgaW4gcHJvcHNcclxuICAgICAgcHJvcENoZWNrID0gY3JlYXRlLXN0cmluZyhwcm9wKVxyXG4gICAgICBpZiBtYXRjaCgnYmFja2dyb3VuZCcsIHByb3BDaGVjaylcclxuICAgICAgICBpZiBAYmFja2dyb3VuZFxyXG4gICAgICAgICAgYmFja2dyb3VuZCB0eXBlKEBiYWNrZ3JvdW5kLCAocGVyY2VudGFnZS8yKSApXHJcbiAgICAgICAgZWxzZSBpZiBAYmFja2dyb3VuZC1jb2xvclxyXG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvciB0eXBlKEBiYWNrZ3JvdW5kLWNvbG9yLCAocGVyY2VudGFnZS8yKSApXHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgZXJyb3IoJ25vIGJhY2tncm91bmQvYmFja2dyb3VuZC1jb2xvciBwcm9wIGF2YWlsYWJsZScpXHJcbiAgICAgIGVsc2UgaWYgbWF0Y2goJ2NvbG9yJywgcHJvcENoZWNrKVxyXG4gICAgICAgIGlmIEBjb2xvclxyXG4gICAgICAgICAgY29sb3IgdHlwZShAY29sb3IsIChwZXJjZW50YWdlLzIpIClcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICBlcnJvcignbm8gY29sb3IgcHJvcCBhdmFpbGFibGUnKVxyXG4gICAgICBlbHNlIGlmIG1hdGNoKCdib3JkZXInLCBwcm9wQ2hlY2spXHJcbiAgICAgICAgaWYgQGJvcmRlclxyXG4gICAgICAgICAgZm9yIGJvcmRlclByb3AgaW4gQGJvcmRlclxyXG4gICAgICAgICAgICBwcm9wVHlwZSA9IHR5cGVvZihib3JkZXJQcm9wKVxyXG4gICAgICAgICAgICBpZiBwcm9wVHlwZSA9PSAncmdiYScgfHwgcHJvcFR5cGUgPT0gJ2hzbGEnXHJcbiAgICAgICAgICAgICAgYm9yZGVyLWNvbG9yIHR5cGUoYm9yZGVyUHJvcCwgKHBlcmNlbnRhZ2UvMikgKVxyXG4gICAgICAgIGVsc2UgaWYgQGJvcmRlci1jb2xvclxyXG4gICAgICAgICAgYm9yZGVyLWNvbG9yIHR5cGUoYm9yZGVyUHJvcCwgKHBlcmNlbnRhZ2UvMikgKVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgIGVycm9yKCdubyBib3JkZXIvYm9yZGVyLWNvbG9yIHByb3AgYXZhaWxhYmxlJylcclxudGV4dC1iYWNrZ3JvdW5kKClcclxuICBAc3VwcG9ydHMgKC13ZWJraXQtYmFja2dyb3VuZC1jbGlwOiB0ZXh0KVxyXG4gICAgYmFja2dyb3VuZCBhcmd1bWVudHNcclxuICAgIC13ZWJraXQtYmFja2dyb3VuZC1jbGlwIHRleHRcclxuICAgIC13ZWJraXQtdGV4dC1maWxsLWNvbG9yIHRyYW5zcGFyZW50XHJcbnVuc3BsYXNoKHNpemUsIG9wdGlvbnMuLi4pXHJcbiAgJG9wdGlvbnNDaGVjayA9IGNyZWF0ZS1zdHJpbmcob3B0aW9ucylcclxuICBpZiAobGVuZ3RoKGFyZ3VtZW50cykgPiAxICYmICFtYXRjaCgnZ3JheXNjYWxlfGJsdXJ8Y2FjaGV8Y292ZXJ8Y29udGFpbnxmaXhlZHxjZW50ZXJ8cmVwZWF0fG5vLXJlcGVhdHxyZXBlYXQteHxyZXBlYXQteXx0b3B8cmlnaHR8Ym90dG9tfGxlZnQnLCAkb3B0aW9uc0NoZWNrKSlcclxuICAgIHNpemUgPSBhcmd1bWVudHNcclxuICAgIG9wdGlvbnMgPSB1bnF1b3RlKCcnKVxyXG4gIGlmIChsZW5ndGgoc2l6ZSkgPiAxKVxyXG4gICAgJHdpZHRoICA9IHNpemVbMF1cclxuICAgICRoZWlnaHQgPSBzaXplWzFdXHJcbiAgZWxzZSBpZiAobGVuZ3RoKHNpemUpID09IDEpXHJcbiAgICAkd2lkdGggID0gc2l6ZVxyXG4gICAgJGhlaWdodCA9IHNpemVcclxuICBlbHNlXHJcbiAgICBlcnJvcihcIlVuc3BsYXNoIGZ1bmN0aW9uIHN1cHBvcnRzIHVwIHRvIDIgdmFsdWVzIGFzIHNpemUuXCIpXHJcbiAgJGdyYXlzY2FsZSA9IHVucXVvdGUoJycpXHJcbiAgJGJsdXIgPSB1bnF1b3RlKCcnKVxyXG4gICRxdWVyeSA9ICc/cmFuZG9tPSdcclxuICBpZiAob3B0aW9ucylcclxuICAgICRvcHRpb25zID0gY3JlYXRlLXN0cmluZyhvcHRpb25zKVxyXG4gICAgJG9wdGlvbnMgPSByZXBsYWNlKCcsJywgJycsICRvcHRpb25zKVxyXG4gICAgaWYgKG1hdGNoKCdncmF5c2NhbGUnLCAkb3B0aW9uc0NoZWNrKSlcclxuICAgICAgJGdyYXlzY2FsZSA9ICdnLydcclxuICAgICAgJG9wdGlvbnMgPSByZXBsYWNlKCdncmF5c2NhbGUnLCAnJywgJG9wdGlvbnMpXHJcbiAgICAgICRvcHRpb25zID0gcmVwbGFjZSgnY29sb3InLCAnJywgJG9wdGlvbnMpXHJcbiAgICBpZiAobWF0Y2goJ2JsdXInLCAkb3B0aW9uc0NoZWNrKSlcclxuICAgICAgJGJsdXIgPSAnJmJsdXInXHJcbiAgICAgICRvcHRpb25zID0gcmVwbGFjZSgnYmx1cicsICcnLCAkb3B0aW9ucylcclxuICAgIGlmIChtYXRjaCgnY292ZXInLCAkb3B0aW9uc0NoZWNrKSlcclxuICAgICAgJGNvdmVyID0gdHJ1ZVxyXG4gICAgICAkb3B0aW9ucyA9IHJlcGxhY2UoJ2NvdmVyJywgJycsICRvcHRpb25zKVxyXG4gICAgaWYgKG1hdGNoKCdjb250YWluJywgJG9wdGlvbnNDaGVjaykpXHJcbiAgICAgICRjb250YWluID0gdHJ1ZVxyXG4gICAgICAkb3B0aW9ucyA9IHJlcGxhY2UoJ2NvbnRhaW4nLCAnJywgJG9wdGlvbnMpXHJcbiAgICBpZiAobWF0Y2goJ2ZpeGVkJywgJG9wdGlvbnNDaGVjaykpXHJcbiAgICAgICRvcHRpb25zID0gcmVwbGFjZSgnZml4ZWQnLCAndW5xdW90ZShmaXhlZCknLCAkb3B0aW9ucylcclxuICAgIGlmICghbWF0Y2goJ2NvdmVyfGNvbnRhaW58Zml4ZWR8Y2VudGVyfHJlcGVhdHxuby1yZXBlYXR8cmVwZWF0LXh8cmVwZWF0LXl8dG9wfHJpZ2h0fGJvdHRvbXxsZWZ0JywgJG9wdGlvbnNDaGVjaykpXHJcbiAgICAgICRjb3ZlciA9IHRydWVcclxuICAgICAgJG9wdGlvbnMgPSAnY2VudGVyJ1xyXG4gIGVsc2VcclxuICAgICRvcHRpb25zID0gJ2NlbnRlcidcclxuICAgICRjb3ZlciA9IHRydWVcclxuICAkb3B0aW9ucyA9IGNyZWF0ZS1zdHJpbmcoJG9wdGlvbnMpXHJcbiAgJG9wdGlvbnMgPSBjcmVhdGUtdmFsKCRvcHRpb25zKVxyXG4gICRpZCA9IHJhbmRvbSgwLDkwMClcclxuICAkdXJsID0gYWRkLXF1b3RlcygnaHR0cHM6Ly91bnNwbGFzaC5pdC8nLCAkZ3JheXNjYWxlLCAkd2lkdGgsICcvJywgJGhlaWdodCwgJHF1ZXJ5LCAkaWQsICRibHVyKVxyXG4gICR1cmwgPSBjcmVhdGUtdmFsKCd1cmwoJywkdXJsLCcpJylcclxuICAkdmFsdWUgPSBjcmVhdGUtYmxvY2soJycsICR1cmwsICRvcHRpb25zKVxyXG4gICR2YWx1ZSA9IGNyZWF0ZS12YWwoJHZhbHVlKVxyXG4gIGJhY2tncm91bmQgJHZhbHVlXHJcbiAgaWYgKCRjb3ZlciA9PSB0cnVlKVxyXG4gICAgYmFja2dyb3VuZC1zaXplIGNvdmVyXHJcbiAgaWYgKCRjb250YWluID09IHRydWUpXHJcbiAgICBiYWNrZ3JvdW5kLXNpemUgY29udGFpblxyXG53ZWJraXQoKVxyXG4gIEBtZWRpYSBzY3JlZW4gYW5kICgtd2Via2l0LW1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86MClcclxuICAgIHtibG9ja31cclxuIiwiLyoqXG4gKiBUZW1wXG4gKiAtLS0tXG4gKiBRdWljayB0ZW1wb3JhcnJ5XG4gKiBmaXhlcyBhbmQgdHJ5b3V0cy5cbiAqL1xuXG4uc2xpZGVzaG93XG5cbiAgaW1nXG4gICAgdGV4dC1hbGlnbiBjZW50ZXJcbiAgICBtYXgtd2lkdGggMTAwcHhcbiAgICBtYXJnaW4gMCBhdXRvIiwiLyoqXG4gKiBCb2R5IFN0eWxlc1xuICogLS0tLS0tLS0tLS1cbiAqIE1haW4gLyBHZW5lcmFsIGJvZHkgc3R5bGVzLlxuICovXG5cbiBib2R5XG4gIGZvbnQtZmFtaWx5ICRlbmdsaXNoXG4gIGZvbnQtc3R5bGUgIG5vcm1hbFxuICBmb250LXdlaWdodCAzMDBcbiAgY29sb3IgJHRleHRcbiAgb3ZlcmZsb3cteCBoaWRkZW5cblxuICBhbnRpYWxpYXMoKSAvLyBhbnRpYWxpYXMgZm9udHNcblxuLyoqXG4gKiBDdXN0b21pemUgc2VsZWN0aW9uIGNvbG9yLlxuICovXG46OnNlbGVjdGlvblxuICBiYWNrZ3JvdW5kIHRyYW5zcGFyZW50KCRwcmltYXJ5LCAwLjEpXG5cbi8qKlxuICogUmVtb3ZlIHRhcCBoaWdobGlnaHQgY29sb3IgKGlPUylcbiAqIGZyb20gYWxsIGVsZW1lbnRzIG9uIHNpdGUuXG4gKi9cbipcbiAgLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yIHRyYW5zcGFyZW50XG5cbi8qKlxuICogUmVtb3ZlIHVzZXItc2VsZWN0IGZyb21cbiAqIGZyb20gY2xpY2thYmxlIGVsZW1lbnRzLlxuICovXG5pbWcsIGEsIC5idXR0b24sIC5saW5rXG4gIHVzZXItc2VsZWN0IG5vbmVcblxuaW1nXG4gIHdpZHRoIDEwMCVcbiAgbWF4LXdpZHRoIDEwMCVcbiIsIkBmb250LWZhY2Uge1xyXG4gICAgZm9udC1mYW1pbHk6IFwicGV0cm9jaGVtaWNvbnNcIjtcclxuICAgIHNyYzogdXJsKCcuLi9hc3NldHMvZm9udHMvY3VzdG9tL3BldHJvY2hlbWljb25zLmVvdCcpO1xyXG4gICAgc3JjOiB1cmwoJy4uL2Fzc2V0cy9mb250cy9jdXN0b20vcGV0cm9jaGVtaWNvbnMuZW90PyNpZWZpeCcpIGZvcm1hdCgnZW90JyksXHJcbiAgICAgICAgIHVybCgnLi4vYXNzZXRzL2ZvbnRzL2N1c3RvbS9wZXRyb2NoZW1pY29ucy53b2ZmJykgZm9ybWF0KCd3b2ZmJyksXHJcbiAgICAgICAgIHVybCgnLi4vYXNzZXRzL2ZvbnRzL2N1c3RvbS9wZXRyb2NoZW1pY29ucy50dGYnKSBmb3JtYXQoJ3RydWV0eXBlJyk7XHJcbiAgICBmb250LXdlaWdodDogbm9ybWFsO1xyXG4gICAgZm9udC1zdHlsZTogbm9ybWFsO1xyXG59XHJcblxyXG4uaWNvIHtcclxuICAgIGZvbnQtZmFtaWx5OiBcInBldHJvY2hlbWljb25zXCI7XHJcbiAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xyXG4gICAgZm9udC1zaXplOiA1MHB4O1xyXG59XHJcblxyXG4uaWNvOmJlZm9yZSB7XHJcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcclxuICAgIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7XHJcbiAgICBmb250LXN0eWxlOiBub3JtYWw7XHJcbiAgICBmb250LXZhcmlhbnQ6IG5vcm1hbDtcclxuICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7XHJcbiAgICBsaW5lLWhlaWdodDogMTtcclxuICAgIC8qIHNwZWFrOiBub25lOyBvbmx5IG5lY2Vzc2FyeSBpZiBub3QgdXNpbmcgdGhlIHByaXZhdGUgdW5pY29kZSByYW5nZSAoZmlyc3RHbHlwaCBvcHRpb24pICovXHJcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XHJcbiAgICB0ZXh0LXRyYW5zZm9ybTogbm9uZTtcclxufVxyXG5cclxuLmljby1sZyB7XHJcbiAgICBmb250LXNpemU6IDEuMzMzMzMzMzMzMzMzMzMzM2VtO1xyXG4gICAgbGluZS1oZWlnaHQ6IDAuNzVlbTtcclxuICAgIHZlcnRpY2FsLWFsaWduOiAtMTUlO1xyXG59XHJcbi5pY28tMnggeyBmb250LXNpemU6IDJlbTsgfVxyXG4uaWNvLTN4IHsgZm9udC1zaXplOiAzZW07IH1cclxuLmljby00eCB7IGZvbnQtc2l6ZTogNGVtOyB9XHJcbi5pY28tNXggeyBmb250LXNpemU6IDVlbTsgfVxyXG4uaWNvLWZ3IHtcclxuICAgIHdpZHRoOiAxLjI4NTcxNDI4NTcxNDI4NThlbTtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxufVxyXG5cclxuLmljby10ZXN0MTpiZWZvcmUgeyBjb250ZW50OiBcIlxcRTAwMVwiIH1cclxuLmljby10ZXN0MjpiZWZvcmUgeyBjb250ZW50OiBcIlxcRTAwMlwiIH1cclxuLmljby10ZXN0MzpiZWZvcmUgeyBjb250ZW50OiBcIlxcRTAwM1wiIH1cclxuLmljby10ZXN0NDpiZWZvcmUgeyBjb250ZW50OiBcIlxcRTAwNFwiIH1cclxuLmljby10ZXN0NTpiZWZvcmUgeyBjb250ZW50OiBcIlxcRTAwNVwiIH1cclxuLmljby10ZXN0NjpiZWZvcmUgeyBjb250ZW50OiBcIlxcRTAwNlwiIH1cclxuLmljby10ZXN0NzpiZWZvcmUgeyBjb250ZW50OiBcIlxcRTAwN1wiIH1cclxuIiwiLyoqXHJcbiAqIEljb25zXHJcbiAqIC0tLS0tXHJcbiAqIFJlcXVpcmVkIGljb25zIHJlZ2lzdGVyIHVzaW5nXHJcbiAqIElvbmljb25zIGZvbnQgZmFtaWx5LlxyXG4gKi9cclxuXHJcbi5pY29uXHJcbiAgcG9zaXRpb24gcmVsYXRpdmVcclxuXHJcbiAgLyoqXHJcbiAgICogU2V0IGRlZmF1bHRzLlxyXG4gICAqL1xyXG4gICY6YmVmb3JlXHJcbiAgICBmb250LWZhbWlseSAkaWNvbnNcclxuICAgIGZvbnQtc2l6ZSByZW0oMjJweClcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlZ2lzdGVyIGJhc2ljIGljb25zLlxyXG4gICAgICovXHJcblxyXG4gICAgLnBob25lJlxyXG4gICAgICBjb250ZW50ICdcXGYyZDInXHJcblxyXG4gICAgLmZhY2Vib29rJlxyXG4gICAgICBjb250ZW50ICdcXGYyMzEnXHJcblxyXG4gICAgLnR3aXR0ZXImXHJcbiAgICAgIGNvbnRlbnQgJ1xcZjI0MydcclxuXHJcbiAgICAuaW5zdGFncmFtJlxyXG4gICAgICBjb250ZW50ICdcXGYzNTEnXHJcblxyXG4gICAgLnlvdXR1YmUmXHJcbiAgICAgIGNvbnRlbnQgJ1xcZjI0ZCdcclxuXHJcbiAgICAucGludGVyZXN0JlxyXG4gICAgICBjb250ZW50ICdcXGYyYjEnXHJcblxyXG4gICAgLmxpbmtlZGluJlxyXG4gICAgICBjb250ZW50ICdcXGYyMzknXHJcblxyXG4gIC8qKlxyXG4gICAqIFN0eWxlIGFycm93ICggdXAgLyBkb3duICkgaWNvbi5cclxuICAgKi9cclxuICAmLmFycm93XHJcbiAgICBmb250LXNpemUgcmVtKDMwcHgpXHJcbiAgICBkaXNwbGF5IGlubGluZS1ibG9ja1xyXG4gICAgbWFyZ2luIGF1dG9cclxuXHJcbiAgICAmOmJlZm9yZVxyXG4gICAgICBwb2ludGVyLWV2ZW50cyBub25lXHJcbiAgICAgIHRyYW5zaXRpb24gY29sb3IgNDAwbXNcclxuXHJcbiAgICAgIC51cCZcclxuICAgICAgICBjb250ZW50ICdcXGYzZDgnIC8vIHVwIGNoYXJcclxuICAgICAgICBmb250LXNpemUgcmVtKDQwcHgpXHJcblxyXG4gICAgICAuZG93biZcclxuICAgICAgICBjb250ZW50ICdcXGYzZDAnIC8vIGRvd24gY2hhclxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQXJyb3cgdHJhbnNpdGlvbnMgb24gaG92ZXIuXHJcbiAgICAgKi9cclxuXHJcbiAgICAmOmhvdmVyXHJcblxyXG4gICAgICAmOmJlZm9yZVxyXG4gICAgICAgIGNvbG9yICRwcmltYXJ5XHJcblxyXG4gICAgICAmOmFmdGVyXHJcbiAgICAgICAgdHJhbnNmb3JtIHRyYW5zbGF0ZSgtNTAlLCAtNTAlKSBzY2FsZSgxLjEpXHJcbiIsIi8qKlxyXG4gKiBMYXlvdXRcclxuICogLS0tLS0tXHJcbiAqIE1haW4gbGF5b3V0IGNvbXBvbmVudC5cclxuICovXHJcblxyXG4vKipcclxuKiBTZXQgZGVmYXVsdCBzZWN0aW9uIHNwYWNpbmcuXHJcbiovXHJcbnNlY3Rpb25cclxuICBwYWRkaW5nIDEwMHB4IDBcclxuXHJcbi8qKlxyXG4gKiBTZXQgc2VjdGlvbiB0byBiZSBza2V3ZWQgb24gdG9wLlxyXG4gKi9cclxuc2VjdGlvbixcclxuZm9vdGVyXHJcbiAgYmFja2dyb3VuZCAkd2hpdGVcclxuXHJcbiAgJi5za2V3ZWQtdG9wXHJcbiAgICBwb3NpdGlvbiByZWxhdGl2ZVxyXG4gICAgei1pbmRleCAxXHJcblxyXG4gICAgLmNvbFxyXG4gICAgICB6LWluZGV4IDk5OTk5XHJcblxyXG4gICAgJjo6YmVmb3JlXHJcbiAgICAgIGJhY2tncm91bmQgaW5oZXJpdFxyXG4gICAgICBjb250ZW50ICcnXHJcbiAgICAgIGRpc3BsYXkgYmxvY2tcclxuICAgICAgaGVpZ2h0IDEwMCVcclxuICAgICAgbGVmdCAwXHJcbiAgICAgIHJpZ2h0IDBcclxuICAgICAgdG9wIDBcclxuICAgICAgcG9zaXRpb24gYWJzb2x1dGVcclxuICAgICAgei1pbmRleCAtMVxyXG4gICAgICBib3R0b20gMFxyXG4gICAgICB0cmFuc2Zvcm0gc2tld1koM2RlZylcclxuICAgICAgdHJhbnNmb3JtLW9yaWdpbiAxMDAlXHJcbiAgICAgIC13ZWJraXQtYmFja2ZhY2UtdmlzaWJpbGl0eSBoaWRkZW5cclxuXHJcbiAgJi5za2V3ZWQtYm90dG9tXHJcbiAgICBwb3NpdGlvbiByZWxhdGl2ZVxyXG4gICAgei1pbmRleCAxXHJcblxyXG4gICAgLmNvbFxyXG4gICAgICB6LWluZGV4IDk5OTk5XHJcblxyXG4gICAgJjo6YWZ0ZXJcclxuICAgICAgYmFja2dyb3VuZCBpbmhlcml0XHJcbiAgICAgIGNvbnRlbnQgJydcclxuICAgICAgZGlzcGxheSBibG9ja1xyXG4gICAgICBoZWlnaHQgMTAwJVxyXG4gICAgICByaWdodCAwXHJcbiAgICAgIGxlZnQgMFxyXG4gICAgICBib3R0b20gLTEwMCVcclxuICAgICAgcG9zaXRpb24gYWJzb2x1dGVcclxuICAgICAgei1pbmRleCAtMVxyXG4gICAgICB0cmFuc2Zvcm0gc2tld1koM2RlZylcclxuICAgICAgdHJhbnNmb3JtLW9yaWdpbiAxMDAlXHJcbiAgICAgIC13ZWJraXQtYmFja2ZhY2UtdmlzaWJpbGl0eSBoaWRkZW5cclxuXHJcbi8qKlxyXG4gKiBHcmlkXHJcbiAqL1xyXG4uYmxvY2tcclxuICBkaXNwbGF5IHRhYmxlXHJcbiAgcG9zaXRpb24gcmVsYXRpdmVcclxuICB3aWR0aCAxMDAlXHJcbiAgdGFibGUtbGF5b3V0IGZpeGVkXHJcbiAgb3ZlcmZsb3cgdmlzaWJsZVxyXG5cclxuICAvKipcclxuICAgKiBTZXQgYmxvY2sgdG8gZnVsbCBoZWlnaHQuXHJcbiAgICovXHJcbiAgJi5mdWxsSGVpZ2h0XHJcbiAgICBoZWlnaHQgMTAwdmhcclxuXHJcbiAgLyoqXHJcbiAgICogU2V0IGJsb2NrIHRvIHNpdGUgd2lkdGguXHJcbiAgICovXHJcbiAgJi5zaXRlV2lkdGhcclxuICAgIG1heC13aWR0aCAkbWF4LXdpZHRoXHJcbiAgICBtYXJnaW4gYXV0b1xyXG5cclxuICAvKipcclxuICAgKiBTZXQgYmxvY2sgdG8gZnVsbCB3aWR0aC5cclxuICAgKi9cclxuICAmLmZ1bGxXaWR0aFxyXG4gICAgbWF4LXdpZHRoIDEwMCVcclxuICAgIG1hcmdpbiBhdXRvXHJcblxyXG4gICYuYmxvY2stcmV2ZXJzZVxyXG4gICAgZGlyZWN0aW9uIHJ0bFxyXG5cclxuICAgICYgPiAuY29sXHJcbiAgICAgIGRpcmVjdGlvbiBsdHJcclxuXHJcbiAgLyoqXHJcbiAgICogUmVnaXN0ZSBibG9jaydzIGNoaWxkcmVuXHJcbiAgICogYXMgaXQncyBoZWxwZXIgZWxlbWVudHMuXHJcbiAgICovXHJcbiAgJiA+IC5jb2xcclxuICAgIGRpc3BsYXkgdGFibGUtY2VsbFxyXG4gICAgd2lkdGggYXV0b1xyXG4gICAgaGVpZ2h0IDEwMCVcclxuICAgIHZlcnRpY2FsLWFsaWduIHRvcFxyXG4gICAgcGFkZGluZyAxNXB4IDEwcHhcclxuXHJcbiAgICAmLmNvbC0xXHJcbiAgICAgIHdpZHRoIDguMzMzMzMzJVxyXG5cclxuICAgICYuY29sLTJcclxuICAgICAgd2lkdGggMTYuNjY2NjY3JVxyXG5cclxuICAgICYuY29sLTNcclxuICAgICAgd2lkdGggMjUlXHJcblxyXG4gICAgJi5jb2wtNFxyXG4gICAgICB3aWR0aCAzMy4zMzMzMzMlXHJcblxyXG4gICAgJi5jb2wtNVxyXG4gICAgICB3aWR0aCA0MS42NjY2NjclXHJcblxyXG4gICAgJi5jb2wtNlxyXG4gICAgICB3aWR0aCA1MCVcclxuXHJcbiAgICAmLmNvbC03XHJcbiAgICAgIHdpZHRoIDU4LjMzMzMzMyVcclxuXHJcbiAgICAmLmNvbC04XHJcbiAgICAgIHdpZHRoIDY2LjY2NjY2NyVcclxuXHJcbiAgICAmLmNvbC05XHJcbiAgICAgIHdpZHRoIDc1JVxyXG5cclxuICAgICYuY29sLTEwXHJcbiAgICAgIHdpZHRoIDgzLjMzMzMzMyVcclxuXHJcbiAgICAmLmNvbC0xMVxyXG4gICAgICB3aWR0aCA5MS42NjY2NjclXHJcblxyXG4gICAgJi5jb2wtMTJcclxuICAgICAgd2lkdGggMTAwJVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0IGFsaWdubWVudHMuXHJcbiAgICAgKi9cclxuXHJcbiAgICAmLm1pZGRsZVxyXG4gICAgICB2ZXJ0aWNhbC1hbGlnbiBtaWRkbGVcclxuXHJcbiAgICAgIEBtZWRpYSAobWF4LXdpZHRoOiAkbW9iaWxlKVxyXG4gICAgICAgIHBhZGRpbmctdG9wIDE1MHB4XHJcblxyXG4gICAgJi5ib3R0b21cclxuICAgICAgdmVydGljYWwtYWxpZ24gYm90dG9tXHJcblxyXG4gICAgJi5jZW50ZXJcclxuICAgICAgdGV4dC1hbGlnbiBjZW50ZXJcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldmVydCB0byBkaXNwbGF5XHJcbiAgICAgKiBibG9jayBvbiBtb2JpbGUuXHJcbiAgICAgKi9cclxuICAgIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogJG1vYmlsZSlcclxuICAgICAgZGlzcGxheSBibG9ja1xyXG4iLCIvKipcbiAqIFR5cG9ncmFwaHlcbiAqIC0tLS0tLS0tLS1cbiAqIEJhc2ljIHN0eWxlcyBmb3IgdGV4dHVhbCBlbGVtZW50cy5cbiAqL1xuXG5oMVxuICBmb250LXNpemUgcmVtKDY0cHgpXG4gIG1hcmdpbi1ib3R0b20gcmVtKDIwcHgpXG5cbmgyXG4gIGZvbnQtc2l6ZSByZW0oNDJweClcbiAgbWFyZ2luLWJvdHRvbSByZW0oMThweClcblxuaDNcbiAgZm9udC1zaXplIHJlbSgzMnB4KVxuICBtYXJnaW4tYm90dG9tIHJlbSgxNnB4KVxuXG5oNFxuICBmb250LXNpemUgcmVtKDI4cHgpXG4gIG1hcmdpbi1ib3R0b20gcmVtKDE0cHgpXG5cbmg1XG4gIGZvbnQtc2l6ZSByZW0oMjJweClcbiAgbWFyZ2luLWJvdHRvbSByZW0oMTJweClcbiAgbGV0dGVyLXNwYWNpbmcgcmVtKDFweClcblxuaDZcbiAgZm9udC1zaXplIHJlbSgxNHB4KVxuICBtYXJnaW4tYm90dG9tIHJlbSg4cHgpXG4gIGxldHRlci1zcGFjaW5nIHJlbSgxcHgpXG4gIGZvbnQtd2VpZ2h0IDYwMFxuXG5wXG4gIGZvbnQtc2l6ZSByZW0oMThweClcbiAgbGluZS1oZWlnaHQgMS4yNVxuXG5hXG4gIGNvbG9yIGluaGVyaXRcbiAgdGV4dC1kZWNvcmF0aW9uIG5vbmVcblxuLyoqXG4gKiBBcHBseSB1cHBlcmNhc2UgdHJhbnNmb3JtXG4gKiB0byBldmVyeSB0aXRsZSBlbGVtZW50LlxuICovXG5oMSwgaDIsIGgzLCBoNCwgaDUsIGg2XG4gIHRleHQtdHJhbnNmb3JtIHVwcGVyY2FzZVxuXG4vKipcbiAqIFRyaW0gdG9vIGxvbmcgdGl0bGUgZWxlbWVudHMuXG4gKi9cbmgxLCBoMiwgaDNcbiAgb3ZlcmZsb3cgaGlkZGVuXG4gIHRleHQtb3ZlcmZsb3cgZWxsaXBzaXNcbiIsIi8qKlxyXG4gKiBMYXllcnNcclxuICogLS0tLS0tXHJcbiAqIEJhc2ljIHN0eWxlcyBmb3IgaW1hZ2VzIGFuZFxyXG4gKiBvdmVyYWxsIGJhY2tncm91bmQgY29tcG9uZW50cy5cclxuICovXHJcblxyXG4ubGF5ZXJcclxuICBhYnNvbHV0ZSAwXHJcbiAgei1pbmRleCAtMVxyXG5cclxuICAvKipcclxuICAgKiBJbWFnZSBkZWZhdWx0cy5cclxuICAgKi9cclxuICAmLmltYWdlXHJcbiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uIGNlbnRlclxyXG4gICAgYmFja2dyb3VuZC1yZXBlYXQgbm8tcmVwZWF0XHJcbiAgICBiYWNrZ3JvdW5kLXNpemUgY292ZXJcclxuXHJcbiAgLyoqXHJcbiAgICogSXR0ZXJhdGUgdGhyb3VnaCBsYXllcnMgYW5kIHNjYWxlIHRoZW1cclxuICAgKiBiYXNlZCBvbiB0aGVpciBwYXJhbGxheCBzdHJlbmdodC5cclxuICAgKi9cclxuICBmb3IgaW5kZXggaW4gMC4uMTBcclxuICAgICRkYXRhUGFyYWxsYXggPSAnW2RhdGEtcGFyYWxsYXg9XCInICsgKGluZGV4IC8gMTApICsgJ1wiXSdcclxuICAgICZ7JGRhdGFQYXJhbGxheH1cclxuICAgICAgdG9wICAgIGluZGV4ICogKC01MHB4KVxyXG4gICAgICBib3R0b20gaW5kZXggKiAoLTUwcHgpXHJcblxyXG5cclxuIiwiLyoqXHJcbiAqIE92ZXJsYXkgbGF5ZXJcclxuICovXHJcblxyXG4ubGF5ZXIub3ZlcmxheVxyXG4gIGFic29sdXRlIDBcclxuICBvdmVyZmxvdyBoaWRkZW5cclxuICBwb2ludGVyLWV2ZW50cyBub25lXHJcbiAgei1pbmRleCAtMVxyXG5cclxuICAmLmJsYWNrXHJcbiAgICBiYWNrZ3JvdW5kIHRyYW5zcGFyZW50KCRibGFjaywgODAlKVxyXG5cclxuICAmLndoaXRlXHJcbiAgICBiYWNrZ3JvdW5kIHRyYW5zcGFyZW50KCR3aGl0ZSwgMjAlKVxyXG5cclxuXHJcblxyXG4iLCIvKipcclxuICogVmlkZW8gbGF5ZXJcclxuICovXHJcblxyXG4ubGF5ZXIudmlkZW9cclxuICBhYnNvbHV0ZSAwXHJcbiAgb3ZlcmZsb3cgaGlkZGVuXHJcbiAgcG9pbnRlci1ldmVudHMgbm9uZVxyXG5cclxuICAmID4gLmNvbFxyXG4gICAgYWJzb2x1dGUgMFxyXG5cclxuICAgIHZpZGVvXHJcbiAgICAgIGFic29sdXRlIHRvcCBsZWZ0XHJcbiAgICAgIHNpemUgMTAwJVxyXG4gICAgICBib3JkZXIgbm9uZVxyXG4gICAgICAvLyB0cmFuc2Zvcm0gdHJhbnNsYXRlWigtOTk5OXB4KVxyXG5cclxuICAgICAgQG1lZGlhIChtaW4tYXNwZWN0LXJhdGlvOiAxNi85KVxyXG4gICAgICAgIGhlaWdodCAxMDAwJVxyXG4gICAgICAgIHRvcCAtNDUwJVxyXG5cclxuICAgICAgQG1lZGlhIChtYXgtYXNwZWN0LXJhdGlvOiAxNi85KVxyXG4gICAgICAgIHdpZHRoIDEwMDAlXHJcbiAgICAgICAgbGVmdCAtNDUwJVxyXG5cclxuICAgIC8vIHJlbW92ZSBiYXJzXHJcbiAgICAuem9vbSZcclxuICAgICAgY2xvY2toYW5kIC0xOCUiLCIvKipcbiAqIEJ1dHRvblxuICovXG5cbi5idXR0b25cbiAgcG9zaXRpb24gcmVsYXRpdmVcbiAgZGlzcGxheSBpbmxpbmUtYmxvY2tcbiAgY3Vyc29yIHBvaW50ZXJcbiAgcGFkZGluZyAxNXB4IDQwcHhcbiAgdGV4dC1hbGlnbiBjZW50ZXJcbiAgdGV4dC10cmFuc2Zvcm0gdXBwZXJjYXNlXG4gIGxldHRlci1zcGFjaW5nIDJweFxuICBjb2xvciAkd2hpdGVcbiAgYmFja2dyb3VuZCAkcHJpbWFyeVxuICBib3JkZXIgbm9uZVxuXG4gIHRyYW5zaXRpb24gYmFja2dyb3VuZCAzMDBtc1xuXG4gICY6aG92ZXIsXG4gICY6YWN0aXZlXG4gICAgYmFja2dyb3VuZCBkYXJrZW4oJHByaW1hcnksIDEwJSlcbiIsIi8qKlxuICogQ2FyZFxuICovXG5cbi5jYXJkXG4gIG1hcmdpbiAxMHB4XG4gIHRleHQtYWxpZ24gbGVmdFxuICBjdXJzb3IgcG9pbnRlclxuXG4gICpcbiAgICBwb2ludGVyLWV2ZW50cyBub25lXG5cbiAgLmltYWdlXG4gICAgcG9zaXRpb24gcmVsYXRpdmVcbiAgICB3aWR0aCAxMDAlXG4gICAgcGFkZGluZyA1MCUgMTZweCA0cHhcbiAgICBjb2xvciB3aGl0ZVxuICAgIHRyYW5zaXRpb24gZmlsdGVyIDMwMG1zXG5cbiAgJjpob3ZlciAuaW1hZ2VcbiAgICBmaWx0ZXIgYnJpZ2h0bmVzcygxMTAlKSBzYXR1cmF0ZSgxMTAlKVxuXG4gIC5jb250ZW50XG4gICAgcGFkZGluZyAyNHB4IDE2cHggMTZweFxuXG4gICAgaDVcbiAgICAgIGZvbnQtc2l6ZSByZW0oMjRweClcblxuICAgIC5wcmljZVxuICAgICAgZm9udC13ZWlnaHQgNjAwXG4gICAgICBtYXJnaW4tbGVmdCA3cHhcblxuICAgICAgJjpiZWZvcmVcbiAgICAgICAgY29udGVudCAnQUVEJ1xuICAgICAgICBmb250LXNpemUgNTAlXG4gICAgICAgIG1hcmdpbi1yaWdodCAzcHhcblxuICAgIC5saW5rXG4gICAgICBtYXJnaW4tdG9wIDIwcHhcblxuICAmLmZ1bGxcbiAgICBib3gtc2hhZG93IDAgMCA1MHB4IDAgdHJhbnNwYXJlbnQoJGJsYWNrLCAxMCUpXG5cbiAgICAuaW1hZ2VcbiAgICAgIHBhZGRpbmctdG9wIDcwJVxuXG4gICAgLmNvbnRlbnRcbiAgICAgIGJhY2tncm91bmQgd2hpdGVcblxuICAgICAgLndyYXBcbiAgICAgICAgaGVpZ2h0IDE2MHB4XG5cbiAgICAgIGg1XG4gICAgICAgIGZvbnQtd2VpZ2h0IDYwMFxuICAgICAgICBtYXgtaGVpZ2h0IDcwcHhcbiAgICAgICAgZGlzcGxheSBibG9ja1xuICAgICAgICBvdmVyZmxvdyBoaWRkZW5cbiAgICAgICAgdGV4dC1vdmVyZmxvdyBlbGxpcHNpc1xuXG4gICAgICAgIGRpc3BsYXkgLXdlYmtpdC1ib3hcbiAgICAgICAgLXdlYmtpdC1saW5lLWNsYW1wIDNcbiAgICAgICAgLXdlYmtpdC1ib3gtb3JpZW50IHZlcnRpY2FsXG5cbiAgICAgIHBcbiAgICAgICAgaGVpZ2h0IDQ0cHhcbiAgICAgICAgZGlzcGxheSBibG9ja1xuICAgICAgICBvdmVyZmxvdyBoaWRkZW5cbiAgICAgICAgdGV4dC1vdmVyZmxvdyBlbGxpcHNpc1xuXG4gICAgICAgIGRpc3BsYXkgLXdlYmtpdC1ib3hcbiAgICAgICAgLXdlYmtpdC1saW5lLWNsYW1wIDJcbiAgICAgICAgLXdlYmtpdC1ib3gtb3JpZW50IHZlcnRpY2FsXG4iLCIvKipcbiAqIEZvb3RlclxuICovXG5cbmZvb3RlclxuICBiYWNrZ3JvdW5kICMzMzNcbiAgY29sb3Igd2hpdGVcbiAgcGFkZGluZyA0OHB4IDM2cHhcblxuICBpbWdcbiAgICBtYXgtd2lkdGggOTBweFxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6ICRtb2JpbGUpXG4gICAgICBtYXJnaW4gMjBweCAwIDQwcHhcblxuICBwXG4gICAgbWFyZ2luIDEwcHggMFxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6ICRtb2JpbGUpXG4gICAgICBtYXgtd2lkdGggMjQwcHhcbiAgICAgIG1hcmdpbiAxMHB4IGF1dG9cblxuICAuY29udGFjdFxuICAgIGFcbiAgICAgIG1hcmdpbiAwIDEwcHhcblxuICAgICAgdHJhbnNpdGlvbiBjb2xvciAzMDBtc1xuICAgICAgJjpob3ZlclxuICAgICAgICBjb2xvciAkc2Vjb25kYXJ5XG5cbiAgLmNvcHlyaWdodFxuICAgIG1hcmdpbi1ib3R0b20gNXB4XG4gICAgZm9udC1zaXplIHJlbSgxNHB4KVxuICAgIGNvbG9yIHRyYW5zcGFyZW50KCR3aGl0ZSwgMC41KVxuXG4gIC5ieVxuICAgIGNvbG9yIHRyYW5zcGFyZW50KCR3aGl0ZSwgMC41KVxuXG4gICAgdHJhbnNpdGlvbiBjb2xvciAzMDBtc1xuICAgICY6aG92ZXJcbiAgICAgIGNvbG9yICR3aGl0ZVxuXG4gIC5pY29uc1xuICAgIG1hcmdpbiA0MHB4IDAgMFxuXG4gICAgbGlcbiAgICAgIGRpc3BsYXkgaW5saW5lLWJsb2NrXG4gICAgICBtYXJnaW4gMTBweFxuXG4gICAgICBhXG4gICAgICAgIGZvbnQtc2l6ZSByZW0oMjBweClcbiAgICAgICAgY29sb3IgdHJhbnNwYXJlbnQoJHdoaXRlLCAwLjI1KVxuXG4gICAgICAgIHRyYW5zaXRpb24gY29sb3IgMzAwbXNcbiAgICAgICAgJjpob3ZlclxuICAgICAgICAgIGNvbG9yIHRyYW5zcGFyZW50KCR3aGl0ZSwgMC43NSlcblxuICAuaWNvblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAkbW9iaWxlKVxuICAgICAgbWFyZ2luIDQwcHggYXV0byAwXG4iLCIvKipcbiAqIExvYWRlclxuICovXG5cbiNsb2FkZXJcbiAgZml4ZWQgMFxuICBwb2ludGVyLWV2ZW50cyBub25lXG4gIHotaW5kZXggOTk5OTk5OTk5OTk5XG4gIGJhY2tncm91bmQgJHdoaXRlXG5cbiAgW2RhdGEtcmVhZHk9J3RydWUnXSAmXG4gICAgYW5pbWF0ZSBmYWRlLW91dCAxMDAwbXMgMjAwMG1zIGZvcndhcmRzLCAxMDAlIG9wYWNpdHkoMCkiLCJuYXZcbiAgZml4ZWQgdG9wIGxlZnQgcmlnaHRcbiAgei1pbmRleCA5OTk5XG5cbiAgY29sb3IgJHByaW1hcnlcbiAgYmFja2dyb3VuZCB0cmFuc3BhcmVudCgkd2hpdGUsIDAuODUpXG5cbiAgdGV4dC1hbGlnbiBjZW50ZXJcbiAgQG1lZGlhIChtYXgtd2lkdGg6ICRtb2JpbGUpXG4gICAgdGV4dC1hbGlnbiBsZWZ0XG5cbiAgbGlcbiAgICBkaXNwbGF5IGlubGluZS1ibG9ja1xuICAgIHZlcnRpY2FsLWFsaWduIGJvdHRvbVxuXG4gICAgQGV4dGVuZCBoNlxuXG4gICAgJi5tZW51LWl0ZW1cbiAgICAgIEBtZWRpYSAobWF4LXdpZHRoOiAkbW9iaWxlKVxuICAgICAgICBkaXNwbGF5IG5vbmVcblxuICAucHJpbWFyeVxuICAgIGRpc3BsYXkgaW5saW5lLWJsb2NrXG5cbiAgICB0cmFuc2l0aW9uIHRyYW5zZm9ybSA1MDBtc1xuICAgIEBtZWRpYSAobWluLXdpZHRoOiAxMjAwcHgpXG4gICAgICB0cmFuc2Zvcm0gdHJhbnNsYXRlWCgtNXB4KVxuXG4gICAgbGlcbiAgICAgIG1hcmdpbiAyMHB4IDEwcHhcblxuICAgICAgdHJhbnNpdGlvbiBtYXJnaW4tbGVmdCA1MDBtcywgbWFyZ2luLXJpZ2h0IDUwMG1zXG4gICAgICBAbWVkaWEgKG1pbi13aWR0aDogMTIwMHB4KVxuICAgICAgICBtYXJnaW4gMjBweFxuXG4gIC5zZWNvbmRhcnlcbiAgICBhYnNvbHV0ZSB0b3AgcmlnaHRcblxuICAgIGxpXG4gICAgICBmb250LXNpemUgcmVtKDEycHgpXG4gICAgICBtYXJnaW4gMTZweCAyMHB4IDAgMFxuXG4gICAgICAmLmxhbmdcbiAgICAgICAgZm9udC1mYW1pbHkgJGFyYWJpY1xuICAgICAgICBmb250LXdlaWdodCAzMDBcblxuICAgICAgJi5waG9uZTpiZWZvcmVcbiAgICAgICAgZm9udC1zaXplIHJlbSgxMHB4KVxuICAgICAgICBtYXJnaW4tcmlnaHQgcmVtKDZweClcblxuICAubWVudS1pdGVtIGFcbiAgICBwb3NpdGlvbiByZWxhdGl2ZVxuXG4gICAgJjpiZWZvcmVcbiAgICAgIGNvbnRlbnQgJydcbiAgICAgIGFic29sdXRlIGJvdHRvbSBsZWZ0IHJpZ2h0XG4gICAgICBib3JkZXItYm90dG9tIDFweCBzb2xpZCAkc2Vjb25kYXJ5XG4gICAgICB0cmFuc2Zvcm0gc2NhbGVYKDApXG4gICAgICB0cmFuc2l0aW9uIHRyYW5zZm9ybSA2MDBtc1xuXG4gICAgJjpob3ZlcjpiZWZvcmVcbiAgICAgIHRyYW5zZm9ybSBzY2FsZVgoMSlcblxuICBsaS5sb2dvXG4gICAgbWFyZ2luIDE2cHggMjBweFxuXG4gICAgJiBhOmJlZm9yZVxuICAgICAgZGlzcGxheSBub25lXG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogJG1vYmlsZSlcbiAgICAgIG1hcmdpbiAxNHB4IDE2cHhcblxuICAgIGltZ1xuICAgICAgbWF4LWhlaWdodCA1NnB4XG5cbiAgICAgIEBtZWRpYSAobWF4LXdpZHRoOiAkbW9iaWxlKVxuICAgICAgICBtYXgtaGVpZ2h0IDQwcHhcbiIsIiNoZWFkZXJcclxuICBjb2xvciAkd2hpdGUiLCJAY2hhcnNldCAnVVRGLTgnO1xyXG4vKiBTbGlkZXIgKi9cclxuLnNsaWNrLWxvYWRpbmcgLnNsaWNrLWxpc3Rcclxue1xyXG4gICAgYmFja2dyb3VuZDogI2ZmZiB1cmwoJy4uL2Fzc2V0cy9pbWFnZXMvYWpheC1sb2FkZXIuZ2lmJykgY2VudGVyIGNlbnRlciBuby1yZXBlYXQ7XHJcbn1cclxuXHJcbi8qIEljb25zICovXHJcbkBmb250LWZhY2Vcclxue1xyXG4gICAgZm9udC1mYW1pbHk6ICdzbGljayc7XHJcbiAgICBmb250LXdlaWdodDogbm9ybWFsO1xyXG4gICAgZm9udC1zdHlsZTogbm9ybWFsO1xyXG5cclxuICAgIHNyYzogdXJsKCcuLi9hc3NldHMvZm9udHMvc2xpY2svc2xpY2suZW90Jyk7XHJcbiAgICBzcmM6IHVybCgnLi4vYXNzZXRzL2ZvbnRzL3NsaWNrL3NsaWNrLmVvdD8jaWVmaXgnKSBmb3JtYXQoJ2VtYmVkZGVkLW9wZW50eXBlJyksIHVybCgnLi4vYXNzZXRzL2ZvbnRzL3NsaWNrL3NsaWNrLndvZmYnKSBmb3JtYXQoJ3dvZmYnKSwgdXJsKCcuLi9hc3NldHMvZm9udHMvc2xpY2svc2xpY2sudHRmJykgZm9ybWF0KCd0cnVldHlwZScpLCB1cmwoJy4uL2Fzc2V0cy9mb250cy9zbGljay9zbGljay5zdmcjc2xpY2snKSBmb3JtYXQoJ3N2ZycpO1xyXG59XHJcbi8qIEFycm93cyAqL1xyXG4uc2xpY2stcHJldixcclxuLnNsaWNrLW5leHRcclxue1xyXG4gICAgZm9udC1zaXplOiAwO1xyXG4gICAgbGluZS1oZWlnaHQ6IDA7XHJcblxyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgdG9wOiA1MCU7XHJcblxyXG4gICAgZGlzcGxheTogYmxvY2s7XHJcblxyXG4gICAgd2lkdGg6IDIwcHg7XHJcbiAgICBoZWlnaHQ6IDIwcHg7XHJcbiAgICBwYWRkaW5nOiAwO1xyXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSgwLCAtNTAlKTtcclxuICAgIC1tcy10cmFuc2Zvcm06IHRyYW5zbGF0ZSgwLCAtNTAlKTtcclxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKDAsIC01MCUpO1xyXG5cclxuICAgIGN1cnNvcjogcG9pbnRlcjtcclxuXHJcbiAgICBjb2xvcjogdHJhbnNwYXJlbnQ7XHJcbiAgICBib3JkZXI6IG5vbmU7XHJcbiAgICBvdXRsaW5lOiBub25lO1xyXG4gICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XHJcbn1cclxuLnNsaWNrLXByZXY6aG92ZXIsXHJcbi5zbGljay1wcmV2OmZvY3VzLFxyXG4uc2xpY2stbmV4dDpob3ZlcixcclxuLnNsaWNrLW5leHQ6Zm9jdXNcclxue1xyXG4gICAgY29sb3I6IHRyYW5zcGFyZW50O1xyXG4gICAgb3V0bGluZTogbm9uZTtcclxuICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xyXG59XHJcbi5zbGljay1wcmV2OmhvdmVyOmJlZm9yZSxcclxuLnNsaWNrLXByZXY6Zm9jdXM6YmVmb3JlLFxyXG4uc2xpY2stbmV4dDpob3ZlcjpiZWZvcmUsXHJcbi5zbGljay1uZXh0OmZvY3VzOmJlZm9yZVxyXG57XHJcbiAgICBvcGFjaXR5OiAxO1xyXG59XHJcbi5zbGljay1wcmV2LnNsaWNrLWRpc2FibGVkOmJlZm9yZSxcclxuLnNsaWNrLW5leHQuc2xpY2stZGlzYWJsZWQ6YmVmb3JlXHJcbntcclxuICAgIG9wYWNpdHk6IC4yNTtcclxufVxyXG5cclxuLnNsaWNrLXByZXY6YmVmb3JlLFxyXG4uc2xpY2stbmV4dDpiZWZvcmVcclxue1xyXG4gICAgZm9udC1mYW1pbHk6ICdzbGljayc7XHJcbiAgICBmb250LXNpemU6IDIwcHg7XHJcbiAgICBsaW5lLWhlaWdodDogMTtcclxuXHJcbiAgICBvcGFjaXR5OiAuNzU7XHJcbiAgICBjb2xvcjogd2hpdGU7XHJcblxyXG4gICAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XHJcbiAgICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlO1xyXG59XHJcblxyXG4uc2xpY2stcHJldlxyXG57XHJcbiAgICBsZWZ0OiAtMjVweDtcclxufVxyXG5bZGlyPSdydGwnXSAuc2xpY2stcHJldlxyXG57XHJcbiAgICByaWdodDogLTI1cHg7XHJcbiAgICBsZWZ0OiBhdXRvO1xyXG59XHJcbi5zbGljay1wcmV2OmJlZm9yZVxyXG57XHJcbiAgICBjb250ZW50OiAn4oaQJztcclxufVxyXG5bZGlyPSdydGwnXSAuc2xpY2stcHJldjpiZWZvcmVcclxue1xyXG4gICAgY29udGVudDogJ+KGkic7XHJcbn1cclxuXHJcbi5zbGljay1uZXh0XHJcbntcclxuICAgIHJpZ2h0OiAtMjVweDtcclxufVxyXG5bZGlyPSdydGwnXSAuc2xpY2stbmV4dFxyXG57XHJcbiAgICByaWdodDogYXV0bztcclxuICAgIGxlZnQ6IC0yNXB4O1xyXG59XHJcbi5zbGljay1uZXh0OmJlZm9yZVxyXG57XHJcbiAgICBjb250ZW50OiAn4oaSJztcclxufVxyXG5bZGlyPSdydGwnXSAuc2xpY2stbmV4dDpiZWZvcmVcclxue1xyXG4gICAgY29udGVudDogJ+KGkCc7XHJcbn1cclxuXHJcbi8qIERvdHMgKi9cclxuLnNsaWNrLWRvdHRlZC5zbGljay1zbGlkZXJcclxue1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMzBweDtcclxufVxyXG5cclxuLnNsaWNrLWRvdHNcclxue1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgYm90dG9tOiAtMjVweDtcclxuXHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxuXHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIHBhZGRpbmc6IDA7XHJcbiAgICBtYXJnaW46IDA7XHJcblxyXG4gICAgbGlzdC1zdHlsZTogbm9uZTtcclxuXHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbn1cclxuLnNsaWNrLWRvdHMgbGlcclxue1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG5cclxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuXHJcbiAgICB3aWR0aDogMjBweDtcclxuICAgIGhlaWdodDogMjBweDtcclxuICAgIG1hcmdpbjogMCA1cHg7XHJcbiAgICBwYWRkaW5nOiAwO1xyXG5cclxuICAgIGN1cnNvcjogcG9pbnRlcjtcclxufVxyXG4uc2xpY2stZG90cyBsaSBidXR0b25cclxue1xyXG4gICAgZm9udC1zaXplOiAwO1xyXG4gICAgbGluZS1oZWlnaHQ6IDA7XHJcblxyXG4gICAgZGlzcGxheTogYmxvY2s7XHJcblxyXG4gICAgd2lkdGg6IDIwcHg7XHJcbiAgICBoZWlnaHQ6IDIwcHg7XHJcbiAgICBwYWRkaW5nOiA1cHg7XHJcblxyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG5cclxuICAgIGNvbG9yOiB0cmFuc3BhcmVudDtcclxuICAgIGJvcmRlcjogMDtcclxuICAgIG91dGxpbmU6IG5vbmU7XHJcbiAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcclxufVxyXG4uc2xpY2stZG90cyBsaSBidXR0b246aG92ZXIsXHJcbi5zbGljay1kb3RzIGxpIGJ1dHRvbjpmb2N1c1xyXG57XHJcbiAgICBvdXRsaW5lOiBub25lO1xyXG59XHJcbi5zbGljay1kb3RzIGxpIGJ1dHRvbjpob3ZlcjpiZWZvcmUsXHJcbi5zbGljay1kb3RzIGxpIGJ1dHRvbjpmb2N1czpiZWZvcmVcclxue1xyXG4gICAgb3BhY2l0eTogMTtcclxufVxyXG4uc2xpY2stZG90cyBsaSBidXR0b246YmVmb3JlXHJcbntcclxuICAgIGZvbnQtZmFtaWx5OiAnc2xpY2snO1xyXG4gICAgZm9udC1zaXplOiA2cHg7XHJcbiAgICBsaW5lLWhlaWdodDogMjBweDtcclxuXHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICB0b3A6IDA7XHJcbiAgICBsZWZ0OiAwO1xyXG5cclxuICAgIHdpZHRoOiAyMHB4O1xyXG4gICAgaGVpZ2h0OiAyMHB4O1xyXG5cclxuICAgIGNvbnRlbnQ6ICfigKInO1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG5cclxuICAgIG9wYWNpdHk6IC4yNTtcclxuICAgIGNvbG9yOiBibGFjaztcclxuXHJcbiAgICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcclxuICAgIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7XHJcbn1cclxuLnNsaWNrLWRvdHMgbGkuc2xpY2stYWN0aXZlIGJ1dHRvbjpiZWZvcmVcclxue1xyXG4gICAgb3BhY2l0eTogLjc1O1xyXG4gICAgY29sb3I6IGJsYWNrO1xyXG59XHJcbiIsIi8qIFNsaWRlciAqL1xyXG4uc2xpY2stc2xpZGVyXHJcbntcclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuXHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XHJcblxyXG4gICAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcclxuICAgICAgIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XHJcbiAgICAgICAgLW1zLXVzZXItc2VsZWN0OiBub25lO1xyXG4gICAgICAgICAgICB1c2VyLXNlbGVjdDogbm9uZTtcclxuXHJcbiAgICAtd2Via2l0LXRvdWNoLWNhbGxvdXQ6IG5vbmU7XHJcbiAgICAta2h0bWwtdXNlci1zZWxlY3Q6IG5vbmU7XHJcbiAgICAtbXMtdG91Y2gtYWN0aW9uOiBwYW4teTtcclxuICAgICAgICB0b3VjaC1hY3Rpb246IHBhbi15O1xyXG4gICAgLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOiB0cmFuc3BhcmVudDtcclxufVxyXG5cclxuLnNsaWNrLWxpc3Rcclxue1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG5cclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuXHJcbiAgICBtYXJnaW46IDA7XHJcbiAgICBwYWRkaW5nOiAwO1xyXG59XHJcbi5zbGljay1saXN0OmZvY3VzXHJcbntcclxuICAgIG91dGxpbmU6IG5vbmU7XHJcbn1cclxuLnNsaWNrLWxpc3QuZHJhZ2dpbmdcclxue1xyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gICAgY3Vyc29yOiBoYW5kO1xyXG59XHJcblxyXG4uc2xpY2stc2xpZGVyIC5zbGljay10cmFjayxcclxuLnNsaWNrLXNsaWRlciAuc2xpY2stbGlzdFxyXG57XHJcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAtbW96LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgLW1zLXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgIC1vLXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XHJcbn1cclxuXHJcbi5zbGljay10cmFja1xyXG57XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICB0b3A6IDA7XHJcbiAgICBsZWZ0OiAwO1xyXG5cclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG59XHJcbi5zbGljay10cmFjazpiZWZvcmUsXHJcbi5zbGljay10cmFjazphZnRlclxyXG57XHJcbiAgICBkaXNwbGF5OiB0YWJsZTtcclxuXHJcbiAgICBjb250ZW50OiAnJztcclxufVxyXG4uc2xpY2stdHJhY2s6YWZ0ZXJcclxue1xyXG4gICAgY2xlYXI6IGJvdGg7XHJcbn1cclxuLnNsaWNrLWxvYWRpbmcgLnNsaWNrLXRyYWNrXHJcbntcclxuICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcclxufVxyXG5cclxuLnNsaWNrLXNsaWRlXHJcbntcclxuICAgIGRpc3BsYXk6IG5vbmU7XHJcbiAgICBmbG9hdDogbGVmdDtcclxuXHJcbiAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICBtaW4taGVpZ2h0OiAxcHg7XHJcbn1cclxuW2Rpcj0ncnRsJ10gLnNsaWNrLXNsaWRlXHJcbntcclxuICAgIGZsb2F0OiByaWdodDtcclxufVxyXG4uc2xpY2stc2xpZGUgaW1nXHJcbntcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG59XHJcbi5zbGljay1zbGlkZS5zbGljay1sb2FkaW5nIGltZ1xyXG57XHJcbiAgICBkaXNwbGF5OiBub25lO1xyXG59XHJcbi5zbGljay1zbGlkZS5kcmFnZ2luZyBpbWdcclxue1xyXG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XHJcbn1cclxuLnNsaWNrLWluaXRpYWxpemVkIC5zbGljay1zbGlkZVxyXG57XHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxufVxyXG4uc2xpY2stbG9hZGluZyAuc2xpY2stc2xpZGVcclxue1xyXG4gICAgdmlzaWJpbGl0eTogaGlkZGVuO1xyXG59XHJcbi5zbGljay12ZXJ0aWNhbCAuc2xpY2stc2xpZGVcclxue1xyXG4gICAgZGlzcGxheTogYmxvY2s7XHJcblxyXG4gICAgaGVpZ2h0OiBhdXRvO1xyXG5cclxuICAgIGJvcmRlcjogMXB4IHNvbGlkIHRyYW5zcGFyZW50O1xyXG59XHJcbi5zbGljay1hcnJvdy5zbGljay1oaWRkZW4ge1xyXG4gICAgZGlzcGxheTogbm9uZTtcclxufVxyXG4iXX0= */