/*
 * Styles
 */
html,
body,
div,
span,
applet,
object,
iframe,
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote,
pre,
a,
abbr,
acronym,
address,
big,
cite,
code,
del,
dfn,
em,
img,
ins,
kbd,
q,
s,
samp,
small,
strike,
strong,
sub,
sup,
tt,
var,
b,
u,
i,
center,
dl,
dt,
dd,
ol,
ul,
li,
fieldset,
form,
label,
legend,
table,
caption,
tbody,
tfoot,
thead,
tr,
th,
td,
article,
aside,
canvas,
details,
embed,
figure,
figcaption,
footer,
header,
hgroup,
menu,
nav,
output,
ruby,
section,
summary,
time,
mark,
audio,
video,
nav li {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
}
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
menu,
nav,
section {
  display: block;
}
body {
  line-height: 1;
}
ol,
ul {
  list-style: none;
}
blockquote,
q {
  quotes: none;
}
blockquote:before,
blockquote:after,
q:before,
q:after {
  content: '';
  content: none;
}
table {
  border-collapse: collapse;
  border-spacing: 0;
}
*,
*:before,
*:after {
  box-sizing: border-box;
}
body {
  font-family: 'Helvetica Neue', sans-serif;
  font-style: normal;
  font-weight: 300;
  color: #666;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}
::-moz-selection {
  background: rgba(41,128,185,0.1);
}
::selection {
  background: rgba(41,128,185,0.1);
}
* {
  -webkit-tap-highlight-color: transparent;
}
img,
a,
.button,
.link {
  -webkit-user-select: none;
     -moz-user-select: none;
      -ms-user-select: none;
          user-select: none;
}
@font-face {
  font-family: 'Ionicons';
  src: url("../assets/fonts/ionicons/ionicons.eot");
  src: local("Ionicons"), url("../assets/fonts/ionicons/ionicons.eot?#iefix") format("embedded-opentype"), url("../assets/fonts/ionicons/ionicons.woff") format("woff"), url("../assets/fonts/ionicons/ionicons.ttf") format("truetype"), url("../assets/fonts/ionicons/ionicons.svg#Ionicons") format("svg");
}
.icon {
  position: relative;
/**
   * Set defaults.
   */
/**
   * Style arrow ( up / down ) icon.
   */
}
.icon:before {
  font-family: 'Ionicons';
  font-size: 1.375rem;
/**
     * Register basic icons.
     */
}
.phone.icon:before {
  content: '\f2d2';
}
.facebook.icon:before {
  content: '\f231';
}
.twitter.icon:before {
  content: '\f243';
}
.instagram.icon:before {
  content: '\f351';
}
.youtube.icon:before {
  content: '\f24d';
}
.pinterest.icon:before {
  content: '\f2b1';
}
.linkedin.icon:before {
  content: '\f239';
}
.icon.arrow {
  display: block;
  width: 44px;
  margin: auto;
/**
     * Add circle around the icon.
     */
/**
     * Create transitions on hover.
     */
}
.icon.arrow:before {
  line-height: 44px;
  pointer-events: none;
  -webkit-transition: color 400ms;
  transition: color 400ms;
}
.up.icon.arrow:before {
  content: '\f366';
}
.down.icon.arrow:before {
  content: '\f35d';
}
.icon.arrow:after {
  content: '';
  position: absolute;
  top: 50%;
  left: 50%;
  -webkit-transform: translate(-50%, -50%);
          transform: translate(-50%, -50%);
  width: 44px;
  height: 44px;
  border-radius: 50%;
  border: 1px solid #34495e;
  -webkit-transition: -webkit-transform 400ms;
  transition: -webkit-transform 400ms;
  transition: transform 400ms;
  transition: transform 400ms, -webkit-transform 400ms;
}
.icon.arrow:hover:before {
  color: #34495e;
}
.icon.arrow:hover:after {
  -webkit-transform: translate(-50%, -50%) scale(1.1);
          transform: translate(-50%, -50%) scale(1.1);
}
.layer {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: -1;
/**
   * Image defaults.
   */
/**
   * Itterate through layers and scale them
   * based on their parallax strenght.
   */
}
.layer.image {
  background-position: center;
  background-repeat: no-repeat;
  background-size: cover;
}
.layer[data-parallax="0"] {
  top: 0px;
  bottom: 0px;
}
.layer[data-parallax="0.1"] {
  top: -50px;
  bottom: -50px;
}
.layer[data-parallax="0.2"] {
  top: -100px;
  bottom: -100px;
}
.layer[data-parallax="0.3"] {
  top: -150px;
  bottom: -150px;
}
.layer[data-parallax="0.4"] {
  top: -200px;
  bottom: -200px;
}
.layer[data-parallax="0.5"] {
  top: -250px;
  bottom: -250px;
}
.layer[data-parallax="0.6"] {
  top: -300px;
  bottom: -300px;
}
.layer[data-parallax="0.7"] {
  top: -350px;
  bottom: -350px;
}
.layer[data-parallax="0.8"] {
  top: -400px;
  bottom: -400px;
}
.layer[data-parallax="0.9"] {
  top: -450px;
  bottom: -450px;
}
.layer[data-parallax="1"] {
  top: -500px;
  bottom: -500px;
}
section {
  padding: 50px 0;
}
.row {
  display: table;
  position: relative;
  width: 100%;
  table-layout: fixed;
  overflow: hidden;
/**
   * Set block to full height.
   */
/**
   * Set block to site width.
   */
/**
   * Set block to full width.
   */
/**
   * Registe block's children
   * as it's helper elements.
   */
}
.row.row-reverse {
  direction: rtl;
}
.row.row-reverse > .col {
  direction: ltr;
}
.row.fullHeight {
  height: 100vh;
}
.row.siteWidth {
  max-width: 1200px;
  margin: auto;
}
.row.fullWidth {
  max-width: 100%;
  margin: auto;
}
.row > .col {
  display: table-cell;
  width: auto;
  height: 100%;
  vertical-align: top;
/**
     * Set alignments.
     */
/**
     * Revert to display
     * block on mobile.
     */
}
.row > .col.col-1 {
  width: 8.333333%;
}
.row > .col.col-2 {
  width: 16.666667%;
}
.row > .col.col-3 {
  width: 25%;
}
.row > .col.col-4 {
  width: 33.333333%;
}
.row > .col.col-5 {
  width: 41.666667%;
}
.row > .col.col-6 {
  width: 50%;
}
.row > .col.col-7 {
  width: 58.333333%;
}
.row > .col.col-8 {
  width: 66.666667%;
}
.row > .col.col-9 {
  width: 75%;
}
.row > .col.col-10 {
  width: 83.333333%;
}
.row > .col.col-11 {
  width: 91.666667%;
}
.row > .col.col-12 {
  width: 100%;
}
.row > .col.middle {
  vertical-align: middle;
}
.row > .col.bottom {
  vertical-align: bottom;
}
.row > .col.center {
  text-align: center;
}
@media only screen and (max-width: 1024px) {
  .row > .col {
    display: block;
  }
}
h1 {
  font-size: 4rem;
  margin-bottom: 1.25rem;
}
h2 {
  font-size: 2.625rem;
  margin-bottom: 1.125rem;
}
h3 {
  font-size: 2rem;
  margin-bottom: 1rem;
}
h4 {
  font-size: 1.75rem;
  margin-bottom: 0.875rem;
}
h5 {
  font-size: 1.375rem;
  margin-bottom: 0.75rem;
  letter-spacing: 0.0625rem;
}
h6,
nav li {
  font-size: 0.875rem;
  margin-bottom: 0.5rem;
  letter-spacing: 0.0625rem;
  font-weight: 600;
}
p {
  font-size: 1.125rem;
  line-height: 1.25;
}
a {
  color: inherit;
  text-decoration: none;
}
h1,
h2,
h3,
h4,
h5,
h6,
nav li {
  text-transform: uppercase;
}
h1,
h2,
h3 {
  overflow: hidden;
  text-overflow: ellipsis;
}
.button {
  position: relative;
  display: inline-block;
  cursor: pointer;
  padding: 15px 40px;
  text-align: center;
  text-transform: uppercase;
  letter-spacing: 2px;
  color: #fff;
  background: #2980b9;
  border: none;
  -webkit-transition: background 300ms;
  transition: background 300ms;
}
.button:hover,
.button:active {
  background: #2573a7;
}
.card {
  margin: 10px;
  text-align: left;
  cursor: pointer;
}
.card * {
  pointer-events: none;
}
.card .image {
  position: relative;
  width: 100%;
  padding: 50% 16px 4px;
  color: #fff;
  -webkit-transition: -webkit-filter 300ms;
  transition: -webkit-filter 300ms;
  transition: filter 300ms;
  transition: filter 300ms, -webkit-filter 300ms;
}
.card:hover .image {
  -webkit-filter: brightness(110%) saturate(110%);
          filter: brightness(110%) saturate(110%);
}
.card .content {
  padding: 24px 16px 16px;
}
.card .content h5 {
  font-size: 1.5rem;
}
.card .content .price {
  font-weight: 600;
  margin-left: 7px;
}
.card .content .price:before {
  content: 'AED';
  font-size: 50%;
  margin-right: 3px;
}
.card .content .link {
  margin-top: 20px;
}
.card.full {
  box-shadow: 0 0 50px 0 rgba(0,0,0,0.1);
}
.card.full .image {
  padding-top: 70%;
}
.card.full .content {
  background: #fff;
}
.card.full .content .wrap {
  height: 160px;
}
.card.full .content h5 {
  font-weight: 600;
  max-height: 70px;
  display: block;
  overflow: hidden;
  text-overflow: ellipsis;
  display: -webkit-box;
  -webkit-line-clamp: 3;
  -webkit-box-orient: vertical;
}
.card.full .content p {
  height: 44px;
  display: block;
  overflow: hidden;
  text-overflow: ellipsis;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
}
footer {
  background: #333;
  color: #fff;
  padding: 48px 36px;
}
footer img {
  max-width: 90px;
}
@media (max-width: 1024px) {
  footer img {
    margin: 20px 0 40px;
  }
}
footer p {
  margin: 10px 0;
}
@media (max-width: 1024px) {
  footer p {
    max-width: 240px;
    margin: 10px auto;
  }
}
footer .contact a {
  margin: 0 10px;
  -webkit-transition: color 300ms;
  transition: color 300ms;
}
footer .contact a:hover {
  color: #34495e;
}
footer .copyright {
  margin-bottom: 5px;
  font-size: 0.875rem;
  color: rgba(255,255,255,0.5);
}
footer .by {
  color: rgba(255,255,255,0.5);
  -webkit-transition: color 300ms;
  transition: color 300ms;
}
footer .by:hover {
  color: #fff;
}
footer .icons {
  margin: 40px 0 0;
}
footer .icons li {
  display: inline-block;
  margin: 10px;
}
footer .icons li a {
  font-size: 1.25rem;
  color: rgba(255,255,255,0.25);
  -webkit-transition: color 300ms;
  transition: color 300ms;
}
footer .icons li a:hover {
  color: rgba(255,255,255,0.75);
}
@media (max-width: 1024px) {
  footer .icon {
    margin: 40px auto 0;
  }
}
#loader {
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  pointer-events: none;
  z-index: 999999999999;
}
#loader:before {
  content: '';
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  background: #fff;
  z-index: -1;
}
[data-ready='true'] #loader:before {
  -webkit-animation: load-swipe 1000ms 2000ms forwards;
          animation: load-swipe 1000ms 2000ms forwards;
}
@-webkit-keyframes load-swipe {
  100% {
    -webkit-transform: translateX(100%);
            transform: translateX(100%);
  }
}
@keyframes load-swipe {
  100% {
    -webkit-transform: translateX(100%);
            transform: translateX(100%);
  }
}
#loader img {
  max-width: 280px;
  position: absolute;
  top: 50%;
  left: 50%;
  -webkit-transform: translateX(-60%) translateY(-50%);
          transform: translateX(-60%) translateY(-50%);
  opacity: 0;
}
[data-ready='true'] #loader img {
  -webkit-animation: load-logo 2500ms 100ms forwards;
          animation: load-logo 2500ms 100ms forwards;
}
@-webkit-keyframes load-logo {
  0% {
    opacity: 0;
    -webkit-transform: translateX(-60%) translateY(-50%);
            transform: translateX(-60%) translateY(-50%);
  }
  40% {
    opacity: 1;
    -webkit-transform: translateX(-50%) translateY(-50%);
            transform: translateX(-50%) translateY(-50%);
  }
  70% {
    opacity: 1;
    -webkit-transform: translateX(-50%) translateY(-50%);
            transform: translateX(-50%) translateY(-50%);
  }
  100% {
    opacity: 0;
    -webkit-transform: translateX(-30%) translateY(-50%);
            transform: translateX(-30%) translateY(-50%);
  }
}
@keyframes load-logo {
  0% {
    opacity: 0;
    -webkit-transform: translateX(-60%) translateY(-50%);
            transform: translateX(-60%) translateY(-50%);
  }
  40% {
    opacity: 1;
    -webkit-transform: translateX(-50%) translateY(-50%);
            transform: translateX(-50%) translateY(-50%);
  }
  70% {
    opacity: 1;
    -webkit-transform: translateX(-50%) translateY(-50%);
            transform: translateX(-50%) translateY(-50%);
  }
  100% {
    opacity: 0;
    -webkit-transform: translateX(-30%) translateY(-50%);
            transform: translateX(-30%) translateY(-50%);
  }
}
nav {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  z-index: 9999;
  color: #2980b9;
  background: rgba(255,255,255,0.85);
  text-align: center;
}
@media (max-width: 1024px) {
  nav {
    text-align: left;
  }
}
nav li {
  display: inline-block;
  vertical-align: bottom;
}
@media (max-width: 1024px) {
  nav li.menu-item {
    display: none;
  }
}
nav .primary {
  display: inline-block;
  -webkit-transition: -webkit-transform 500ms;
  transition: -webkit-transform 500ms;
  transition: transform 500ms;
  transition: transform 500ms, -webkit-transform 500ms;
}
@media (min-width: 1200px) {
  nav .primary {
    -webkit-transform: translateX(-5px);
            transform: translateX(-5px);
  }
}
nav .primary li {
  margin: 20px 10px;
  -webkit-transition: margin-left 500ms, margin-right 500ms;
  transition: margin-left 500ms, margin-right 500ms;
}
@media (min-width: 1200px) {
  nav .primary li {
    margin: 20px;
  }
}
nav .secondary {
  position: absolute;
  top: 0;
  right: 0;
}
nav .secondary li {
  font-size: 0.75rem;
  margin: 16px 20px 0 0;
}
nav .secondary li.lang {
  font-family: $arabic;
  font-weight: 300;
}
nav .secondary li.phone:before {
  font-size: 0.625rem;
  margin-right: 0.375rem;
}
nav .menu-item a {
  position: relative;
}
nav .menu-item a:before {
  content: '';
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  border-bottom: 1px solid #34495e;
  -webkit-transform: scaleX(0);
          transform: scaleX(0);
  -webkit-transition: -webkit-transform 600ms;
  transition: -webkit-transform 600ms;
  transition: transform 600ms;
  transition: transform 600ms, -webkit-transform 600ms;
}
nav .menu-item a:hover:before {
  -webkit-transform: scaleX(1);
          transform: scaleX(1);
}
nav li.logo {
  margin: 16px 20px;
}
nav li.logo a:before {
  display: none;
}
@media (max-width: 1024px) {
  nav li.logo {
    margin: 14px 16px;
  }
}
nav li.logo img {
  max-height: 56px;
}
@media (max-width: 1024px) {
  nav li.logo img {
    max-height: 40px;
  }
}
.stack {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: -1;
/**
   *  Set background-image required propertires,
   *  as lyers within a stack are always images.
   */
/**
   * Itterate through layers and scale them based
   * on parallax strenght set on parent stack.
   */
/**
   * Add black gradient
   * overlay when needed.
   */
}
.stack .layer {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  background-repeat: no-repeat;
  background-position: center;
  background-size: cover;
  opacity: 0;
  -webkit-transition: opacity 1000ms;
  transition: opacity 1000ms;
/**
     * Activate slide whenever
     * data-attribute matches.
     */
}
[data-layer="1"].stack .layer:nth-child(1) {
  opacity: 1;
}
[data-layer="2"].stack .layer:nth-child(2) {
  opacity: 1;
}
[data-layer="3"].stack .layer:nth-child(3) {
  opacity: 1;
}
[data-layer="4"].stack .layer:nth-child(4) {
  opacity: 1;
}
[data-layer="5"].stack .layer:nth-child(5) {
  opacity: 1;
}
[data-layer="6"].stack .layer:nth-child(6) {
  opacity: 1;
}
[data-layer="7"].stack .layer:nth-child(7) {
  opacity: 1;
}
[data-layer="8"].stack .layer:nth-child(8) {
  opacity: 1;
}
[data-layer="9"].stack .layer:nth-child(9) {
  opacity: 1;
}
[data-layer="10"].stack .layer:nth-child(10) {
  opacity: 1;
}
.stack[data-parallax="0"] {
  top: 0px;
  bottom: 0px;
}
.stack[data-parallax="0.1"] {
  top: -50px;
  bottom: -50px;
}
.stack[data-parallax="0.2"] {
  top: -100px;
  bottom: -100px;
}
.stack[data-parallax="0.3"] {
  top: -150px;
  bottom: -150px;
}
.stack[data-parallax="0.4"] {
  top: -200px;
  bottom: -200px;
}
.stack[data-parallax="0.5"] {
  top: -250px;
  bottom: -250px;
}
.stack[data-parallax="0.6"] {
  top: -300px;
  bottom: -300px;
}
.stack[data-parallax="0.7"] {
  top: -350px;
  bottom: -350px;
}
.stack[data-parallax="0.8"] {
  top: -400px;
  bottom: -400px;
}
.stack[data-parallax="0.9"] {
  top: -450px;
  bottom: -450px;
}
.stack[data-parallax="1"] {
  top: -500px;
  bottom: -500px;
}
.stack .overlay:after {
  content: '';
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  background: -webkit-linear-gradient(bottom, rgba(17,17,17,0.6), rgba(17,17,17,0) 40%);
  background: linear-gradient(to top, rgba(17,17,17,0.6), rgba(17,17,17,0) 40%);
}
/*# sourceMappingURL=data:application/json;base64, */