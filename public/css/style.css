/*
 * Styles
 */
html,
body,
div,
span,
applet,
object,
iframe,
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote,
pre,
a,
abbr,
acronym,
address,
big,
cite,
code,
del,
dfn,
em,
img,
ins,
kbd,
q,
s,
samp,
small,
strike,
strong,
sub,
sup,
tt,
var,
b,
u,
i,
center,
dl,
dt,
dd,
ol,
ul,
li,
fieldset,
form,
label,
legend,
table,
caption,
tbody,
tfoot,
thead,
tr,
th,
td,
article,
aside,
canvas,
details,
embed,
figure,
figcaption,
footer,
header,
hgroup,
menu,
nav,
output,
ruby,
section,
summary,
time,
mark,
audio,
video,
nav li {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
}
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
menu,
nav,
section {
  display: block;
}
body {
  line-height: 1;
}
ol,
ul {
  list-style: none;
}
blockquote,
q {
  quotes: none;
}
blockquote:before,
blockquote:after,
q:before,
q:after {
  content: '';
  content: none;
}
table {
  border-collapse: collapse;
  border-spacing: 0;
}
*,
*:before,
*:after {
  box-sizing: border-box;
}
body {
  font-family: 'Helvetica Neue', sans-serif;
  font-style: normal;
  font-weight: 300;
  color: #666;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}
::-moz-selection {
  background: rgba(41,128,185,0.1);
}
::selection {
  background: rgba(41,128,185,0.1);
}
* {
  -webkit-tap-highlight-color: transparent;
}
img,
a,
.button,
.link {
  -webkit-user-select: none;
     -moz-user-select: none;
      -ms-user-select: none;
          user-select: none;
}
img {
  width: 100%;
  max-width: 100%;
}
@font-face {
  font-family: 'Ionicons';
  src: url("../assets/fonts/ionicons/ionicons.eot");
  src: local("Ionicons"), url("../assets/fonts/ionicons/ionicons.eot?#iefix") format("embedded-opentype"), url("../assets/fonts/ionicons/ionicons.woff") format("woff"), url("../assets/fonts/ionicons/ionicons.ttf") format("truetype"), url("../assets/fonts/ionicons/ionicons.svg#Ionicons") format("svg");
}
.icon {
  position: relative;
/**
   * Set defaults.
   */
/**
   * Style arrow ( up / down ) icon.
   */
}
.icon:before {
  font-family: 'Ionicons';
  font-size: 1.375rem;
/**
     * Register basic icons.
     */
}
.phone.icon:before {
  content: '\f2d2';
}
.facebook.icon:before {
  content: '\f231';
}
.twitter.icon:before {
  content: '\f243';
}
.instagram.icon:before {
  content: '\f351';
}
.youtube.icon:before {
  content: '\f24d';
}
.pinterest.icon:before {
  content: '\f2b1';
}
.linkedin.icon:before {
  content: '\f239';
}
.icon.arrow {
  display: block;
  width: 44px;
  margin: auto;
/**
     * Add circle around the icon.
     */
/**
     * Create transitions on hover.
     */
}
.icon.arrow:before {
  line-height: 44px;
  pointer-events: none;
  -webkit-transition: color 400ms;
  transition: color 400ms;
}
.up.icon.arrow:before {
  content: '\f366';
}
.down.icon.arrow:before {
  content: '\f35d';
}
.icon.arrow:after {
  content: '';
  position: absolute;
  top: 50%;
  left: 50%;
  -webkit-transform: translate(-50%, -50%);
          transform: translate(-50%, -50%);
  width: 44px;
  height: 44px;
  border-radius: 50%;
  border: 1px solid #34495e;
  -webkit-transition: -webkit-transform 400ms;
  transition: -webkit-transform 400ms;
  transition: transform 400ms;
  transition: transform 400ms, -webkit-transform 400ms;
}
.icon.arrow:hover:before {
  color: #34495e;
}
.icon.arrow:hover:after {
  -webkit-transform: translate(-50%, -50%) scale(1.1);
          transform: translate(-50%, -50%) scale(1.1);
}
section {
  padding: 50px 0;
}
.container {
  max-width: 1000px;
  margin: 0 auto;
  display: block;
  padding: 0 1rem;
}
.col {
  background: #eee;
}
.row {
  display: table;
  position: relative;
  width: 100%;
  table-layout: fixed;
  overflow: hidden;
/**
   * Set block to full height.
   */
/**
   * Set block to site width.
   */
/**
   * Set block to full width.
   */
/**
   * Registe block's children
   * as it's helper elements.
   */
}
.row.row-reverse {
  direction: rtl;
}
.row.row-reverse > .col {
  direction: ltr;
}
.row.fullHeight {
  height: 100vh;
}
.row.siteWidth {
  max-width: 1000px;
  margin: auto;
}
.row.fullWidth {
  max-width: 100%;
  margin: auto;
}
.row > .col {
  display: table-cell;
  width: auto;
  height: 100%;
  vertical-align: top;
/**
     * Set alignments.
     */
/**
     * Revert to display
     * block on mobile.
     */
}
.row > .col.col-1 {
  width: 8.333333%;
}
.row > .col.col-2 {
  width: 16.666667%;
}
.row > .col.col-3 {
  width: 25%;
}
.row > .col.col-4 {
  width: 33.333333%;
}
.row > .col.col-5 {
  width: 41.666667%;
}
.row > .col.col-6 {
  width: 50%;
}
.row > .col.col-7 {
  width: 58.333333%;
}
.row > .col.col-8 {
  width: 66.666667%;
}
.row > .col.col-9 {
  width: 75%;
}
.row > .col.col-10 {
  width: 83.333333%;
}
.row > .col.col-11 {
  width: 91.666667%;
}
.row > .col.col-12 {
  width: 100%;
}
.row > .col.middle {
  vertical-align: middle;
}
.row > .col.bottom {
  vertical-align: bottom;
}
.row > .col.center {
  text-align: center;
}
@media only screen and (max-width: 768px) {
  .row > .col {
    display: block;
  }
}
.row-padded {
  margin-left: -1rem;
  margin-right: -1rem;
}
.row-padded .row {
  border-spacing: 1rem 0;
}
h1 {
  font-size: 4rem;
  margin-bottom: 1.25rem;
}
h2 {
  font-size: 2.625rem;
  margin-bottom: 1.125rem;
}
h3 {
  font-size: 2rem;
  margin-bottom: 1rem;
}
h4 {
  font-size: 1.75rem;
  margin-bottom: 0.875rem;
}
h5 {
  font-size: 1.375rem;
  margin-bottom: 0.75rem;
  letter-spacing: 0.0625rem;
}
h6,
nav li {
  font-size: 0.875rem;
  margin-bottom: 0.5rem;
  letter-spacing: 0.0625rem;
  font-weight: 600;
}
p {
  font-size: 1.125rem;
  line-height: 1.25;
}
a {
  color: inherit;
  text-decoration: none;
}
h1,
h2,
h3,
h4,
h5,
h6,
nav li {
  text-transform: uppercase;
}
h1,
h2,
h3 {
  overflow: hidden;
  text-overflow: ellipsis;
}
.layer {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: -1;
/**
   * Image defaults.
   */
/**
   * Itterate through layers and scale them
   * based on their parallax strenght.
   */
}
.layer.image {
  background-position: center;
  background-repeat: no-repeat;
  background-size: cover;
}
.layer[data-parallax="0"] {
  top: 0px;
  bottom: 0px;
}
.layer[data-parallax="0.1"] {
  top: -50px;
  bottom: -50px;
}
.layer[data-parallax="0.2"] {
  top: -100px;
  bottom: -100px;
}
.layer[data-parallax="0.3"] {
  top: -150px;
  bottom: -150px;
}
.layer[data-parallax="0.4"] {
  top: -200px;
  bottom: -200px;
}
.layer[data-parallax="0.5"] {
  top: -250px;
  bottom: -250px;
}
.layer[data-parallax="0.6"] {
  top: -300px;
  bottom: -300px;
}
.layer[data-parallax="0.7"] {
  top: -350px;
  bottom: -350px;
}
.layer[data-parallax="0.8"] {
  top: -400px;
  bottom: -400px;
}
.layer[data-parallax="0.9"] {
  top: -450px;
  bottom: -450px;
}
.layer[data-parallax="1"] {
  top: -500px;
  bottom: -500px;
}
.layer.overlay {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  overflow: hidden;
  pointer-events: none;
  z-index: -1;
}
.layer.overlay.black {
  background: rgba(0,0,0,0.8);
}
.layer.overlay.white {
  background: rgba(255,255,255,0.2);
}
.layer.video {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  overflow: hidden;
  pointer-events: none;
}
.layer.video > .col {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
}
.layer.video > .col video {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border: none;
}
@media (min-aspect-ratio: 16/9) {
  .layer.video > .col video {
    height: 1000%;
    top: -450%;
  }
}
@media (max-aspect-ratio: 16/9) {
  .layer.video > .col video {
    width: 1000%;
    left: -450%;
  }
}
.zoom.layer.video > .col {
  top: -18%;
  right: -18%;
  bottom: -18%;
  left: -18%;
}
.button {
  position: relative;
  display: inline-block;
  cursor: pointer;
  padding: 15px 40px;
  text-align: center;
  text-transform: uppercase;
  letter-spacing: 2px;
  color: #fff;
  background: #2980b9;
  border: none;
  -webkit-transition: background 300ms;
  transition: background 300ms;
}
.button:hover,
.button:active {
  background: #2573a7;
}
.card {
  margin: 10px;
  text-align: left;
  cursor: pointer;
}
.card * {
  pointer-events: none;
}
.card .image {
  position: relative;
  width: 100%;
  padding: 50% 16px 4px;
  color: #fff;
  -webkit-transition: -webkit-filter 300ms;
  transition: -webkit-filter 300ms;
  transition: filter 300ms;
  transition: filter 300ms, -webkit-filter 300ms;
}
.card:hover .image {
  -webkit-filter: brightness(110%) saturate(110%);
          filter: brightness(110%) saturate(110%);
}
.card .content {
  padding: 24px 16px 16px;
}
.card .content h5 {
  font-size: 1.5rem;
}
.card .content .price {
  font-weight: 600;
  margin-left: 7px;
}
.card .content .price:before {
  content: 'AED';
  font-size: 50%;
  margin-right: 3px;
}
.card .content .link {
  margin-top: 20px;
}
.card.full {
  box-shadow: 0 0 50px 0 rgba(0,0,0,0.1);
}
.card.full .image {
  padding-top: 70%;
}
.card.full .content {
  background: #fff;
}
.card.full .content .wrap {
  height: 160px;
}
.card.full .content h5 {
  font-weight: 600;
  max-height: 70px;
  display: block;
  overflow: hidden;
  text-overflow: ellipsis;
  display: -webkit-box;
  -webkit-line-clamp: 3;
  -webkit-box-orient: vertical;
}
.card.full .content p {
  height: 44px;
  display: block;
  overflow: hidden;
  text-overflow: ellipsis;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
}
footer {
  background: #333;
  color: #fff;
  padding: 48px 36px;
}
footer img {
  max-width: 90px;
}
@media (max-width: 768px) {
  footer img {
    margin: 20px 0 40px;
  }
}
footer p {
  margin: 10px 0;
}
@media (max-width: 768px) {
  footer p {
    max-width: 240px;
    margin: 10px auto;
  }
}
footer .contact a {
  margin: 0 10px;
  -webkit-transition: color 300ms;
  transition: color 300ms;
}
footer .contact a:hover {
  color: #34495e;
}
footer .copyright {
  margin-bottom: 5px;
  font-size: 0.875rem;
  color: rgba(255,255,255,0.5);
}
footer .by {
  color: rgba(255,255,255,0.5);
  -webkit-transition: color 300ms;
  transition: color 300ms;
}
footer .by:hover {
  color: #fff;
}
footer .icons {
  margin: 40px 0 0;
}
footer .icons li {
  display: inline-block;
  margin: 10px;
}
footer .icons li a {
  font-size: 1.25rem;
  color: rgba(255,255,255,0.25);
  -webkit-transition: color 300ms;
  transition: color 300ms;
}
footer .icons li a:hover {
  color: rgba(255,255,255,0.75);
}
@media (max-width: 768px) {
  footer .icon {
    margin: 40px auto 0;
  }
}
#loader {
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  pointer-events: none;
  z-index: 999999999999;
}
#loader:before {
  content: '';
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  background: #fff;
  z-index: -1;
}
[data-ready='true'] #loader:before {
  -webkit-animation: load-swipe 1000ms 2000ms forwards;
          animation: load-swipe 1000ms 2000ms forwards;
}
@-webkit-keyframes load-swipe {
  100% {
    -webkit-transform: translateX(100%);
            transform: translateX(100%);
  }
}
@keyframes load-swipe {
  100% {
    -webkit-transform: translateX(100%);
            transform: translateX(100%);
  }
}
#loader img {
  max-width: 280px;
  position: absolute;
  top: 50%;
  left: 50%;
  -webkit-transform: translateX(-60%) translateY(-50%);
          transform: translateX(-60%) translateY(-50%);
  opacity: 0;
}
[data-ready='true'] #loader img {
  -webkit-animation: load-logo 2500ms 100ms forwards;
          animation: load-logo 2500ms 100ms forwards;
}
@-webkit-keyframes load-logo {
  0% {
    opacity: 0;
    -webkit-transform: translateX(-60%) translateY(-50%);
            transform: translateX(-60%) translateY(-50%);
  }
  40% {
    opacity: 1;
    -webkit-transform: translateX(-50%) translateY(-50%);
            transform: translateX(-50%) translateY(-50%);
  }
  70% {
    opacity: 1;
    -webkit-transform: translateX(-50%) translateY(-50%);
            transform: translateX(-50%) translateY(-50%);
  }
  100% {
    opacity: 0;
    -webkit-transform: translateX(-30%) translateY(-50%);
            transform: translateX(-30%) translateY(-50%);
  }
}
@keyframes load-logo {
  0% {
    opacity: 0;
    -webkit-transform: translateX(-60%) translateY(-50%);
            transform: translateX(-60%) translateY(-50%);
  }
  40% {
    opacity: 1;
    -webkit-transform: translateX(-50%) translateY(-50%);
            transform: translateX(-50%) translateY(-50%);
  }
  70% {
    opacity: 1;
    -webkit-transform: translateX(-50%) translateY(-50%);
            transform: translateX(-50%) translateY(-50%);
  }
  100% {
    opacity: 0;
    -webkit-transform: translateX(-30%) translateY(-50%);
            transform: translateX(-30%) translateY(-50%);
  }
}
nav {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  z-index: 9999;
  color: #2980b9;
  background: rgba(255,255,255,0.85);
  text-align: center;
}
@media (max-width: 768px) {
  nav {
    text-align: left;
  }
}
nav li {
  display: inline-block;
  vertical-align: bottom;
}
@media (max-width: 768px) {
  nav li.menu-item {
    display: none;
  }
}
nav .primary {
  display: inline-block;
  -webkit-transition: -webkit-transform 500ms;
  transition: -webkit-transform 500ms;
  transition: transform 500ms;
  transition: transform 500ms, -webkit-transform 500ms;
}
@media (min-width: 1200px) {
  nav .primary {
    -webkit-transform: translateX(-5px);
            transform: translateX(-5px);
  }
}
nav .primary li {
  margin: 20px 10px;
  -webkit-transition: margin-left 500ms, margin-right 500ms;
  transition: margin-left 500ms, margin-right 500ms;
}
@media (min-width: 1200px) {
  nav .primary li {
    margin: 20px;
  }
}
nav .secondary {
  position: absolute;
  top: 0;
  right: 0;
}
nav .secondary li {
  font-size: 0.75rem;
  margin: 16px 20px 0 0;
}
nav .secondary li.lang {
  font-family: $arabic;
  font-weight: 300;
}
nav .secondary li.phone:before {
  font-size: 0.625rem;
  margin-right: 0.375rem;
}
nav .menu-item a {
  position: relative;
}
nav .menu-item a:before {
  content: '';
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  border-bottom: 1px solid #34495e;
  -webkit-transform: scaleX(0);
          transform: scaleX(0);
  -webkit-transition: -webkit-transform 600ms;
  transition: -webkit-transform 600ms;
  transition: transform 600ms;
  transition: transform 600ms, -webkit-transform 600ms;
}
nav .menu-item a:hover:before {
  -webkit-transform: scaleX(1);
          transform: scaleX(1);
}
nav li.logo {
  margin: 16px 20px;
}
nav li.logo a:before {
  display: none;
}
@media (max-width: 768px) {
  nav li.logo {
    margin: 14px 16px;
  }
}
nav li.logo img {
  max-height: 56px;
}
@media (max-width: 768px) {
  nav li.logo img {
    max-height: 40px;
  }
}
#header {
  color: #fff;
}
/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jc3Mvc3R5bGUuc3R5bCIsIm5vZGVfbW9kdWxlcy9zdHlsdXMtbWl4ZXIvbGliL3N0eWx1cy1taXhlci5zdHlsIiwic3JjL2Nzcy9jb250ZW50L2hvbWUvaGVhZGVyLnN0eWwiLCJzcmMvY3NzL2Jhc2UvYm9keS5zdHlsIiwic3JjL2Nzcy9iYXNlL2ljb25zLnN0eWwiLCJzcmMvY3NzL2Jhc2UvbGF5b3V0LnN0eWwiLCJzcmMvY3NzL2Jhc2UvdHlwZS5zdHlsIiwic3JjL2Nzcy9sYXllcnMvbGF5ZXIuc3R5bCIsInNyYy9jc3MvbGF5ZXJzL292ZXJsYXkuc3R5bCIsInNyYy9jc3MvbGF5ZXJzL3ZpZGVvLnN0eWwiLCJzcmMvY3NzL2NvbXBvbmVudHMvYnV0dG9uLnN0eWwiLCJzcmMvY3NzL2NvbXBvbmVudHMvY2FyZC5zdHlsIiwic3JjL2Nzcy9jb21wb25lbnRzL2Zvb3Rlci5zdHlsIiwic3JjL2Nzcy9jb21wb25lbnRzL2xvYWRlci5zdHlsIiwic3JjL2Nzcy9jb21wb25lbnRzL25hdi5zdHlsIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7QUNpQ0U7QUFBTTtBQUFNO0FBQUs7QUFBTTtBQUFRO0FBQVE7QUFBTztBQUNLO0FBQUk7QUFBSTtBQUFJO0FBQUk7QUFBSTtBQUFHO0FBQVk7QUFBSTtBQUNJO0FBQU07QUFBUztBQUFTO0FBQUs7QUFBTTtBQUFLO0FBQ007QUFBSztBQUFJO0FBQUs7QUFBSztBQUFLO0FBQUc7QUFBRztBQUFLO0FBQ1E7QUFBUTtBQUFRO0FBQUs7QUFBSztBQUFJO0FBQUk7QUFDSTtBQUFHO0FBQUc7QUFBTztBQUNLO0FBQUk7QUFBSTtBQUFJO0FBQUk7QUFBRztBQUNXO0FBQU07QUFBTztBQUFPO0FBQ1E7QUFBUztBQUFPO0FBQU87QUFBTztBQUFJO0FBQUk7QUFBRztBQUNVO0FBQU87QUFBUTtBQUFTO0FBQU07QUFDUztBQUFZO0FBQVE7QUFBUTtBQUFPO0FBQ087QUFBSztBQUFRO0FBQU07QUFBUztBQUFR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S0FBWDs7QUFFMEI7QUFBQTtJQUN4QixZQUFXLEtBQVg7OztBWjVFUjtFQUNFLE9BQU0sS0FBTiIsImZpbGUiOiJzdHlsZS5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogU3R5bGVzXG4gKi9cblxuQHJlcXVpcmUgJ3N0eWx1cy1taXhlcidcblxucmVzZXQoKVxuXG5AcmVxdWlyZSAnX19jb25maWcnXG5cbkByZXF1aXJlICdiYXNlLyonXG5AcmVxdWlyZSAnbGF5ZXJzLyonXG5AcmVxdWlyZSAnY29tcG9uZW50cy8qJ1xuQHJlcXVpcmUgJ2NvbnRlbnQvKidcblxuLy8gQHJlcXVpcmUgJ19fdGVtcCdcbiIsInN0cmlwLXVuaXRzKClcclxuICB1bml0KGFyZ3VtZW50cywgJycpXHJcbmFkZC1icmFjZXMoKVxyXG4gIGpvaW4oJycsICcoJywgYXJndW1lbnRzLCAnKScpXHJcbmFkZC1xdW90ZXMoKVxyXG4gIGpvaW4oJycsIGFyZ3VtZW50cylcclxuY3JlYXRlLXN0cmluZygpXHJcbiAgam9pbignLCAnLCBhcmd1bWVudHMpXHJcbmNyZWF0ZS1wcm9wKClcclxuICB1bnF1b3RlKCBqb2luKCcnLCBhcmd1bWVudHMpIClcclxuY3JlYXRlLXZhbCgpXHJcbiAgdW5xdW90ZSggam9pbignJywgYXJndW1lbnRzKSApXHJcbmNyZWF0ZS1ibG9jaygpXHJcbiAgdW5xdW90ZSggam9pbignICcsIGFyZ3VtZW50cykgKVxyXG5jcmVhdGUtb2JqZWN0KClcclxuICBqb2luKCcnLCAneycsIGFyZ3VtZW50cywgJ30nKVxyXG5jcmVhdGUtbGlzdCgpXHJcbiAgdW5xdW90ZSggam9pbignLCAnLCBhcmd1bWVudHMpIClcclxuY3JlYXRlLWFycmF5KClcclxuICBqb2luKCcnLCAnW1wiJywgYXJndW1lbnRzLCAnXCJdJylcclxuY3JlYXRlLWtleSgpXHJcbiAgam9pbignJywgJ1wiJywgYXJndW1lbnRzLCAnXCI6JylcclxuY3JlYXRlLXZhbHVlKClcclxuICBqb2luKCcnLCAnXCInLCBhcmd1bWVudHMsICdcIicpXHJcbl9fbWl4ZXIgPSBqc29uKCcuLi9jb25maWcuanNvbicsIHsgaGFzaDogdHJ1ZSwgbGVhdmUtc3RyaW5nczogdHJ1ZSB9KVxyXG5fX21peGVyX2tleXMgPSBcXFxyXG4gIGF1dG9QcmVmaXhlciwgYnJvd3NlcnMsIGF1dG9JbXBvcnRhbnQsIGF1dG9SZXNldCwgYXV0b05vcm1hbGl6ZSwgdGFibGV0QnJlYWtwb2ludCwgbW9iaWxlQnJlYWtwb2ludCwgb3ZlcndyaXRlQ29sb3JzXHJcbm1peGVyID89IF9fbWl4ZXJcclxuZm9yIGtleSBpbiBfX21peGVyX2tleXNcclxuICB1bmxlc3MoIG1peGVyW2tleV0gKVxyXG4gICAgbWl4ZXJba2V5XSA9IF9fbWl4ZXJba2V5XVxyXG5jb25maWd1cmVQbHVnaW5zKCBtaXhlciApXHJcbnJlc2V0KClcclxuICBodG1sLCBib2R5LCBkaXYsIHNwYW4sIGFwcGxldCwgb2JqZWN0LCBpZnJhbWUsXHJcbiAgaDEsIGgyLCBoMywgaDQsIGg1LCBoNiwgcCwgYmxvY2txdW90ZSwgcHJlLFxyXG4gIGEsIGFiYnIsIGFjcm9ueW0sIGFkZHJlc3MsIGJpZywgY2l0ZSwgY29kZSxcclxuICBkZWwsIGRmbiwgZW0sIGltZywgaW5zLCBrYmQsIHEsIHMsIHNhbXAsXHJcbiAgc21hbGwsIHN0cmlrZSwgc3Ryb25nLCBzdWIsIHN1cCwgdHQsIHZhcixcclxuICBiLCB1LCBpLCBjZW50ZXIsXHJcbiAgZGwsIGR0LCBkZCwgb2wsIHVsLCBsaSxcclxuICBmaWVsZHNldCwgZm9ybSwgbGFiZWwsIGxlZ2VuZCxcclxuICB0YWJsZSwgY2FwdGlvbiwgdGJvZHksIHRmb290LCB0aGVhZCwgdHIsIHRoLCB0ZCxcclxuICBhcnRpY2xlLCBhc2lkZSwgY2FudmFzLCBkZXRhaWxzLCBlbWJlZCxcclxuICBmaWd1cmUsIGZpZ2NhcHRpb24sIGZvb3RlciwgaGVhZGVyLCBoZ3JvdXAsXHJcbiAgbWVudSwgbmF2LCBvdXRwdXQsIHJ1YnksIHNlY3Rpb24sIHN1bW1hcnksXHJcbiAgdGltZSwgbWFyaywgYXVkaW8sIHZpZGVvXHJcbiAgICBtYXJnaW4gMFxyXG4gICAgcGFkZGluZyAwXHJcbiAgICBib3JkZXIgMFxyXG4gICAgZm9udC1zaXplIDEwMCVcclxuICAgIGZvbnQgaW5oZXJpdFxyXG4gICAgdmVydGljYWwtYWxpZ24gYmFzZWxpbmVcclxuICBhcnRpY2xlLCBhc2lkZSwgZGV0YWlscywgZmlnY2FwdGlvbiwgZmlndXJlLFxyXG4gIGZvb3RlciwgaGVhZGVyLCBoZ3JvdXAsIG1lbnUsIG5hdiwgc2VjdGlvblxyXG4gICAgZGlzcGxheSBibG9ja1xyXG4gIGJvZHlcclxuICAgIGxpbmUtaGVpZ2h0IDFcclxuICBvbCwgdWxcclxuICAgIGxpc3Qtc3R5bGUgbm9uZVxyXG4gIGJsb2NrcXVvdGUsIHFcclxuICAgIHF1b3RlcyBub25lXHJcbiAgYmxvY2txdW90ZTpiZWZvcmUsIGJsb2NrcXVvdGU6YWZ0ZXIsXHJcbiAgcTpiZWZvcmUsIHE6YWZ0ZXJcclxuICAgIGNvbnRlbnQgJydcclxuICAgIGNvbnRlbnQgbm9uZVxyXG4gIHRhYmxlXHJcbiAgICBib3JkZXItY29sbGFwc2UgY29sbGFwc2VcclxuICAgIGJvcmRlci1zcGFjaW5nIDBcclxuICAqXHJcbiAgKjpiZWZvcmVcclxuICAqOmFmdGVyXHJcbiAgICBib3gtc2l6aW5nIGJvcmRlci1ib3hcclxucmVzZXQoKSBpZiBhdXRvLXJlc2V0ID09IFwiYWxsXCJcclxucmVzZXQtYmFzaWNzKClcclxuICBAY2hhcnNldCBcIlVURi04XCJcclxuICBodG1sLCBib2R5LCBkaXYsIHNwYW4sIGlmcmFtZVxyXG4gIGgxLCBoMiwgaDMsIGg0LCBoNSwgaDYsIHBcclxuICBibG9ja3F1b3RlLCBwcmUsIHN0cm9uZywgZW0sIHVcclxuICBmb3JtLCBsYWJlbCwgdWwsIG9sLCBsaVxyXG4gIGhlYWRlciwgZm9vdGVyLCBtZW51LCBuYXZcclxuICBzZWN0aW9uLCBhcnRpY2xlLCB0aXRsZVxyXG4gIGF1ZGlvLCB2aWRlbywgaW1nXHJcbiAgaWZyYW1lLCBlbWJlZFxyXG4gIGEsIGJ1dHRvblxyXG4gICAgbWFyZ2luIDBcclxuICAgIHBhZGRpbmcgMFxyXG4gICAgYm9yZGVyIDBcclxuICAqXHJcbiAgKjpiZWZvcmVcclxuICAqOmFmdGVyXHJcbiAgICBib3gtc2l6aW5nIGJvcmRlci1ib3hcclxucmVzZXQtYmFzaWNzKCkgaWYgYXV0by1yZXNldCA9PSBcImJhc2ljc1wiXHJcbm5vcm1hbGl6ZSgpXHJcbiAgaHRtbFxyXG4gICAgZm9udC1mYW1pbHkgc2Fucy1zZXJpZlxyXG4gICAgZm9udC1zaXplIDEwMCVcclxuICAgIC1tcy10ZXh0LXNpemUtYWRqdXN0IDEwMCVcclxuICAgIC13ZWJraXQtdGV4dC1zaXplLWFkanVzdCAxMDAlXHJcbiAgYm9keVxyXG4gICAgbWFyZ2luIDBcclxuICBhcnRpY2xlLFxyXG4gIGFzaWRlLFxyXG4gIGRldGFpbHMsXHJcbiAgZmlnY2FwdGlvbixcclxuICBmaWd1cmUsXHJcbiAgZm9vdGVyLFxyXG4gIGhlYWRlcixcclxuICBtYWluLFxyXG4gIG1lbnUsXHJcbiAgbmF2LFxyXG4gIHNlY3Rpb24sXHJcbiAgc3VtbWFyeVxyXG4gICAgZGlzcGxheSBibG9ja1xyXG4gIGgxLCBoMiwgaDMsIGg0LCBoNSwgaDYsIHBcclxuICBhLCBidXR0b24sIHVsLCBvbCwgbGksIGxhYmVsXHJcbiAgICAtd2Via2l0LWZvbnQtc21vb3RoaW5nIGFudGlhbGlhc2VkXHJcbiAgICAtbW96LW9zeC1mb250LXNtb290aGluZyBncmF5c2NhbGVcclxuICBhdWRpbywgY2FudmFzLCBwcm9ncmVzcywgdmlkZW9cclxuICAgIGRpc3BsYXkgaW5saW5lLWJsb2NrXHJcbiAgICB2ZXJ0aWNhbC1hbGlnbiBiYXNlbGluZVxyXG4gIGF1ZGlvXHJcbiAgICAmOm5vdChbY29udHJvbHNdKVxyXG4gICAgICBkaXNwbGF5IG5vbmVcclxuICAgICAgaGVpZ2h0IDBcclxuICBbaGlkZGVuXSwgdGVtcGxhdGVcclxuICAgIGRpc3BsYXkgbm9uZVxyXG4gIGFcclxuICAgIGJhY2tncm91bmQtY29sb3IgdHJhbnNwYXJlbnRcclxuICBhOmFjdGl2ZVxyXG4gIGE6aG92ZXJcclxuICAgIG91dGxpbmUgMFxyXG4gIGEsIGJ1dHRvblxyXG4gICAgdGV4dC1kZWNvcmF0aW9uIG5vbmVcclxuICAgIGJvcmRlciBub25lXHJcbiAgICBvdXRsaW5lIG5vbmVcclxuICBhOmhvdmVyXHJcbiAgYnV0dG9uOmhvdmVyXHJcbiAgICBjdXJzb3IgcG9pbnRlclxyXG4gIGFiYnJbdGl0bGVdXHJcbiAgICBib3JkZXItYm90dG9tIG5vbmVcclxuICAgIHRleHQtZGVjb3JhdGlvbiB1bmRlcmxpbmVcclxuICAgIHRleHQtZGVjb3JhdGlvbiB1bmRlcmxpbmUgZG90dGVkXHJcbiAgYiwgc3Ryb25nXHJcbiAgICBmb250LXdlaWdodCBpbmhlcml0XHJcbiAgICBmb250LXdlaWdodCBib2xkZXJcclxuICBkZm5cclxuICAgIGZvbnQtc3R5bGUgaXRhbGljXHJcbiAgaDFcclxuICAgIGZvbnQtc2l6ZSAyZW1cclxuICAgIG1hcmdpbiAwLjY3ZW0gMFxyXG4gIG1hcmtcclxuICAgIGJhY2tncm91bmQtY29sb3IgI2ZmMFxyXG4gICAgY29sb3IgIzAwMFxyXG4gIHNtYWxsXHJcbiAgICBmb250LXNpemUgODAlXHJcbiAgc3ViLCBzdXBcclxuICAgIGZvbnQtc2l6ZSA3NSVcclxuICAgIGxpbmUtaGVpZ2h0IDBcclxuICAgIHBvc2l0aW9uIHJlbGF0aXZlXHJcbiAgICB2ZXJ0aWNhbC1hbGlnbiBiYXNlbGluZVxyXG4gIHN1cFxyXG4gICAgdG9wIC0wLjVlbVxyXG4gIHN1YlxyXG4gICAgYm90dG9tIC0wLjI1ZW1cclxuICBpbWdcclxuICAgIGJvcmRlciAwXHJcbiAgc3ZnOm5vdCg6cm9vdClcclxuICAgIG92ZXJmbG93IGhpZGRlblxyXG4gIGZpZ3VyZVxyXG4gICAgbWFyZ2luIDFlbSA0MHB4XHJcbiAgaHJcclxuICAgIGJveC1zaXppbmcgY29udGVudC1ib3hcclxuICAgIGhlaWdodCAwXHJcbiAgICBvdmVyZmxvdyB2aXNpYmxlXHJcbiAgcHJlXHJcbiAgICBvdmVyZmxvdyBhdXRvXHJcbiAgY29kZSwga2JkLCBwcmUsIHNhbXBcclxuICAgIGZvbnQtZmFtaWx5IG1vbm9zcGFjZSwgbW9ub3NwYWNlXHJcbiAgICBmb250LXNpemUgMWVtXHJcbiAgYnV0dG9uLCBpbnB1dCwgb3B0Z3JvdXAsIHNlbGVjdCwgdGV4dGFyZWFcclxuICAgIGZvbnQgaW5oZXJpdFxyXG4gICAgbWFyZ2luIDBcclxuICBidXR0b25cclxuICAgIG92ZXJmbG93IHZpc2libGVcclxuICBidXR0b24sXHJcbiAgc2VsZWN0XHJcbiAgICB0ZXh0LXRyYW5zZm9ybSBub25lXHJcbiAgYnV0dG9uXHJcbiAgaHRtbCBpbnB1dFt0eXBlPVwiYnV0dG9uXCJdXHJcbiAgaW5wdXRbdHlwZT1cInJlc2V0XCJdXHJcbiAgaW5wdXRbdHlwZT1cInN1Ym1pdFwiXVxyXG4gICAgLXdlYmtpdC1hcHBlYXJhbmNlIGJ1dHRvblxyXG4gICAgY3Vyc29yIHBvaW50ZXJcclxuICBidXR0b25bZGlzYWJsZWRdXHJcbiAgaHRtbCBpbnB1dFtkaXNhYmxlZF1cclxuICAgIGN1cnNvciBkZWZhdWx0XHJcbiAgYnV0dG9uOjotbW96LWZvY3VzLWlubmVyXHJcbiAgaW5wdXQ6Oi1tb3otZm9jdXMtaW5uZXJcclxuICAgIGJvcmRlciAwXHJcbiAgICBwYWRkaW5nIDBcclxuICBidXR0b246LW1vei1mb2N1c3JpbmdcclxuICBpbnB1dDotbW96LWZvY3VzcmluZ1xyXG4gICAgb3V0bGluZSAxcHggZG90dGVkIEJ1dHRvblRleHRcclxuICBpbnB1dFxyXG4gICAgbGluZS1oZWlnaHQgbm9ybWFsXHJcbiAgaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdXHJcbiAgaW5wdXRbdHlwZT1cInJhZGlvXCJdXHJcbiAgICBib3gtc2l6aW5nIGJvcmRlci1ib3hcclxuICAgIHBhZGRpbmcgMFxyXG4gIGlucHV0W3R5cGU9XCJudW1iZXJcIl06Oi13ZWJraXQtaW5uZXItc3Bpbi1idXR0b25cclxuICBpbnB1dFt0eXBlPVwibnVtYmVyXCJdOjotd2Via2l0LW91dGVyLXNwaW4tYnV0dG9uXHJcbiAgICBoZWlnaHQgYXV0b1xyXG4gIGlucHV0W3R5cGU9XCJzZWFyY2hcIl1cclxuICAgIC13ZWJraXQtYXBwZWFyYW5jZSB0ZXh0ZmllbGRcclxuICBpbnB1dFt0eXBlPVwic2VhcmNoXCJdOjotd2Via2l0LXNlYXJjaC1jYW5jZWwtYnV0dG9uXHJcbiAgaW5wdXRbdHlwZT1cInNlYXJjaFwiXTo6LXdlYmtpdC1zZWFyY2gtZGVjb3JhdGlvblxyXG4gICAgLXdlYmtpdC1hcHBlYXJhbmNlIG5vbmVcclxuICBmaWVsZHNldFxyXG4gICAgYm9yZGVyIDFweCBzb2xpZCAjYzBjMGMwXHJcbiAgICBtYXJnaW4gMCAycHhcclxuICAgIHBhZGRpbmcgMC4zNWVtIDAuNjI1ZW0gMC43NWVtXHJcbiAgbGVnZW5kXHJcbiAgICBib3JkZXIgMFxyXG4gICAgcGFkZGluZyAwXHJcbiAgdGV4dGFyZWFcclxuICAgIG92ZXJmbG93IGF1dG9cclxuICBvcHRncm91cFxyXG4gICAgZm9udC13ZWlnaHQgYm9sZFxyXG5ub3JtYWxpemUoKSBpZiBhdXRvLW5vcm1hbGl6ZSA9PSBcImFsbFwiXHJcbm5vcm1hbGl6ZS1iYXNpY3MoKVxyXG4gIGh0bWxcclxuICAgIGZvbnQtZmFtaWx5IHNhbnMtc2VyaWZcclxuICAgIGZvbnQtc2l6ZSAxMDAlXHJcbiAgICAtbXMtdGV4dC1zaXplLWFkanVzdCAxMDAlXHJcbiAgICAtd2Via2l0LXRleHQtc2l6ZS1hZGp1c3QgMTAwJVxyXG4gIGgxLCBoMiwgaDMsIGg0LCBoNSwgaDYsIHBcclxuICBhLCBidXR0b24sIHVsLCBvbCwgbGksIGxhYmVsXHJcbiAgICAtd2Via2l0LWZvbnQtc21vb3RoaW5nIGFudGlhbGlhc2VkXHJcbiAgICAtbW96LW9zeC1mb250LXNtb290aGluZyBncmF5c2NhbGVcclxuICBhLCBidXR0b25cclxuICAgIHRleHQtZGVjb3JhdGlvbiBub25lXHJcbiAgICBib3JkZXIgbm9uZVxyXG4gICAgb3V0bGluZSBub25lXHJcbiAgYTpob3ZlclxyXG4gIGJ1dHRvbjpob3ZlclxyXG4gICAgY3Vyc29yIHBvaW50ZXJcclxubm9ybWFsaXplLWJhc2ljcygpIGlmIGF1dG8tbm9ybWFsaXplID09IFwiYmFzaWNzXCJcclxuJHJlZCAgICA9IGhzbCgwLCA5NSUsIDU1JSlcclxuJGdyZWVuICA9IGhzbCg5NiwgNjElLCA1MyUpXHJcbiRibHVlICAgPSBoc2woMjAwLCA5NiUsIDQ0JSlcclxuJHllbGxvdyA9IGhzbCg1MSwgOTQlLCA1MiUpXHJcbiRncmF5MSA9IGhzbCgwLDAlLDEwJSlcclxuJGdyYXkyID0gaHNsKDAsMCUsMjAlKVxyXG4kZ3JheTMgPSBoc2woMCwwJSwzMCUpXHJcbiRncmF5NCA9IGhzbCgwLDAlLDQwJSlcclxuJGdyYXk1ID0gaHNsKDAsMCUsNTAlKVxyXG4kZ3JheTYgPSBoc2woMCwwJSw2MCUpXHJcbiRncmF5NyA9IGhzbCgwLDAlLDcwJSlcclxuJGdyYXk4ID0gaHNsKDAsMCUsODAlKVxyXG4kZ3JheTkgPSBoc2woMCwwJSw5MCUpXHJcbiRzYXBoaXJlICAgICAgID0gaHNsKDE4MSwgMTAwJSwgMzglKVxyXG4kZ3JlZW4tc2VhICAgICA9IGhzbCgxNjksIDEwMCUsIDMzJSlcclxuJHRlYWwgICAgICAgICAgPSBoc2woMTY4LCAxMDAlLCAzOCUpXHJcbiRuaWFnYXJhICAgICAgID0gaHNsKDE3MiwgMTAwJSwgMzYlKVxyXG4kZm9yZXN0LWdyZWVuICA9IGhzbCgxNTIsIDEwMCUsIDM2JSlcclxuJGVtZXJhbGQgICAgICAgPSBoc2woMTUyLCAxMDAlLCA0MiUpXHJcbiRzcHJpbmctZ3Jhc3MgID0gaHNsKDk2LCA2MSUsIDUzJSlcclxuJHNxdWVlemVkLWxpbWUgPSBoc2woNzcsIDY5JSwgNTMlKVxyXG4kY3JlYW0tY2FuICAgICA9IGhzbCg0NywgNjYlLCA2MyUpXHJcbiRyaXBlLWxlbW9uICAgID0gaHNsKDUxLCA5NCUsIDUyJSlcclxuJHN1bmZsb3dlciAgICAgPSBoc2woNDksIDEwMCUsIDQ4JSlcclxuJG9yYW5nZSAgICAgICAgPSBoc2woMzYsIDEwMCUsIDUwJSlcclxuJGZpcmUtYnVzaCAgICAgPSBoc2woMjEsIDg2JSwgNTUlKVxyXG4kY2Fycm90ICAgICAgICA9IGhzbCgyOSwgMTAwJSwgNDclKVxyXG4kcHVtcGtpbiAgICAgICA9IGhzbCgxNywgMTAwJSwgNDQlKVxyXG4kcG9tZWdyYW5hdGUgICA9IGhzbCgzNTYsIDkzJSwgNDIlKVxyXG4kdmFsZW5jaWEgICAgICA9IGhzbCgzLCA4NCUsIDU4JSlcclxuJGFsaXphcmluICAgICAgPSBoc2woMzU5LCA5NCUsIDU1JSlcclxuJHJlZC1kZWxpY2lvdXMgPSBoc2woMCwgMTAwJSwgNTAlKVxyXG4kY2FuZHktY2FhbmUgICA9IGhzbCgzNDUsIDEwMCUsIDUwJSlcclxuJGljZS1jcmVhbSAgICAgPSBoc2woMzMyLCAxMDAlLCA1MCUpXHJcbiRwaW5rICAgICAgICAgID0gaHNsKDMzMiwgMTAwJSwgNTAlKVxyXG4kbGF2ZW5kZXIgICAgICA9IGhzbCgyOTEsIDQ4JSwgNjQlKVxyXG4kYW1ldGh5c3QgICAgICA9IGhzbCgyOTIsIDQ4JSwgNDglKVxyXG4kd2lzdGVyaWEgICAgICA9IGhzbCgyOTMsIDczJSwgMzklKVxyXG4kcHVycGxlICAgICAgICA9IGhzbCgyOTIsIDQ4JSwgNDglKVxyXG4kbmF2eSAgICAgICAgICA9IGhzbCgyNDYsIDU1JSwgNTAlKVxyXG4kZmFpcnlsYW5kICAgICA9IGhzbCgyMDAsIDk2JSwgNDQlKVxyXG4kc2hha2VzcGVhcmUgICA9IGhzbCgxOTYsIDUxJSwgNjQlKVxyXG4kYXF1YSAgICAgICAgICA9IGhzbCgxODEsIDQ1JSwgNTglKVxyXG4kbHluY2ggICAgICAgICA9IGhzbCgyMDEsIDMwJSwgNjIlKVxyXG4kc2lsdmVyICAgICAgICA9IGhzbCgyMDIsIDklLCA3NiUpXHJcbiRjb25jcmV0ZSAgICAgID0gaHNsKDE4MCwgNyUsIDUyJSlcclxuJG1pZG5pZ2h0LWJsdWUgPSBoc2woMjExLCAzMiUsIDI0JSlcclxuJGJsYWNrICAgICAgICAgPSBoc2woMTkwLCA2JSwgMTklKVxyXG4kbWFjY2hpYXRvICAgICA9IGhzbCgzMywgNDAlLCA0NCUpXHJcbiRsYXR0ZSAgICAgICAgID0gaHNsKDM4LCAzOSUsIDY0JSlcclxuJGRhcmstY3JlYW0gICAgPSBoc2woNDAsIDE4JSwgNjclKVxyXG4kYnJvd24gICAgICAgICA9IGhzbCgzMywgNDAlLCA0NCUpXHJcbmlmIG92ZXJ3cml0ZS1jb2xvcnNcclxuICByZWQgICAgPSAkcmVkXHJcbiAgZ3JlZW4gID0gJGdyZWVuXHJcbiAgYmx1ZSAgID0gJGJsdWVcclxuICB5ZWxsb3cgPSAkeWVsbG93XHJcbiAgZ3JheTEgPSAkZ3JheTFcclxuICBncmF5MiA9ICRncmF5MlxyXG4gIGdyYXkzID0gJGdyYXkzXHJcbiAgZ3JheTQgPSAkZ3JheTRcclxuICBncmF5NSA9ICRncmF5NVxyXG4gIGdyYXk2ID0gJGdyYXk2XHJcbiAgZ3JheTcgPSAkZ3JheTdcclxuICBncmF5OCA9ICRncmF5OFxyXG4gIGdyYXk5ID0gJGdyYXk5XHJcbiAgc2FwaGlyZSAgICAgICA9ICRzYXBoaXJlXHJcbiAgZ3JlZW4tc2VhICAgICA9ICRncmVlbi1zZWFcclxuICB0ZWFsICAgICAgICAgID0gJHRlYWxcclxuICBuaWFnYXJhICAgICAgID0gJG5pYWdhcmFcclxuICBmb3Jlc3QtZ3JlZW4gID0gJGZvcmVzdC1ncmVlblxyXG4gIGVtZXJhbGQgICAgICAgPSAkZW1lcmFsZFxyXG4gIHNwcmluZy1ncmFzcyAgPSAkc3ByaW5nLWdyYXNzXHJcbiAgc3F1ZWV6ZWQtbGltZSA9ICRzcXVlZXplZC1saW1lXHJcbiAgY3JlYW0tY2FuICAgICA9ICRjcmVhbS1jYW5cclxuICByaXBlLWxlbW9uICAgID0gJHJpcGUtbGVtb25cclxuICBzdW5mbG93ZXIgICAgID0gJHN1bmZsb3dlclxyXG4gIG9yYW5nZSAgICAgICAgPSAkb3JhbmdlXHJcbiAgZmlyZS1idXNoICAgICA9ICRmaXJlLWJ1c2hcclxuICBjYXJyb3QgICAgICAgID0gJGNhcnJvdFxyXG4gIHB1bXBraW4gICAgICAgPSAkcHVtcGtpblxyXG4gIHBvbWVncmFuYXRlICAgPSAkcG9tZWdyYW5hdFxyXG4gIHZhbGVuY2lhICAgICAgPSAkdmFsZW5jaWFcclxuICBhbGl6YXJpbiAgICAgID0gJGFsaXphcmluXHJcbiAgcmVkLWRlbGljaW91cyA9ICRyZWQtZGVsaWNpb3VzXHJcbiAgY2FuZHktY2FhbmUgICA9ICRjYW5keS1jYWFuZVxyXG4gIGljZS1jcmVhbSAgICAgPSAkaWNlLWNyZWFtXHJcbiAgcGluayAgICAgICAgICA9ICRwaW5rXHJcbiAgbGF2ZW5kZXIgICAgICA9ICRsYXZlbmRlclxyXG4gIGFtZXRoeXN0ICAgICAgPSAkYW1ldGh5c3RcclxuICB3aXN0ZXJpYSAgICAgID0gJHdpc3RlcmlhXHJcbiAgcHVycGxlICAgICAgICA9ICRwdXJwbGVcclxuICBuYXZ5ICAgICAgICAgID0gJG5hdnlcclxuICBmYWlyeWxhbmQgICAgID0gJGZhaXJ5bGFuZFxyXG4gIHNoYWtlc3BlYXJlICAgPSAkc2hha2VzcGVhcmVcclxuICBhcXVhICAgICAgICAgID0gJGFxdWFcclxuICBseW5jaCAgICAgICAgID0gJGx5bmNoXHJcbiAgc2lsdmVyICAgICAgICA9ICRzaWx2ZXJcclxuICBjb25jcmV0ZSAgICAgID0gJGNvbmNyZXRlXHJcbiAgbWlkbmlnaHQtYmx1ZSA9ICRtaWRuaWdodC1ibHVlXHJcbiAgYmxhY2sgICAgICAgICA9ICRibGFja1xyXG4gIG1hY2NoaWF0byAgICAgPSAkbWFjY2hpYXRvXHJcbiAgbGF0dGUgICAgICAgICA9ICRsYXR0ZVxyXG4gIGRhcmstY3JlYW0gICAgPSAkZGFyay1jcmVhbVxyXG4gIGJyb3duICAgICAgICAgPSAkYnJvd25cclxuZWFzZUluUXVhZCAgICAgPSBjdWJpYy1iZXppZXIoMC41NTAsIDAuMDg1LCAwLjY4MCwgMC41MzApXHJcbmVhc2VJbkN1YmljICAgID0gY3ViaWMtYmV6aWVyKDAuNTUwLCAwLjA1NSwgMC42NzUsIDAuMTkwKVxyXG5lYXNlSW5RdWFydCAgICA9IGN1YmljLWJlemllcigwLjg5NSwgMC4wMzAsIDAuNjg1LCAwLjIyMClcclxuZWFzZUluUXVpbnQgICAgPSBjdWJpYy1iZXppZXIoMC43NTUsIDAuMDUwLCAwLjg1NSwgMC4wNjApXHJcbmVhc2VJblNpbmUgICAgID0gY3ViaWMtYmV6aWVyKDAuNDcwLCAwLjAwMCwgMC43NDUsIDAuNzE1KVxyXG5lYXNlSW5FeHBvICAgICA9IGN1YmljLWJlemllcigwLjk1MCwgMC4wNTAsIDAuNzk1LCAwLjAzNSlcclxuZWFzZUluQ2lyYyAgICAgPSBjdWJpYy1iZXppZXIoMC42MDAsIDAuMDQwLCAwLjk4MCwgMC4zMzUpXHJcbmVhc2VJbkJhY2sgICAgID0gY3ViaWMtYmV6aWVyKDAuNjAwLCAtMC4yOCwgMC43MzUsIDAuMDQ1KVxyXG5lYXNlT3V0UXVhZCAgICA9IGN1YmljLWJlemllcigwLjI1MCwgMC40NjAsIDAuNDUwLCAwLjk0MClcclxuZWFzZU91dEN1YmljICAgPSBjdWJpYy1iZXppZXIoMC4yMTUsIDAuNjEwLCAwLjM1NSwgMS4wMDApXHJcbmVhc2VPdXRRdWFydCAgID0gY3ViaWMtYmV6aWVyKDAuMTY1LCAwLjg0MCwgMC40NDAsIDEuMDAwKVxyXG5lYXNlT3V0UXVpbnQgICA9IGN1YmljLWJlemllcigwLjIzMCwgMS4wMDAsIDAuMzIwLCAxLjAwMClcclxuZWFzZU91dFNpbmUgICAgPSBjdWJpYy1iZXppZXIoMC4zOTAsIDAuNTc1LCAwLjU2NSwgMS4wMDApXHJcbmVhc2VPdXRFeHBvICAgID0gY3ViaWMtYmV6aWVyKDAuMTkwLCAxLjAwMCwgMC4yMjAsIDEuMDAwKVxyXG5lYXNlT3V0Q2lyYyAgICA9IGN1YmljLWJlemllcigwLjA3NSwgMC44MjAsIDAuMTY1LCAxLjAwMClcclxuZWFzZU91dEJhY2sgICAgPSBjdWJpYy1iZXppZXIoMC4xNzUsIDAuODg1LCAwLjMyMCwgMS4yNzUpXHJcbmVhc2VJbk91dFF1YWQgID0gY3ViaWMtYmV6aWVyKDAuNDU1LCAwLjAzMCwgMC41MTUsIDAuOTU1KVxyXG5lYXNlSW5PdXRDdWJpYyA9IGN1YmljLWJlemllcigwLjY0NSwgMC4wNDUsIDAuMzU1LCAxLjAwMClcclxuZWFzZUluT3V0UXVhcnQgPSBjdWJpYy1iZXppZXIoMC43NzAsIDAuMDAwLCAwLjE3NSwgMS4wMDApXHJcbmVhc2VJbk91dFF1aW50ID0gY3ViaWMtYmV6aWVyKDAuODYwLCAwLjAwMCwgMC4wNzAsIDEuMDAwKVxyXG5lYXNlSW5PdXRTaW5lICA9IGN1YmljLWJlemllcigwLjQ0NSwgMC4wNTAsIDAuNTUwLCAwLjk1MClcclxuZWFzZUluT3V0RXhwbyAgPSBjdWJpYy1iZXppZXIoMS4wMDAsIDAuMDAwLCAwLjAwMCwgMS4wMDApXHJcbmVhc2VJbk91dENpcmMgID0gY3ViaWMtYmV6aWVyKDAuNzg1LCAwLjEzNSwgMC4xNTAsIDAuODYwKVxyXG5lYXNlSW5PdXRCYWNrICA9IGN1YmljLWJlemllcigwLjY4MCwgLTAuNTUsIDAuMjY1LCAxLjU1MClcclxuc2NyID0gJ29ubHkgc2NyZWVuIGFuZCdcclxuc21hbGwgPSAobW9iaWxlLWJyZWFrcG9pbnQgLSAxKVxyXG5zbWFsbCA9IGpvaW4oJycsICdtYXgtd2lkdGg6Jywgc21hbGwpXHJcbnNtYWxsID0gYWRkLWJyYWNlcyhzbWFsbClcclxuc21hbGwgPSBqb2luKCcgJywgc2NyLCBzbWFsbClcclxuc21hbGwgPSB1bnF1b3RlKHNtYWxsKVxyXG5tZWRpdW0gPSAodGFibGV0LWJyZWFrcG9pbnQgLSAxKVxyXG5tZWRpdW0gPSBqb2luKCcnLCAnbWF4LXdpZHRoOicsIG1lZGl1bSlcclxubWVkaXVtID0gYWRkLWJyYWNlcyhtZWRpdW0pXHJcbm1lZGl1bSA9IGpvaW4oJyAnLCBzY3IsIG1lZGl1bSlcclxubWVkaXVtID0gdW5xdW90ZShtZWRpdW0pXHJcbmxhcmdlID0gdGFibGV0LWJyZWFrcG9pbnRcclxubGFyZ2UgPSBqb2luKCcnLCAnbWluLXdpZHRoOicsIGxhcmdlKVxyXG5sYXJnZSA9IGFkZC1icmFjZXMobGFyZ2UpXHJcbmxhcmdlID0gam9pbignICcsIHNjciwgbGFyZ2UpXHJcbmxhcmdlID0gdW5xdW90ZShsYXJnZSlcclxubW9iaWxlID0gKG1vYmlsZS1icmVha3BvaW50IC0gMSlcclxubW9iaWxlID0gam9pbignJywgJ21heC1kZXZpY2Utd2lkdGg6JywgbW9iaWxlKVxyXG5tb2JpbGUgPSBhZGQtYnJhY2VzKG1vYmlsZSlcclxubW9iaWxlID0gam9pbignICcsIHNjciwgbW9iaWxlKVxyXG5tb2JpbGUgPSB1bnF1b3RlKG1vYmlsZSlcclxudGFibGV0ID0gKHRhYmxldC1icmVha3BvaW50IC0gMSlcclxudGFibGV0ID0gam9pbignJywgJ21heC1kZXZpY2Utd2lkdGg6JywgdGFibGV0KVxyXG50YWJsZXQgPSBhZGQtYnJhY2VzKHRhYmxldClcclxudGFibGV0ID0gam9pbignICcsIHNjciwgdGFibGV0KVxyXG50YWJsZXQgPSB1bnF1b3RlKHRhYmxldClcclxuZGVza3RvcCA9IHRhYmxldC1icmVha3BvaW50XHJcbmRlc2t0b3AgPSBqb2luKCcnLCAnbWluLWRldmljZS13aWR0aDonLCBkZXNrdG9wKVxyXG5kZXNrdG9wID0gYWRkLWJyYWNlcyhkZXNrdG9wKVxyXG5kZXNrdG9wID0gam9pbignICcsIHNjciwgZGVza3RvcClcclxuZGVza3RvcCA9IHVucXVvdGUoZGVza3RvcClcclxuX19lYXNlKClcclxuICB0eXBlID0gY2FsbGVkLWZyb21cclxuICBzdHJlbmd0aCA9IHVuaXQoYXJndW1lbnRzLCAnJylcclxuICBpZiB0eXBlID09ICdlYXNlSW4nXHJcbiAgICB4MSA9IChzdHJlbmd0aCAvIDEwMClcclxuICAgIHgyID0gMFxyXG4gICAgeTEgPSAxXHJcbiAgICB5MiA9ICggKDEwMCAtIHN0cmVuZ3RoKSAvIDEwMCApXHJcbiAgZWxzZSBpZiB0eXBlID09ICdlYXNlT3V0J1xyXG4gICAgeDEgPSAwXHJcbiAgICB4MiA9IChzdHJlbmd0aC8xMDApXHJcbiAgICB5MSA9ICggKDEwMCAtIHN0cmVuZ3RoKSAvIDEwMClcclxuICAgIHkyID0gMVxyXG4gIGVsc2VcclxuICAgIHgxID0gKHN0cmVuZ3RoIC8gMTAwKVxyXG4gICAgeDIgPSAwXHJcbiAgICB5MSA9ICggKDEwMCAtIHN0cmVuZ3RoKSAvIDEwMCApXHJcbiAgICB5MiA9IDFcclxuICBjdWJpYy1iZXppZXIoeDEsIHgyLCB5MSwgeTIpXHJcbmVhc2VJbigpXHJcbiAgX19lYXNlKGFyZ3VtZW50cylcclxuZWFzZU91dCgpXHJcbiAgX19lYXNlKGFyZ3VtZW50cylcclxuZWFzZUluT3V0KClcclxuICBfX2Vhc2UoYXJndW1lbnRzKVxyXG5lYXNlID0gZWFzZUluT3V0XHJcbl9fY29udmVydChzaXplLCBiYXNlKVxyXG4gIGJhc2UgPSBzdHJpcC11bml0cyhiYXNlKVxyXG4gIHZhbHVlcyA9ICgpXHJcbiAgZm9yIGluZGV4IGluIHNpemVcclxuICAgIHZhbCA9IHN0cmlwLXVuaXRzKGluZGV4KVxyXG4gICAgdmFsID0gdmFsL2Jhc2VcclxuICAgIHZhbCA9IHVuaXQodmFsLCBjYWxsZWQtZnJvbSlcclxuICAgIHB1c2godmFsdWVzLCB2YWwpXHJcbiAgdmFsdWVzXHJcbmVtKHNpemUsIGJhc2UgPSAxNilcclxuICBfX2NvbnZlcnQoc2l6ZSwgYmFzZSlcclxucmVtKHNpemUsIGJhc2UgPSAxNilcclxuICBfX2NvbnZlcnQoc2l6ZSwgYmFzZSlcclxucGVyY2VudCh2YWx1ZSwgdG90YWwpXHJcbiAgdmFsdWUgPSBzdHJpcC11bml0cyh2YWx1ZSlcclxuICB0b3RhbCA9IHN0cmlwLXVuaXRzKHRvdGFsKVxyXG4gICh2YWx1ZS90b3RhbCkgKiAxMDAlXHJcbnBlcmNlbnRhZ2UgPSBwZXJjZW50XHJcbnJhbmRvbShtaW4sbWF4KVxyXG4gIHJldHVybiBmbG9vciggbWF0aCgwLCAncmFuZG9tJykqKG1heCAtIG1pbiArIDEpICsgbWluIClcclxudHJhbnNwYXJlbnQoKVxyXG4gIHJnYmEoYXJndW1lbnRzWzBdLCBhcmd1bWVudHNbMV0pXHJcbmFuaW1hdGUob3B0aW9ucywga2V5ZnJhbWVzLi4uKVxyXG4gIG9wdGlvbnNDaGVjayA9IGpvaW4oJywgJywgb3B0aW9ucylcclxuICBjdXN0b21OYW1lQXZhaWxhYmxlID0gdHJ1ZVxyXG4gIGlmIChcclxuICAgIG1hdGNoKCdeXFxkfF5lYXNlfF5ib3VuY2V8XmVsYXN0aWN8XmxpbmVhcnxeaW5maW5pdGV8Xm5vcm1hbHxeYWx0ZXJuYXRlfF5mb3J3YXJkc3xeYmFja3dhcmRzfF5ib3RofF5zdGVwc1xcKHxeY29udGludW91cycsIG9wdGlvbnNDaGVjaylcclxuICApXHJcbiAgICBjdXN0b21OYW1lQXZhaWxhYmxlID0gZmFsc2VcclxuICBjb250aW51b3VzQXZhaWxhYmxlID0gZmFsc2VcclxuICBpZiAoIG1hdGNoKCdjb250aW51b3VzJywgb3B0aW9uc0NoZWNrKSApXHJcbiAgICBjb250aW51b3VzQXZhaWxhYmxlID0gdHJ1ZVxyXG4gIGlmICggY3VzdG9tTmFtZUF2YWlsYWJsZSApXHJcbiAgICBuYW1lID0gb3B0aW9uc1swXVxyXG4gIGVsc2VcclxuICAgIHNlbGVjdG9yID0gc2VsZWN0b3IoKVxyXG4gICAgc2VsZWN0b3IgPSBcXFxyXG4gICAgICByZXBsYWNlKCc6YmVmb3JlfDphZnRlcnw6aG92ZXJ8OmFjdGl2ZXw6dmlzaXRlZHw6dGFyZ2V0JywgJycsIHNlbGVjdG9yKVxyXG4gICAgc2VsZWN0b3IgPSByZXBsYWNlKCcuKlteYS16QS1aXSsnLCAnJywgc2VsZWN0b3IpXHJcbiAgICBzdHJpbmcgPSByZXBsYWNlKCdcXFcnLCAnICcsIHNlbGVjdG9yKVxyXG4gICAgbmFtZSA9IHVucXVvdGUoc2VsZWN0b3IpXHJcbiAgaWYgKCBjb250aW51b3VzQXZhaWxhYmxlIClcclxuICAgIGlmICggbWF0Y2goJzpob3Zlcnw6YWN0aXZlJywgc2VsZWN0b3IoKSkgKVxyXG4gICAgICBvcHRpb25zID0gam9pbignICcsIG9wdGlvbnMpXHJcbiAgICAgIG9wdGlvbnMgPSByZXBsYWNlKCcgY29udGludW91c3xjb250aW51b3VzICcsICcnLCBvcHRpb25zKVxyXG4gICAgICBvcHRpb25zID0gdW5xdW90ZShvcHRpb25zKVxyXG4gICAgICBzZWxlY3RvciA9IHJlcGxhY2UoJzpob3Zlcnw6YWN0aXZlJywgJycsIHNlbGVjdG9yKCkpXHJcbiAgICAgIC8ge3NlbGVjdG9yfVxyXG4gICAgICAgIGFuaW1hdGlvbiBuYW1lIDBtcyAxMDBtc1xyXG4gICAgZWxzZVxyXG4gICAgICBlcnJvcignY29udGludW91cyBpcyBhdmFpbGFibGUgb25seSBmb3IgOmhvdmVyIGFuZCA6YWN0aXZlIHBzZXVkbyBzZWxlY3RvcnMnKVxyXG4gIGlmICggY3VzdG9tTmFtZUF2YWlsYWJsZSApXHJcbiAgICBhbmltYXRpb24gb3B0aW9uc1xyXG4gIGVsc2VcclxuICAgIGFuaW1hdGlvbiBuYW1lIG9wdGlvbnNcclxuICBAa2V5ZnJhbWVzIHtuYW1lfVxyXG4gICAgZm9yIGtleWZyYW1lLCBuIGluIGtleWZyYW1lc1xyXG4gICAgICBrZXlmcmFtZUNoZWNrID0gam9pbignLCAnLCBrZXlmcmFtZSlcclxuICAgICAgcGVyY2VudGFnZUF2YWlsYWJsZSA9IGZhbHNlXHJcbiAgICAgIGlmICggbWF0Y2goJ15cXGQnLCBrZXlmcmFtZUNoZWNrKSApXHJcbiAgICAgICAgcGVyY2VudGFnZUF2YWlsYWJsZSA9IHRydWVcclxuICAgICAgdHJhbnNmb3JtQXZhaWxhYmxlID0gZmFsc2VcclxuICAgICAgaWYgKCBtYXRjaCgndHJhbnNsYXRlfFxcYnJvdGF0ZXxcXGJzY2FsZXxza2V3Jywga2V5ZnJhbWVDaGVjaykgKVxyXG4gICAgICAgIHRyYW5zZm9ybUF2YWlsYWJsZSA9IHRydWVcclxuICAgICAgZmlsdGVyQXZhaWxhYmxlID0gZmFsc2VcclxuICAgICAgaWYgKCBtYXRjaCgnYmx1cnxicmlnaHRuZXNzfGNvbnRyYXN0fGRyb3Atc2hhZG93fGdyYXlzY2FsZXxodWUtcm90YXRlfGludmVydHxzYXR1cmF0ZXxzZXBpYScsIGtleWZyYW1lQ2hlY2spIClcclxuICAgICAgICBmaWx0ZXJBdmFpbGFibGUgPSB0cnVlXHJcbiAgICAgIGlmIChwZXJjZW50YWdlQXZhaWxhYmxlID09IHRydWUpXHJcbiAgICAgICAgcGVyY2VudGFnZSA9IGtleWZyYW1lWzBdXHJcbiAgICAgIGVsc2VcclxuICAgICAgICBpZiAobGVuZ3RoKGtleWZyYW1lcykgPiAxKVxyXG4gICAgICAgICAgcGVyY2VudGFnZSA9ICgxMDAgLyAoICggbGVuZ3RoKGtleWZyYW1lcykgLSAxKSAvIG4pICkgKiAxJVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgIHBlcmNlbnRhZ2UgPSAwJVxyXG4gICAgICB7cGVyY2VudGFnZX1cclxuICAgICAgICB0cmFuc2Zvcm1Qcm9wcyA9IHt9XHJcbiAgICAgICAgZmlsdGVyUHJvcHMgPSB7fVxyXG4gICAgICAgIGZvciBwcm9wLCBuIGluIGtleWZyYW1lXHJcbiAgICAgICAgICBwcm9wQ2hlY2sgPSBqb2luKCcsICcsIHByb3ApXHJcbiAgICAgICAgICBpc1BlcmNlbnRhZ2UgPSBmYWxzZVxyXG4gICAgICAgICAgaWYgKCBtYXRjaCgnXlxcZCcsIHByb3BDaGVjaykgKVxyXG4gICAgICAgICAgICBpc1BlcmNlbnRhZ2UgPSB0cnVlXHJcbiAgICAgICAgICBpc1RyYW5zZm9ybSA9IGZhbHNlXHJcbiAgICAgICAgICBpZiAoIG1hdGNoKCdedHJhbnNsYXRlfF5yb3RhdGV8XnNjYWxlfF5za2V3ICcsIHByb3BDaGVjaykgKVxyXG4gICAgICAgICAgICBpc1RyYW5zZm9ybSA9IHRydWVcclxuICAgICAgICAgIGlzRmlsdGVyID0gZmFsc2VcclxuICAgICAgICAgIGlmICggbWF0Y2goJ2JsdXJ8YnJpZ2h0bmVzc3xjb250cmFzdHxkcm9wLXNoYWRvd3xncmF5c2NhbGV8aHVlLXJvdGF0ZXxpbnZlcnR8c2F0dXJhdGV8c2VwaWEnLCBwcm9wQ2hlY2spIClcclxuICAgICAgICAgICAgaXNGaWx0ZXIgPSB0cnVlXHJcbiAgICAgICAgICBpc0Vhc2luZyA9IGZhbHNlXHJcbiAgICAgICAgICBpZiAoIG1hdGNoKCdlYXNlfGN1YmljLWJlemllcicsIHByb3BDaGVjaykgKVxyXG4gICAgICAgICAgICBpc0Vhc2luZyA9IHRydWVcclxuICAgICAgICAgIGlmICggaXNUcmFuc2Zvcm0gKVxyXG4gICAgICAgICAgICB0cmFuc2Zvcm1Qcm9wc1tuXSA9IHByb3BcclxuICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgdHJhbnNmb3JtUHJvcHNbbl0gPSB1bnF1b3RlKCcnKVxyXG4gICAgICAgICAgaWYgKCBpc0ZpbHRlciApXHJcbiAgICAgICAgICAgIGZpbHRlclByb3BzW25dID0gcHJvcFxyXG4gICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICBmaWx0ZXJQcm9wc1tuXSA9IHVucXVvdGUoJycpXHJcbiAgICAgICAgICBpZiAoIGlzRWFzaW5nIClcclxuICAgICAgICAgICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbiBwcm9wXHJcbiAgICAgICAgICBpZiAoICFpc1BlcmNlbnRhZ2UgJiYgIWlzVHJhbnNmb3JtICYmICFpc0ZpbHRlciAmJiAhaXNFYXNpbmcgKVxyXG4gICAgICAgICAgICByZWd1bGFyUHJvcCA9IHNwbGl0KCcoJywgJycgKyBwcm9wKVxyXG4gICAgICAgICAgICByZWd1bGFyVmFsdWUgPSBzcGxpdCgnKScsICcnICsgcmVndWxhclByb3BbMV0pXHJcbiAgICAgICAgICAgIHByaW50UHJvcCA9IHVucXVvdGUocmVndWxhclByb3BbMF0pXHJcbiAgICAgICAgICAgIHByaW50VmFsdWUgPSB1bnF1b3RlKHJlZ3VsYXJWYWx1ZVswXSlcclxuICAgICAgICAgICAge3ByaW50UHJvcH0gcHJpbnRWYWx1ZVxyXG4gICAgICAgIGlmICggdHJhbnNmb3JtQXZhaWxhYmxlIClcclxuICAgICAgICAgIHRyYW5zZm9ybSB0cmFuc2Zvcm1Qcm9wc1xyXG4gICAgICAgIGlmICggZmlsdGVyQXZhaWxhYmxlIClcclxuICAgICAgICAgIGZpbHRlciBmaWx0ZXJQcm9wc1xyXG5hbnRpYWxpYXMoKVxyXG4gIC13ZWJraXQtZm9udC1zbW9vdGhpbmcgYW50aWFsaWFzZWRcclxuICAtbW96LW9zeC1mb250LXNtb290aGluZyBncmF5c2NhbGVcclxuY2xvY2toYW5kKClcclxuICBpZiBsZW5ndGgoYXJndW1lbnRzKSA+IDRcclxuICAgIGVycm9yKFwiQ2xvY2toYW5kIHByb3BlcnR5IHN1cHBvcnQgdXAgdG8gNCB2YWx1ZXMgYXQgYSB0aW1lLlwiKVxyXG4gIHNpZGVzID0gdG9wLCByaWdodCwgYm90dG9tLCBsZWZ0XHJcbiAgZm9yIHNpZGUsIG4gaW4gc2lkZXNcclxuICAgIGlmIGxlbmd0aChhcmd1bWVudHMpID09IDFcclxuICAgICAge3NpZGV9IGFyZ3VtZW50c1xyXG4gICAgZWxzZSBpZiBsZW5ndGgoYXJndW1lbnRzKSA9PSAyXHJcbiAgICAgIHtzaWRlfSBhcmd1bWVudHNbMF0gaWYgbiA9PSAwIHx8IG4gPT0gMiB1bmxlc3MgYXJndW1lbnRzWzBdID09ICdfJ1xyXG4gICAgICB7c2lkZX0gYXJndW1lbnRzWzFdIGlmIG4gPT0gMSB8fCBuID09IDMgdW5sZXNzIGFyZ3VtZW50c1sxXSA9PSAnXydcclxuICAgIGVsc2UgaWYgbGVuZ3RoKGFyZ3VtZW50cykgPT0gM1xyXG4gICAgICB7c2lkZX0gYXJndW1lbnRzWzBdIGlmIG4gPT0gMCB1bmxlc3MgYXJndW1lbnRzWzBdID09ICdfJ1xyXG4gICAgICB7c2lkZX0gYXJndW1lbnRzWzFdIGlmIG4gPT0gMSB8fCBuID09IDMgdW5sZXNzIGFyZ3VtZW50c1sxXSA9PSAnXydcclxuICAgICAge3NpZGV9IGFyZ3VtZW50c1syXSBpZiBuID09IDIgdW5sZXNzIGFyZ3VtZW50c1syXSA9PSAnXydcclxuICAgIGVsc2VcclxuICAgICAge3NpZGV9IGFyZ3VtZW50c1tuXSB1bmxlc3MgYXJndW1lbnRzW25dID09ICdfJ1xyXG50cmJsID0gdGJsciA9IGNsb2NraGFuZFxyXG5ldmVyeXRoaW5nKClcclxuICAqXHJcbiAgKjpiZWZvcmVcclxuICAqOmFmdGVyXHJcbiAgICB7YmxvY2t9XHJcbiAgICAmOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyXHJcbiAgICAgIHtibG9ja31cclxuICAgICY6LW1vei1wbGFjZWhvbGRlclxyXG4gICAgICB7YmxvY2t9XHJcbiAgICAmOjotbW96LXBsYWNlaG9sZGVyXHJcbiAgICAgIHtibG9ja31cclxuICAgICY6LW1zLWlucHV0LXBsYWNlaG9sZGVyXHJcbiAgICAgIHtibG9ja31cclxuZm9udC1mYWNlKCBuYW1lLCBmb250LXNyYywgd2VpZ2h0ID0gZmFsc2UsIHN0eWxlID0gZmFsc2UsIGZvcm1hdHMgPSBsb2NhbCBlb3Qgd29mZjIgd29mZiB0cnVldHlwZSBzdmcsIHN2Zy1mb250LW5hbWUgPSBmYWxzZSwgbG9jYWwtZm9udC1uYW1lID0gZmFsc2UgKVxyXG4gIEBmb250LWZhY2VcclxuICAgIGZvbnQtZmFtaWx5IG5hbWVcclxuICAgIGlmIHdlaWdodFxyXG4gICAgICBmb250LXdlaWdodCB3ZWlnaHRcclxuICAgIGlmIHN0eWxlXHJcbiAgICAgIGZvbnQtc3R5bGUgc3R5bGVcclxuICAgIGZvbnRzID0gKClcclxuICAgIGlmIGxvY2FsIGluIGZvcm1hdHNcclxuICAgICAgbG9jYWwtbmFtZSA9IGxvY2FsLWZvbnQtbmFtZSA/IGxvY2FsLWZvbnQtbmFtZSA6IG5hbWVcclxuICAgICAgcHVzaChmb250cywgJ2xvY2FsKFwiJyArIGxvY2FsLW5hbWUgKyAnXCIpJylcclxuICAgIGlmIGVvdCBpbiBmb3JtYXRzXHJcbiAgICAgIHNyYzogdXJsKCBmb250LXNyYyArIFwiLmVvdFwiIClcclxuICAgICAgcHVzaCggZm9udHMsICd1cmwoXCInICsgZm9udC1zcmMgKyAnLmVvdD8jaWVmaXhcIikgZm9ybWF0KFwiZW1iZWRkZWQtb3BlbnR5cGVcIiknIClcclxuICAgIGlmIHdvZmYyIGluIGZvcm1hdHNcclxuICAgICAgcHVzaCggZm9udHMsICd1cmwoXCInICsgZm9udC1zcmMgKyAnLndvZmYyXCIpIGZvcm1hdChcIndvZmYyXCIpJyApXHJcbiAgICBpZiB3b2ZmIGluIGZvcm1hdHNcclxuICAgICAgcHVzaCggZm9udHMsICd1cmwoXCInICsgZm9udC1zcmMgKyAnLndvZmZcIikgZm9ybWF0KFwid29mZlwiKScgKVxyXG4gICAgaWYgb3BlbnR5cGUgaW4gZm9ybWF0cyB8fCBvdGYgaW4gZm9ybWF0c1xyXG4gICAgICBwdXNoKCBmb250cywgJ3VybChcIicgKyBmb250LXNyYyArICcub3RmXCIpIGZvcm1hdChcIm9wZW50eXBlXCIpJyApXHJcbiAgICBpZiB0cnVldHlwZSBpbiBmb3JtYXRzIHx8IHR0ZiBpbiBmb3JtYXRzXHJcbiAgICAgIHB1c2goIGZvbnRzLCAndXJsKFwiJyArIGZvbnQtc3JjICsgJy50dGZcIikgZm9ybWF0KFwidHJ1ZXR5cGVcIiknIClcclxuICAgIGlmIHN2ZyBpbiBmb3JtYXRzXHJcbiAgICAgIHN2Zy1uYW1lID0gc3ZnLWZvbnQtbmFtZSA/IHN2Zy1mb250LW5hbWUgOiBuYW1lXHJcbiAgICAgIHB1c2goIGZvbnRzLCAndXJsKFwiJyArIGZvbnQtc3JjICsgJy5zdmcjJyArIHN2Zy1uYW1lICsgJ1wiKSBmb3JtYXQoXCJzdmdcIiknIClcclxuICAgIHNyYyB1bnF1b3RlKCBqb2luKCBcIiwgXCIsIGZvbnRzICkgKVxyXG5zbGlkZXJUaHVtYigpXHJcbiAgaWYgc2VsZWN0b3IoKSA9PSBcIiZcIlxyXG4gICAgZXJyb3IoIFwicGxhY2Vob2xkZXIoKSBtdXN0IGJlIGNhbGxlZCBmcm9tIGEgcnVsZXNldCFcIiApXHJcbiAgJjo6LXdlYmtpdC1zbGlkZXItdGh1bWJcclxuICAgIHtibG9ja31cclxuICAmOjotbW96LXJhbmdlLXRodW1iXHJcbiAgICB7YmxvY2t9XHJcbiAgJjo6LW1zLXRodW1iXHJcbiAgICB7YmxvY2t9XHJcbnNsaWRlclRyYWNrKClcclxuICBpZiBzZWxlY3RvcigpID09IFwiJlwiXHJcbiAgICBlcnJvciggXCJwbGFjZWhvbGRlcigpIG11c3QgYmUgY2FsbGVkIGZyb20gYSBydWxlc2V0IVwiIClcclxuICAmOjotbXMtdHJhY2tcclxuICAgIGJhY2tncm91bmQgdHJhbnNwYXJlbnRcclxuICAgIGJvcmRlci1jb2xvciB0cmFuc3BhcmVudFxyXG4gICAgY29sb3IgdHJhbnNwYXJlbnRcclxuICAmOjotd2Via2l0LXNsaWRlci1ydW5uYWJsZS10cmFja1xyXG4gICAge2Jsb2NrfVxyXG4gICY6Oi1tb3otcmFuZ2UtdHJhY2tcclxuICAgIHtibG9ja31cclxuICAmOjotbXMtdHJhY2tcclxuICAgIHtibG9ja31cclxuLXBvcyh0eXBlLCBhcmdzKVxyXG4gIHBvc2l0aW9uIHR5cGVcclxuICBpZiBsZW5ndGgoYXJncykgPiA0XHJcbiAgICBlcnJvcihcIlBvc2l0aW9uIHByb3BlcnR5IHN1cHBvcnQgdXAgdG8gNCB2YWx1ZXMgYXQgYSB0aW1lLlwiKVxyXG4gIGFyZ3NTdHJpbmcgPSBjcmVhdGUtc3RyaW5nKGFyZ3MpXHJcbiAgaWYgbWF0Y2goJ3RvcHxib3R0b218bGVmdHxyaWdodCcsIGFyZ3NTdHJpbmcpXHJcbiAgICBmb3IgYXJnIGluIGFyZ3NcclxuICAgICAge2FyZ30gMFxyXG4gIGVsc2VcclxuICAgIHNpZGVzID0gdG9wLCByaWdodCwgYm90dG9tLCBsZWZ0XHJcbiAgICBmb3Igc2lkZSwgbiBpbiBzaWRlc1xyXG4gICAgICBpZiBsZW5ndGgoYXJncykgPT0gMVxyXG4gICAgICAgIHtzaWRlfSBhcmdzXHJcbiAgICAgIGVsc2UgaWYgbGVuZ3RoKGFyZ3MpID09IDJcclxuICAgICAgICB7c2lkZX0gYXJnc1swXSBpZiBuID09IDAgfHwgbiA9PSAyIHVubGVzcyBhcmdzWzBdID09ICdfJ1xyXG4gICAgICAgIHtzaWRlfSBhcmdzWzFdIGlmIG4gPT0gMSB8fCBuID09IDMgdW5sZXNzIGFyZ3NbMV0gPT0gJ18nXHJcbiAgICAgIGVsc2UgaWYgbGVuZ3RoKGFyZ3MpID09IDNcclxuICAgICAgICB7c2lkZX0gYXJnc1swXSBpZiBuID09IDAgdW5sZXNzIGFyZ3NbMF0gPT0gJ18nXHJcbiAgICAgICAge3NpZGV9IGFyZ3NbMV0gaWYgbiA9PSAxIHx8IG4gPT0gMyB1bmxlc3MgYXJnc1sxXSA9PSAnXydcclxuICAgICAgICB7c2lkZX0gYXJnc1syXSBpZiBuID09IDIgdW5sZXNzIGFyZ3NbMl0gPT0gJ18nXHJcbiAgICAgIGVsc2VcclxuICAgICAgICB7c2lkZX0gYXJnc1tuXSB1bmxlc3MgYXJnc1tuXSA9PSAnXydcclxuZml4ZWQoKVxyXG4gIC1wb3MoZml4ZWQsIGFyZ3VtZW50cylcclxuYWJzb2x1dGUoKVxyXG4gIC1wb3MoYWJzb2x1dGUsIGFyZ3VtZW50cylcclxucmVsYXRpdmUoKVxyXG4gIC1wb3MocmVsYXRpdmUsIGFyZ3VtZW50cylcclxuc3RhdGljKClcclxuICAtcG9zKHN0YXRpYywgYXJndW1lbnRzKVxyXG5wbGFjZWhvbGRlcigpXHJcbiAgaWYgc2VsZWN0b3IoKSA9PSBcIiZcIlxyXG4gICAgZXJyb3IoIFwicGxhY2Vob2xkZXIoKSBtdXN0IGJlIGNhbGxlZCBmcm9tIGEgcnVsZXNldCFcIiApXHJcbiAgJjo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlclxyXG4gICAge2Jsb2NrfVxyXG4gICY6LW1vei1wbGFjZWhvbGRlclxyXG4gICAge2Jsb2NrfVxyXG4gICY6Oi1tb3otcGxhY2Vob2xkZXJcclxuICAgIHtibG9ja31cclxuICAmOi1tcy1pbnB1dC1wbGFjZWhvbGRlclxyXG4gICAge2Jsb2NrfVxyXG5wc2V1ZG8oKVxyXG4gIF5bLTFdOnthcmd1bWVudHN9XlstMS4uLTFdXHJcbiAgICB7YmxvY2t9XHJcbnJlYWwtaGVpZ2h0KClcclxuICBhcmdzID0gc3RyaXAtdW5pdHMoYXJndW1lbnRzKVxyXG4gIGhlaWdodCBhcmdzICogMXZoXHJcbiAgQG1lZGlhIHRhYmxldFxyXG4gICAgcmF0aW9zID0gJzMvNCcsICcyLzMnLCAnMTAvMTYnLCAnOS8xNidcclxuICAgIGZvciByYXRpbyBpbiByYXRpb3NcclxuICAgICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCBcXFxyXG4gICAgICAgICAgICAgKG1heC1kZXZpY2UtYXNwZWN0LXJhdGlvOiB1bnF1b3RlKHJhdGlvKSkgYW5kIFxcXHJcbiAgICAgICAgICAgICAob3JpZW50YXRpb246IHBvcnRyYWl0KVxyXG4gICAgICAgIGhlaWdodCByb3VuZCggKGFyZ3MgLyBjb252ZXJ0KHJhdGlvKSApLCAyKSAqIDF2d1xyXG4gICAgZm9yIHJhdGlvIGluIHJhdGlvc1xyXG4gICAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIFxcXHJcbiAgICAgICAgICAgICAobWF4LWRldmljZS1hc3BlY3QtcmF0aW86IHVucXVvdGUocmF0aW8pKSBhbmQgXFxcclxuICAgICAgICAgICAgIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKVxyXG4gICAgICAgIGhlaWdodCByb3VuZCggKGFyZ3MgKiBjb252ZXJ0KHJhdGlvKSApLCAyKSAqIDF2d1xyXG5zaXplKClcclxuICBpZiBsZW5ndGgoYXJndW1lbnRzKSA+IDJcclxuICAgIGVycm9yKFwiU2l6ZSBwcm9wZXJ0eSBzdXBwb3J0IHVwIHRvIDIgdmFsdWVzIGF0IGEgdGltZS5cIilcclxuICBpZiBsZW5ndGgoYXJndW1lbnRzKSA9PSAxXHJcbiAgICBhcmdzID0gam9pbignLCAnLGFyZ3VtZW50cylcclxuICAgIGlmIG1hdGNoKCd2dT8nLCBhcmdzKVxyXG4gICAgICBhcmdzID0gcmVwbGFjZSgndnUnLCAnJywgYXJncylcclxuICAgICAgYXJncyA9IHVucXVvdGUoYXJncylcclxuICAgICAgd2lkdGggYXJncyArICd2dydcclxuICAgICAgaGVpZ2h0IGFyZ3MgKyAndmgnXHJcbiAgICBlbHNlXHJcbiAgICAgIHdpZHRoIGFyZ3VtZW50c1xyXG4gICAgICBoZWlnaHQgYXJndW1lbnRzXHJcbiAgZWxzZVxyXG4gICAgd2lkdGggYXJndW1lbnRzWzBdXHJcbiAgICBoZWlnaHQgYXJndW1lbnRzWzFdXHJcbnNwcmluZy1mcm9tKG9wdGlvbnMsIHN0cmVuZ3RoLCBlbGFzdGljaXR5LCBwcm9wcylcclxuICBvcHRpb25zQ2hlY2sgPSBqb2luKCcsICcsIG9wdGlvbnMpXHJcbiAgY3VzdG9tTmFtZUF2YWlsYWJsZSA9IHRydWVcclxuICBpZiAoXHJcbiAgICBtYXRjaCgnXlxcZHxeY3ViaWN8XmVhc2V8XmxpbmVhcnxeaW5maW5pdGV8Xm5vcm1hbHxeYWx0ZXJuYXRlfF5mb3J3YXJkc3xeYmFja3dhcmRzfF5ib3RofF5zdGVwc1xcKHxeY29udGludW91cycsIG9wdGlvbnNDaGVjaylcclxuICApXHJcbiAgICBjdXN0b21OYW1lQXZhaWxhYmxlID0gZmFsc2VcclxuICBjb250aW51b3VzQXZhaWxhYmxlID0gZmFsc2VcclxuICBpZiAoIG1hdGNoKCdjb250aW51b3VzJywgb3B0aW9uc0NoZWNrKSApXHJcbiAgICBjb250aW51b3VzQXZhaWxhYmxlID0gdHJ1ZVxyXG4gIGlmICggY3VzdG9tTmFtZUF2YWlsYWJsZSApXHJcbiAgICBuYW1lID0gb3B0aW9uc1swXVxyXG4gIGVsc2VcclxuICAgIHNlbGVjdG9yID0gc2VsZWN0b3IoKVxyXG4gICAgc2VsZWN0b3IgPSBcXFxyXG4gICAgICByZXBsYWNlKCc6YmVmb3JlfDphZnRlcnw6aG92ZXJ8OmFjdGl2ZXw6dmlzaXRlZHw6dGFyZ2V0JywgJycsIHNlbGVjdG9yKVxyXG4gICAgc2VsZWN0b3IgPSByZXBsYWNlKCcuKlteYS16QS1aXSsnLCAnJywgc2VsZWN0b3IpXHJcbiAgICBzdHJpbmcgPSByZXBsYWNlKCdcXFcnLCAnICcsIHNlbGVjdG9yKVxyXG4gICAgbmFtZSA9IHVucXVvdGUoc2VsZWN0b3IpXHJcbiAgaWYgKCBjb250aW51b3VzQXZhaWxhYmxlIClcclxuICAgIGlmICggbWF0Y2goJzpob3Zlcnw6YWN0aXZlJywgc2VsZWN0b3IoKSkgKVxyXG4gICAgICBvcHRpb25zID0gam9pbignICcsIG9wdGlvbnMpXHJcbiAgICAgIG9wdGlvbnMgPSByZXBsYWNlKCcgY29udGludW91c3xjb250aW51b3VzICcsICcnLCBvcHRpb25zKVxyXG4gICAgICBvcHRpb25zID0gdW5xdW90ZShvcHRpb25zKVxyXG4gICAgICBzZWxlY3RvciA9IHJlcGxhY2UoJzpob3Zlcnw6YWN0aXZlJywgJycsIHNlbGVjdG9yKCkpXHJcbiAgICAgIC8ge3NlbGVjdG9yfVxyXG4gICAgICAgIGFuaW1hdGlvbiBuYW1lIDBtcyAxMDBtc1xyXG4gICAgZWxzZVxyXG4gICAgICBlcnJvcignY29udGludW91cyBpcyBhdmFpbGFibGUgb25seSBmb3IgOmhvdmVyIGFuZCA6YWN0aXZlIHBzZXVkbyBzZWxlY3RvcnMnKVxyXG4gIGlmICggY3VzdG9tTmFtZUF2YWlsYWJsZSApXHJcbiAgICBhbmltYXRpb24gb3B0aW9uc1xyXG4gIGVsc2VcclxuICAgIGFuaW1hdGlvbiBuYW1lIG9wdGlvbnNcclxuICBjb2VmZmljaWVudCA9ICggKHN0cmVuZ3RoICogZWxhc3RpY2l0eSkgKyAoIChzdHJlbmd0aCArIGVsYXN0aWNpdHkpIC8gMiApIC0gKCAoc3RyZW5ndGggKyBlbGFzdGljaXR5KSAvIDQgKSAvIDIgKVxyXG4gIGNvZWZmaWNpZW50ID0gKCBjb2VmZmljaWVudCAvICgtMTAwKSApXHJcbiAgc3RlcHMgPSBzdHJlbmd0aFxyXG4gIEBrZXlmcmFtZXMge25hbWV9XHJcbiAgICBmb3Igc3RlcCwgbiBpbiAwLi4uc3RlcHNcclxuICAgICAgcGVyY2VudGFnZSA9IDEwMCAvIHN0ZXBzICogc3RlcFxyXG4gICAgICBwZXJjZW50YWdlID0gcm91bmQoIHBlcmNlbnRhZ2UsIDIgKVxyXG4gICAgICBwZXJjZW50YWdlID0gcGVyY2VudGFnZSAqIDElXHJcbiAgICAgIGtleWZyYW1lQ2hlY2sgPSBqb2luKCcsICcsIHByb3BzKVxyXG4gICAgICB0cmFuc2Zvcm1BdmFpbGFibGUgPSBmYWxzZVxyXG4gICAgICBpZiAoIG1hdGNoKCd0cmFuc2xhdGV8XFxicm90YXRlfFxcYnNjYWxlfHNrZXcnLCBrZXlmcmFtZUNoZWNrKSApXHJcbiAgICAgICAgdHJhbnNmb3JtQXZhaWxhYmxlID0gdHJ1ZVxyXG4gICAgICBmaWx0ZXJBdmFpbGFibGUgPSBmYWxzZVxyXG4gICAgICBpZiAoIG1hdGNoKCdibHVyfGJyaWdodG5lc3N8Y29udHJhc3R8ZHJvcC1zaGFkb3d8Z3JheXNjYWxlfGh1ZS1yb3RhdGV8aW52ZXJ0fHNhdHVyYXRlfHNlcGlhJywga2V5ZnJhbWVDaGVjaykgKVxyXG4gICAgICAgIGZpbHRlckF2YWlsYWJsZSA9IHRydWVcclxuICAgICAge3BlcmNlbnRhZ2V9XHJcbiAgICAgICAgdHJhbnNmb3JtUHJvcHMgPSB7fVxyXG4gICAgICAgIGZpbHRlclByb3BzID0ge31cclxuICAgICAgICBmb3IgcHJvcCwgbiBpbiBwcm9wc1xyXG4gICAgICAgICAgcHJvcENoZWNrID0gam9pbignLCAnLCBwcm9wKVxyXG4gICAgICAgICAgaXNUcmFuc2Zvcm0gPSBmYWxzZVxyXG4gICAgICAgICAgaWYgKCBtYXRjaCgnXnRyYW5zbGF0ZXxecm90YXRlfF5zY2FsZXxec2tldyAnLCBwcm9wQ2hlY2spIClcclxuICAgICAgICAgICAgaXNUcmFuc2Zvcm0gPSB0cnVlXHJcbiAgICAgICAgICBpc0ZpbHRlciA9IGZhbHNlXHJcbiAgICAgICAgICBpZiAoIG1hdGNoKCdibHVyfGJyaWdodG5lc3N8Y29udHJhc3R8ZHJvcC1zaGFkb3d8Z3JheXNjYWxlfGh1ZS1yb3RhdGV8aW52ZXJ0fHNhdHVyYXRlfHNlcGlhJywgcHJvcENoZWNrKSApXHJcbiAgICAgICAgICAgIGlzRmlsdGVyID0gdHJ1ZVxyXG4gICAgICAgICAgaWYgKCBpc1RyYW5zZm9ybSApXHJcbiAgICAgICAgICAgIHNwbGl0ID0gc3BsaXQoJygnLCAnJyArIHByb3ApXHJcbiAgICAgICAgICAgIHRyYW5zZm9ybVZhbHVlID0gc3BsaXQoJyknLCAnJyArIHNwbGl0WzFdKVxyXG4gICAgICAgICAgICB0cmFuc2Zvcm1WYWx1ZSA9IGNvbnZlcnQodHJhbnNmb3JtVmFsdWUpXHJcbiAgICAgICAgICAgIG9yaWdpbmFsVmFsdWUgPSBAdHJhbnNmb3JtXHJcbiAgICAgICAgICAgIG9yaWdpbmFsVmFsdWUgPSBzcGxpdChzcGxpdFswXSwgJycgKyBvcmlnaW5hbFZhbHVlKVxyXG4gICAgICAgICAgICBvcmlnaW5hbFZhbHVlID0gc3BsaXQoJygnLCAnJyArIG9yaWdpbmFsVmFsdWVbMV0pXHJcbiAgICAgICAgICAgIG9yaWdpbmFsVmFsdWUgPSBzcGxpdCgnKScsICcnICsgb3JpZ2luYWxWYWx1ZVsxXSlcclxuICAgICAgICAgICAgb3JpZ2luYWxWYWx1ZSA9IGNvbnZlcnQob3JpZ2luYWxWYWx1ZSlcclxuICAgICAgICAgICAgaWYgKCBvcmlnaW5hbFZhbHVlID09IG51bGwgKVxyXG4gICAgICAgICAgICAgIGlmICggc3BsaXRbMF0gPT0gJ3NjYWxlJyApXHJcbiAgICAgICAgICAgICAgICBvcmlnaW5hbFZhbHVlID0gMVxyXG4gICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIG9yaWdpbmFsVmFsdWUgPSAwXHJcbiAgICAgICAgICAgIGlmICh0cmFuc2Zvcm1WYWx1ZSA9PSAwICYmIHNwbGl0WzBdID09ICdzY2FsZScgJiYgcGVyY2VudGFnZSAhPSAnMCUnKVxyXG4gICAgICAgICAgICAgIHRyYW5zZm9ybVZhbHVlID0gMC4wMVxyXG4gICAgICAgICAgICBuZXdWYWx1ZSA9IG9yaWdpbmFsVmFsdWUgLSAoKHRyYW5zZm9ybVZhbHVlIC0gb3JpZ2luYWxWYWx1ZSkgKiAoY29lZmZpY2llbnQgKiogc3RlcCkgKiAoLTEpKVxyXG4gICAgICAgICAgICBpZiAoc3BsaXRbMF0gPT0gJ3NjYWxlJylcclxuICAgICAgICAgICAgICBpZiAoIHRyYW5zZm9ybVZhbHVlIDw9IDEgKVxyXG4gICAgICAgICAgICAgICAgbmV3VmFsdWUgPSBvcmlnaW5hbFZhbHVlICsgKCh0cmFuc2Zvcm1WYWx1ZSAtIG9yaWdpbmFsVmFsdWUpICogKGNvZWZmaWNpZW50ICoqIHN0ZXApKVxyXG4gICAgICAgICAgICBuZXdWYWx1ZSA9IHJvdW5kKCBuZXdWYWx1ZSwgMilcclxuICAgICAgICAgICAgbmV3UHJvcCA9IGpvaW4oJycsIHNwbGl0WzBdLCAnKCcsIG5ld1ZhbHVlLCAnKScpXHJcbiAgICAgICAgICAgIHRyYW5zZm9ybVByb3BzW25dID0gdW5xdW90ZShuZXdQcm9wKVxyXG4gICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB0cmFuc2Zvcm1Qcm9wc1tuXSA9IHVucXVvdGUoJycpXHJcbiAgICAgICAgICAgIGlmICggcGVyY2VudGFnZSA9PSAnMCUnIClcclxuICAgICAgICAgICAgICBpZiAoIGlzRmlsdGVyIClcclxuICAgICAgICAgICAgICAgIGZpbHRlclByb3BzW25dID0gcHJvcFxyXG4gICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIGZpbHRlclByb3BzW25dID0gdW5xdW90ZSgnJylcclxuICAgICAgICAgICAgICAgIHJlZ3VsYXJQcm9wID0gc3BsaXQoJygnLCAnJyArIHByb3ApXHJcbiAgICAgICAgICAgICAgICByZWd1bGFyVmFsdWUgPSBzcGxpdCgnKScsICcnICsgcmVndWxhclByb3BbMV0pXHJcbiAgICAgICAgICAgICAgICBwcmludFByb3AgPSB1bnF1b3RlKHJlZ3VsYXJQcm9wWzBdKVxyXG4gICAgICAgICAgICAgICAgcHJpbnRWYWx1ZSA9IHVucXVvdGUocmVndWxhclZhbHVlWzBdKVxyXG4gICAgICAgICAgICAgICAge3ByaW50UHJvcH0gcHJpbnRWYWx1ZVxyXG4gICAgICAgICAgICBoYWxmID0gY2VpbChzdGVwcy8yKVxyXG4gICAgICAgICAgICBpZiAoIHN0ZXAgPT0gaGFsZiApXHJcbiAgICAgICAgICAgICAgaWYgKCBpc0ZpbHRlciApXHJcbiAgICAgICAgICAgICAgICBmaWx0ZXJQcm9wcyA9IHVucXVvdGUoJ2luaGVyaXQnKVxyXG4gICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHJlZ3VsYXJQcm9wID0gc3BsaXQoJygnLCAnJyArIHByb3ApXHJcbiAgICAgICAgICAgICAgICBwcmludFByb3AgPSB1bnF1b3RlKHJlZ3VsYXJQcm9wWzBdKVxyXG4gICAgICAgICAgICAgICAge3ByaW50UHJvcH0gaW5oZXJpdFxyXG4gICAgICAgIGlmICggdHJhbnNmb3JtQXZhaWxhYmxlIClcclxuICAgICAgICAgIHRyYW5zZm9ybSB0cmFuc2Zvcm1Qcm9wc1xyXG4gICAgICAgIGlmICggZmlsdGVyQXZhaWxhYmxlICYmIGxlbmd0aChmaWx0ZXJQcm9wcykgPiAwIClcclxuICAgICAgICAgIGZpbHRlciBmaWx0ZXJQcm9wc1xyXG5zcHJpbmctaW4tcGxhY2Uob3B0aW9ucywgc3RyZW5ndGgsIGVsYXN0aWNpdHksIHByb3BzKVxyXG4gIG9wdGlvbnNDaGVjayA9IGpvaW4oJywgJywgb3B0aW9ucylcclxuICBjdXN0b21OYW1lQXZhaWxhYmxlID0gdHJ1ZVxyXG4gIGlmIChcclxuICAgIG1hdGNoKCdeXFxkfF5jdWJpY3xeZWFzZXxebGluZWFyfF5pbmZpbml0ZXxebm9ybWFsfF5hbHRlcm5hdGV8XmZvcndhcmRzfF5iYWNrd2FyZHN8XmJvdGh8XnN0ZXBzXFwofF5jb250aW51b3VzJywgb3B0aW9uc0NoZWNrKVxyXG4gIClcclxuICAgIGN1c3RvbU5hbWVBdmFpbGFibGUgPSBmYWxzZVxyXG4gIGNvbnRpbnVvdXNBdmFpbGFibGUgPSBmYWxzZVxyXG4gIGlmICggbWF0Y2goJ2NvbnRpbnVvdXMnLCBvcHRpb25zQ2hlY2spIClcclxuICAgIGNvbnRpbnVvdXNBdmFpbGFibGUgPSB0cnVlXHJcbiAgaWYgKCBjdXN0b21OYW1lQXZhaWxhYmxlIClcclxuICAgIG5hbWUgPSBvcHRpb25zWzBdXHJcbiAgZWxzZVxyXG4gICAgc2VsZWN0b3IgPSBzZWxlY3RvcigpXHJcbiAgICBzZWxlY3RvciA9IFxcXHJcbiAgICAgIHJlcGxhY2UoJzpiZWZvcmV8OmFmdGVyfDpob3Zlcnw6YWN0aXZlfDp2aXNpdGVkfDp0YXJnZXQnLCAnJywgc2VsZWN0b3IpXHJcbiAgICBzZWxlY3RvciA9IHJlcGxhY2UoJy4qW15hLXpBLVpdKycsICcnLCBzZWxlY3RvcilcclxuICAgIHN0cmluZyA9IHJlcGxhY2UoJ1xcVycsICcgJywgc2VsZWN0b3IpXHJcbiAgICBuYW1lID0gdW5xdW90ZShzZWxlY3RvcilcclxuICBpZiAoIGNvbnRpbnVvdXNBdmFpbGFibGUgKVxyXG4gICAgaWYgKCBtYXRjaCgnOmhvdmVyfDphY3RpdmUnLCBzZWxlY3RvcigpKSApXHJcbiAgICAgIG9wdGlvbnMgPSBqb2luKCcgJywgb3B0aW9ucylcclxuICAgICAgb3B0aW9ucyA9IHJlcGxhY2UoJyBjb250aW51b3VzfGNvbnRpbnVvdXMgJywgJycsIG9wdGlvbnMpXHJcbiAgICAgIG9wdGlvbnMgPSB1bnF1b3RlKG9wdGlvbnMpXHJcbiAgICAgIHNlbGVjdG9yID0gcmVwbGFjZSgnOmhvdmVyfDphY3RpdmUnLCAnJywgc2VsZWN0b3IoKSlcclxuICAgICAgLyB7c2VsZWN0b3J9XHJcbiAgICAgICAgYW5pbWF0aW9uIG5hbWUgMG1zIDEwMG1zXHJcbiAgICBlbHNlXHJcbiAgICAgIGVycm9yKCdjb250aW51b3VzIGlzIGF2YWlsYWJsZSBvbmx5IGZvciA6aG92ZXIgYW5kIDphY3RpdmUgcHNldWRvIHNlbGVjdG9ycycpXHJcbiAgaWYgKCBjdXN0b21OYW1lQXZhaWxhYmxlIClcclxuICAgIGFuaW1hdGlvbiBvcHRpb25zXHJcbiAgZWxzZVxyXG4gICAgYW5pbWF0aW9uIG5hbWUgb3B0aW9uc1xyXG4gIGNvZWZmaWNpZW50ID0gKCAoc3RyZW5ndGggKiBlbGFzdGljaXR5KSArICggKHN0cmVuZ3RoICsgZWxhc3RpY2l0eSkgLyAyICkgLSAoIChzdHJlbmd0aCArIGVsYXN0aWNpdHkpIC8gNCApIC8gMiApXHJcbiAgY29lZmZpY2llbnQgPSAoIGNvZWZmaWNpZW50IC8gKC0xMDApIClcclxuICBzdGVwcyA9IHN0cmVuZ3RoXHJcbiAgQGtleWZyYW1lcyB7bmFtZX1cclxuICAgIGZvciBzdGVwLCBuIGluIDEuLihzdGVwcyAtIDEpXHJcbiAgICAgIHBlcmNlbnRhZ2UgPSAxMDAgLyBzdGVwcyAqIHN0ZXBcclxuICAgICAgcGVyY2VudGFnZSA9IHJvdW5kKCBwZXJjZW50YWdlLCAyIClcclxuICAgICAgcGVyY2VudGFnZSA9IHBlcmNlbnRhZ2UgKiAxJVxyXG4gICAgICBrZXlmcmFtZUNoZWNrID0gam9pbignLCAnLCBwcm9wcylcclxuICAgICAgdHJhbnNmb3JtQXZhaWxhYmxlID0gZmFsc2VcclxuICAgICAgaWYgKCBtYXRjaCgndHJhbnNsYXRlfFxcYnJvdGF0ZXxcXGJzY2FsZXxza2V3Jywga2V5ZnJhbWVDaGVjaykgKVxyXG4gICAgICAgIHRyYW5zZm9ybUF2YWlsYWJsZSA9IHRydWVcclxuICAgICAgZmlsdGVyQXZhaWxhYmxlID0gZmFsc2VcclxuICAgICAgaWYgKCBtYXRjaCgnYmx1cnxicmlnaHRuZXNzfGNvbnRyYXN0fGRyb3Atc2hhZG93fGdyYXlzY2FsZXxodWUtcm90YXRlfGludmVydHxzYXR1cmF0ZXxzZXBpYScsIGtleWZyYW1lQ2hlY2spIClcclxuICAgICAgICBmaWx0ZXJBdmFpbGFibGUgPSB0cnVlXHJcbiAgICAgIHtwZXJjZW50YWdlfVxyXG4gICAgICAgIHRyYW5zZm9ybVByb3BzID0ge31cclxuICAgICAgICBmaWx0ZXJQcm9wcyA9IHt9XHJcbiAgICAgICAgZm9yIHByb3AsIG4gaW4gcHJvcHNcclxuICAgICAgICAgIHByb3BDaGVjayA9IGpvaW4oJywgJywgcHJvcClcclxuICAgICAgICAgIGlzVHJhbnNmb3JtID0gZmFsc2VcclxuICAgICAgICAgIGlmICggbWF0Y2goJ150cmFuc2xhdGV8XnJvdGF0ZXxec2NhbGV8XnNrZXcgJywgcHJvcENoZWNrKSApXHJcbiAgICAgICAgICAgIGlzVHJhbnNmb3JtID0gdHJ1ZVxyXG4gICAgICAgICAgaXNGaWx0ZXIgPSBmYWxzZVxyXG4gICAgICAgICAgaWYgKCBtYXRjaCgnYmx1cnxicmlnaHRuZXNzfGNvbnRyYXN0fGRyb3Atc2hhZG93fGdyYXlzY2FsZXxodWUtcm90YXRlfGludmVydHxzYXR1cmF0ZXxzZXBpYScsIHByb3BDaGVjaykgKVxyXG4gICAgICAgICAgICBpc0ZpbHRlciA9IHRydWVcclxuICAgICAgICAgIGlmICggaXNUcmFuc2Zvcm0gKVxyXG4gICAgICAgICAgICBzcGxpdCA9IHNwbGl0KCcoJywgJycgKyBwcm9wKVxyXG4gICAgICAgICAgICB0cmFuc2Zvcm1WYWx1ZSA9IHNwbGl0KCcpJywgJycgKyBzcGxpdFsxXSlcclxuICAgICAgICAgICAgdHJhbnNmb3JtVmFsdWUgPSBjb252ZXJ0KHRyYW5zZm9ybVZhbHVlKVxyXG4gICAgICAgICAgICBvcmlnaW5hbFZhbHVlID0gQHRyYW5zZm9ybVxyXG4gICAgICAgICAgICBvcmlnaW5hbFZhbHVlID0gc3BsaXQoc3BsaXRbMF0sICcnICsgb3JpZ2luYWxWYWx1ZSlcclxuICAgICAgICAgICAgb3JpZ2luYWxWYWx1ZSA9IHNwbGl0KCcoJywgJycgKyBvcmlnaW5hbFZhbHVlWzFdKVxyXG4gICAgICAgICAgICBvcmlnaW5hbFZhbHVlID0gc3BsaXQoJyknLCAnJyArIG9yaWdpbmFsVmFsdWVbMV0pXHJcbiAgICAgICAgICAgIG9yaWdpbmFsVmFsdWUgPSBjb252ZXJ0KG9yaWdpbmFsVmFsdWUpXHJcbiAgICAgICAgICAgIGlmICggb3JpZ2luYWxWYWx1ZSA9PSBudWxsIClcclxuICAgICAgICAgICAgICBpZiAoIHNwbGl0WzBdID09ICdzY2FsZScgKVxyXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxWYWx1ZSA9IDFcclxuICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICBvcmlnaW5hbFZhbHVlID0gMFxyXG4gICAgICAgICAgICBpZiAodHJhbnNmb3JtVmFsdWUgPT0gMCAmJiBzcGxpdFswXSA9PSAnc2NhbGUnICYmIHBlcmNlbnRhZ2UgIT0gJzAlJylcclxuICAgICAgICAgICAgICB0cmFuc2Zvcm1WYWx1ZSA9IDAuMDFcclxuICAgICAgICAgICAgbmV3VmFsdWUgPSBvcmlnaW5hbFZhbHVlIC0gKChvcmlnaW5hbFZhbHVlIC0gdHJhbnNmb3JtVmFsdWUpICogKGNvZWZmaWNpZW50ICoqIHN0ZXApICogKC0xKSkgKiAyXHJcbiAgICAgICAgICAgIGlmIChzcGxpdFswXSA9PSAnc2NhbGUnKVxyXG4gICAgICAgICAgICAgIGlmICggdHJhbnNmb3JtVmFsdWUgPD0gMSApXHJcbiAgICAgICAgICAgICAgICBuZXdWYWx1ZSA9IG9yaWdpbmFsVmFsdWUgKyAoKG9yaWdpbmFsVmFsdWUgLSB0cmFuc2Zvcm1WYWx1ZSkgKiAoY29lZmZpY2llbnQgKiogc3RlcCkpICogMlxyXG4gICAgICAgICAgICBuZXdWYWx1ZSA9IHJvdW5kKCBuZXdWYWx1ZSwgMilcclxuICAgICAgICAgICAgbmV3UHJvcCA9IGpvaW4oJycsIHNwbGl0WzBdLCAnKCcsIG5ld1ZhbHVlLCAnKScpXHJcbiAgICAgICAgICAgIHRyYW5zZm9ybVByb3BzW25dID0gdW5xdW90ZShuZXdQcm9wKVxyXG4gICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB0cmFuc2Zvcm1Qcm9wc1tuXSA9IHVucXVvdGUoJycpXHJcbiAgICAgICAgICAgIGhhbGYgPSBmbG9vcihzdGVwcy8yKVxyXG4gICAgICAgICAgICBpZiAoIHN0ZXAgPT0gaGFsZiApXHJcbiAgICAgICAgICAgICAgaWYgKCBpc0ZpbHRlciApXHJcbiAgICAgICAgICAgICAgICBmaWx0ZXJQcm9wc1tuXSA9IHByb3BcclxuICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICBmaWx0ZXJQcm9wc1tuXSA9IHVucXVvdGUoJycpXHJcbiAgICAgICAgICAgICAgICByZWd1bGFyUHJvcCA9IHNwbGl0KCcoJywgJycgKyBwcm9wKVxyXG4gICAgICAgICAgICAgICAgcmVndWxhclZhbHVlID0gc3BsaXQoJyknLCAnJyArIHJlZ3VsYXJQcm9wWzFdKVxyXG4gICAgICAgICAgICAgICAgcHJpbnRQcm9wID0gdW5xdW90ZShyZWd1bGFyUHJvcFswXSlcclxuICAgICAgICAgICAgICAgIHByaW50VmFsdWUgPSB1bnF1b3RlKHJlZ3VsYXJWYWx1ZVswXSlcclxuICAgICAgICAgICAgICAgIHtwcmludFByb3B9IHByaW50VmFsdWVcclxuICAgICAgICBpZiAoIHRyYW5zZm9ybUF2YWlsYWJsZSApXHJcbiAgICAgICAgICB0cmFuc2Zvcm0gdHJhbnNmb3JtUHJvcHNcclxuICAgICAgICBpZiAoIGZpbHRlckF2YWlsYWJsZSAmJiBsZW5ndGgoZmlsdGVyUHJvcHMpID4gMCApXHJcbiAgICAgICAgICBmaWx0ZXIgZmlsdGVyUHJvcHNcclxuc3ByaW5nLXRvKG9wdGlvbnMsIHN0cmVuZ3RoLCBlbGFzdGljaXR5LCBwcm9wcylcclxuICBvcHRpb25zQ2hlY2sgPSBqb2luKCcsICcsIG9wdGlvbnMpXHJcbiAgY3VzdG9tTmFtZUF2YWlsYWJsZSA9IHRydWVcclxuICBpZiAoXHJcbiAgICBtYXRjaCgnXlxcZHxeY3ViaWN8XmVhc2V8XmxpbmVhcnxeaW5maW5pdGV8Xm5vcm1hbHxeYWx0ZXJuYXRlfF5mb3J3YXJkc3xeYmFja3dhcmRzfF5ib3RofF5zdGVwc1xcKHxeY29udGludW91cycsIG9wdGlvbnNDaGVjaylcclxuICApXHJcbiAgICBjdXN0b21OYW1lQXZhaWxhYmxlID0gZmFsc2VcclxuICBjb250aW51b3VzQXZhaWxhYmxlID0gZmFsc2VcclxuICBpZiAoIG1hdGNoKCdjb250aW51b3VzJywgb3B0aW9uc0NoZWNrKSApXHJcbiAgICBjb250aW51b3VzQXZhaWxhYmxlID0gdHJ1ZVxyXG4gIGlmICggY3VzdG9tTmFtZUF2YWlsYWJsZSApXHJcbiAgICBuYW1lID0gb3B0aW9uc1swXVxyXG4gIGVsc2VcclxuICAgIHNlbGVjdG9yID0gc2VsZWN0b3IoKVxyXG4gICAgc2VsZWN0b3IgPSBcXFxyXG4gICAgICByZXBsYWNlKCc6YmVmb3JlfDphZnRlcnw6aG92ZXJ8OmFjdGl2ZXw6dmlzaXRlZHw6dGFyZ2V0JywgJycsIHNlbGVjdG9yKVxyXG4gICAgc2VsZWN0b3IgPSByZXBsYWNlKCcuKlteYS16QS1aXSsnLCAnJywgc2VsZWN0b3IpXHJcbiAgICBzdHJpbmcgPSByZXBsYWNlKCdcXFcnLCAnICcsIHNlbGVjdG9yKVxyXG4gICAgbmFtZSA9IHVucXVvdGUoc2VsZWN0b3IpXHJcbiAgdW5sZXNzICggbWF0Y2goJ2ZvcndhcmRzfGJhY2t3YXJkc3xib3RoJywgb3B0aW9uc0NoZWNrKSApXHJcbiAgICBvcHRpb25zID0gam9pbignICcsIG9wdGlvbnMsICdmb3J3YXJkcycpXHJcbiAgICBvcHRpb25zID0gdW5xdW90ZShvcHRpb25zKVxyXG4gIGlmICggY29udGludW91c0F2YWlsYWJsZSApXHJcbiAgICBpZiAoIG1hdGNoKCc6aG92ZXJ8OmFjdGl2ZScsIHNlbGVjdG9yKCkpIClcclxuICAgICAgb3B0aW9ucyA9IGpvaW4oJyAnLCBvcHRpb25zKVxyXG4gICAgICBvcHRpb25zID0gcmVwbGFjZSgnIGNvbnRpbnVvdXN8Y29udGludW91cyAnLCAnJywgb3B0aW9ucylcclxuICAgICAgb3B0aW9ucyA9IHVucXVvdGUob3B0aW9ucylcclxuICAgICAgc2VsZWN0b3IgPSByZXBsYWNlKCc6aG92ZXJ8OmFjdGl2ZScsICcnLCBzZWxlY3RvcigpKVxyXG4gICAgICAvIHtzZWxlY3Rvcn1cclxuICAgICAgICBhbmltYXRpb24gbmFtZSAwbXMgMTAwbXNcclxuICAgIGVsc2VcclxuICAgICAgZXJyb3IoJ2NvbnRpbnVvdXMgaXMgYXZhaWxhYmxlIG9ubHkgZm9yIDpob3ZlciBhbmQgOmFjdGl2ZSBwc2V1ZG8gc2VsZWN0b3JzJylcclxuICBpZiAoIGN1c3RvbU5hbWVBdmFpbGFibGUgKVxyXG4gICAgYW5pbWF0aW9uIG9wdGlvbnNcclxuICBlbHNlXHJcbiAgICBhbmltYXRpb24gbmFtZSBvcHRpb25zXHJcbiAgY29lZmZpY2llbnQgPSAoIChzdHJlbmd0aCAqIGVsYXN0aWNpdHkpICsgKCAoc3RyZW5ndGggKyBlbGFzdGljaXR5KSAvIDIgKSAtICggKHN0cmVuZ3RoICsgZWxhc3RpY2l0eSkgLyA0ICkgLyAyIClcclxuICBjb2VmZmljaWVudCA9ICggY29lZmZpY2llbnQgLyAoLTEwMCkgKVxyXG4gIHN0ZXBzID0gc3RyZW5ndGhcclxuICBAa2V5ZnJhbWVzIHtuYW1lfVxyXG4gICAgZm9yIHN0ZXAsIG4gaW4gMS4uc3RlcHNcclxuICAgICAgcGVyY2VudGFnZSA9IDEwMCAvIHN0ZXBzICogc3RlcFxyXG4gICAgICBwZXJjZW50YWdlID0gcm91bmQoIHBlcmNlbnRhZ2UsIDIgKVxyXG4gICAgICBwZXJjZW50YWdlID0gcGVyY2VudGFnZSAqIDElXHJcbiAgICAgIGtleWZyYW1lQ2hlY2sgPSBqb2luKCcsICcsIHByb3BzKVxyXG4gICAgICB0cmFuc2Zvcm1BdmFpbGFibGUgPSBmYWxzZVxyXG4gICAgICBpZiAoIG1hdGNoKCd0cmFuc2xhdGV8XFxicm90YXRlfFxcYnNjYWxlfHNrZXcnLCBrZXlmcmFtZUNoZWNrKSApXHJcbiAgICAgICAgdHJhbnNmb3JtQXZhaWxhYmxlID0gdHJ1ZVxyXG4gICAgICBmaWx0ZXJBdmFpbGFibGUgPSBmYWxzZVxyXG4gICAgICBpZiAoIG1hdGNoKCdibHVyfGJyaWdodG5lc3N8Y29udHJhc3R8ZHJvcC1zaGFkb3d8Z3JheXNjYWxlfGh1ZS1yb3RhdGV8aW52ZXJ0fHNhdHVyYXRlfHNlcGlhJywga2V5ZnJhbWVDaGVjaykgKVxyXG4gICAgICAgIGZpbHRlckF2YWlsYWJsZSA9IHRydWVcclxuICAgICAge3BlcmNlbnRhZ2V9XHJcbiAgICAgICAgdHJhbnNmb3JtUHJvcHMgPSB7fVxyXG4gICAgICAgIGZpbHRlclByb3BzID0ge31cclxuICAgICAgICBmb3IgcHJvcCwgbiBpbiBwcm9wc1xyXG4gICAgICAgICAgcHJvcENoZWNrID0gam9pbignLCAnLCBwcm9wKVxyXG4gICAgICAgICAgaXNUcmFuc2Zvcm0gPSBmYWxzZVxyXG4gICAgICAgICAgaWYgKCBtYXRjaCgnXnRyYW5zbGF0ZXxecm90YXRlfF5zY2FsZXxec2tldyAnLCBwcm9wQ2hlY2spIClcclxuICAgICAgICAgICAgaXNUcmFuc2Zvcm0gPSB0cnVlXHJcbiAgICAgICAgICBpc0ZpbHRlciA9IGZhbHNlXHJcbiAgICAgICAgICBpZiAoIG1hdGNoKCdibHVyfGJyaWdodG5lc3N8Y29udHJhc3R8ZHJvcC1zaGFkb3d8Z3JheXNjYWxlfGh1ZS1yb3RhdGV8aW52ZXJ0fHNhdHVyYXRlfHNlcGlhJywgcHJvcENoZWNrKSApXHJcbiAgICAgICAgICAgIGlzRmlsdGVyID0gdHJ1ZVxyXG4gICAgICAgICAgaWYgKCBpc1RyYW5zZm9ybSApXHJcbiAgICAgICAgICAgIHNwbGl0ID0gc3BsaXQoJygnLCAnJyArIHByb3ApXHJcbiAgICAgICAgICAgIHRyYW5zZm9ybVZhbHVlID0gc3BsaXQoJyknLCAnJyArIHNwbGl0WzFdKVxyXG4gICAgICAgICAgICB0cmFuc2Zvcm1WYWx1ZSA9IGNvbnZlcnQodHJhbnNmb3JtVmFsdWUpXHJcbiAgICAgICAgICAgIG9yaWdpbmFsVmFsdWUgPSBAdHJhbnNmb3JtXHJcbiAgICAgICAgICAgIG9yaWdpbmFsVmFsdWUgPSBzcGxpdChzcGxpdFswXSwgJycgKyBvcmlnaW5hbFZhbHVlKVxyXG4gICAgICAgICAgICBvcmlnaW5hbFZhbHVlID0gc3BsaXQoJygnLCAnJyArIG9yaWdpbmFsVmFsdWVbMV0pXHJcbiAgICAgICAgICAgIG9yaWdpbmFsVmFsdWUgPSBzcGxpdCgnKScsICcnICsgb3JpZ2luYWxWYWx1ZVsxXSlcclxuICAgICAgICAgICAgb3JpZ2luYWxWYWx1ZSA9IGNvbnZlcnQob3JpZ2luYWxWYWx1ZSlcclxuICAgICAgICAgICAgaWYgKCBvcmlnaW5hbFZhbHVlID09IG51bGwgKVxyXG4gICAgICAgICAgICAgIGlmICggc3BsaXRbMF0gPT0gJ3NjYWxlJyApXHJcbiAgICAgICAgICAgICAgICBvcmlnaW5hbFZhbHVlID0gMVxyXG4gICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIG9yaWdpbmFsVmFsdWUgPSAwXHJcbiAgICAgICAgICAgIGlmICh0cmFuc2Zvcm1WYWx1ZSA9PSAwICYmIHNwbGl0WzBdID09ICdzY2FsZScgJiYgcGVyY2VudGFnZSAhPSAnMTAwJScpXHJcbiAgICAgICAgICAgICAgdHJhbnNmb3JtVmFsdWUgPSAwLjAxXHJcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gdHJhbnNmb3JtVmFsdWUgLSAoKG9yaWdpbmFsVmFsdWUgLSB0cmFuc2Zvcm1WYWx1ZSkgKiAoY29lZmZpY2llbnQgKiogc3RlcCkgKiAoLTEpKVxyXG4gICAgICAgICAgICBpZiAoc3BsaXRbMF0gPT0gJ3NjYWxlJylcclxuICAgICAgICAgICAgICBpZiAoIHRyYW5zZm9ybVZhbHVlIDw9IDEgKVxyXG4gICAgICAgICAgICAgICAgbmV3VmFsdWUgPSB0cmFuc2Zvcm1WYWx1ZSArICgob3JpZ2luYWxWYWx1ZSAtIHRyYW5zZm9ybVZhbHVlKSAqIChjb2VmZmljaWVudCAqKiBzdGVwKSlcclxuICAgICAgICAgICAgaWYgKCBwZXJjZW50YWdlID09ICcxMDAlJyApXHJcbiAgICAgICAgICAgICAgbmV3VmFsdWUgPSB0cmFuc2Zvcm1WYWx1ZVxyXG4gICAgICAgICAgICBuZXdWYWx1ZSA9IHJvdW5kKCBuZXdWYWx1ZSwgMilcclxuICAgICAgICAgICAgbmV3UHJvcCA9IGpvaW4oJycsIHNwbGl0WzBdLCAnKCcsIG5ld1ZhbHVlLCAnKScpXHJcbiAgICAgICAgICAgIHRyYW5zZm9ybVByb3BzW25dID0gdW5xdW90ZShuZXdQcm9wKVxyXG4gICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB0cmFuc2Zvcm1Qcm9wc1tuXSA9IHVucXVvdGUoJycpXHJcbiAgICAgICAgICAgIGhhbGYgPSBmbG9vcihzdGVwcy8yKVxyXG4gICAgICAgICAgICBpZiAoIHN0ZXAgPj0gaGFsZiApXHJcbiAgICAgICAgICAgICAgaWYgKCBpc0ZpbHRlciApXHJcbiAgICAgICAgICAgICAgICBmaWx0ZXJQcm9wc1tuXSA9IHByb3BcclxuICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICBmaWx0ZXJQcm9wc1tuXSA9IHVucXVvdGUoJycpXHJcbiAgICAgICAgICAgICAgICByZWd1bGFyUHJvcCA9IHNwbGl0KCcoJywgJycgKyBwcm9wKVxyXG4gICAgICAgICAgICAgICAgcmVndWxhclZhbHVlID0gc3BsaXQoJyknLCAnJyArIHJlZ3VsYXJQcm9wWzFdKVxyXG4gICAgICAgICAgICAgICAgcHJpbnRQcm9wID0gdW5xdW90ZShyZWd1bGFyUHJvcFswXSlcclxuICAgICAgICAgICAgICAgIHByaW50VmFsdWUgPSB1bnF1b3RlKHJlZ3VsYXJWYWx1ZVswXSlcclxuICAgICAgICAgICAgICAgIHtwcmludFByb3B9IHByaW50VmFsdWVcclxuICAgICAgICBpZiAoIHRyYW5zZm9ybUF2YWlsYWJsZSApXHJcbiAgICAgICAgICB0cmFuc2Zvcm0gdHJhbnNmb3JtUHJvcHNcclxuICAgICAgICBpZiAoIGZpbHRlckF2YWlsYWJsZSAmJiBsZW5ndGgoZmlsdGVyUHJvcHMpID4gMCApXHJcbiAgICAgICAgICBmaWx0ZXIgZmlsdGVyUHJvcHNcclxuc3RhdGVzKG9wdGlvbnMsIHByb3BzLi4uKVxyXG4gIGlmIGxlbmd0aChvcHRpb25zKSA+IDFcclxuICAgIHR5cGUgPSBvcHRpb25zWzBdXHJcbiAgICBwZXJjZW50YWdlID0gb3B0aW9uc1sxXVxyXG4gIGVsc2VcclxuICAgIHR5cGUgPSBvcHRpb25zXHJcbiAgICBwZXJjZW50YWdlID0gMjAlXHJcbiAgJjpob3ZlclxyXG4gICAgZm9yIHByb3AgaW4gcHJvcHNcclxuICAgICAgcHJvcENoZWNrID0gY3JlYXRlLXN0cmluZyhwcm9wKVxyXG4gICAgICBpZiBtYXRjaCgnYmFja2dyb3VuZCcsIHByb3BDaGVjaylcclxuICAgICAgICBpZiBAYmFja2dyb3VuZFxyXG4gICAgICAgICAgYmFja2dyb3VuZCB0eXBlKEBiYWNrZ3JvdW5kLCBwZXJjZW50YWdlKVxyXG4gICAgICAgIGVsc2UgaWYgQGJhY2tncm91bmQtY29sb3JcclxuICAgICAgICAgIGJhY2tncm91bmQtY29sb3IgdHlwZShAYmFja2dyb3VuZC1jb2xvciwgcGVyY2VudGFnZSlcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICBlcnJvcignbm8gYmFja2dyb3VuZC9iYWNrZ3JvdW5kLWNvbG9yIHByb3AgYXZhaWxhYmxlJylcclxuICAgICAgZWxzZSBpZiBtYXRjaCgnY29sb3InLCBwcm9wQ2hlY2spXHJcbiAgICAgICAgaWYgQGNvbG9yXHJcbiAgICAgICAgICBjb2xvciB0eXBlKEBjb2xvciwgcGVyY2VudGFnZSlcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICBlcnJvcignbm8gY29sb3IgcHJvcCBhdmFpbGFibGUnKVxyXG4gICAgICBlbHNlIGlmIG1hdGNoKCdib3JkZXInLCBwcm9wQ2hlY2spXHJcbiAgICAgICAgaWYgQGJvcmRlclxyXG4gICAgICAgICAgZm9yIGJvcmRlclByb3AgaW4gQGJvcmRlclxyXG4gICAgICAgICAgICBwcm9wVHlwZSA9IHR5cGVvZihib3JkZXJQcm9wKVxyXG4gICAgICAgICAgICBpZiBwcm9wVHlwZSA9PSAncmdiYScgfHwgcHJvcFR5cGUgPT0gJ2hzbGEnXHJcbiAgICAgICAgICAgICAgYm9yZGVyLWNvbG9yIHR5cGUoYm9yZGVyUHJvcCwgcGVyY2VudGFnZSlcclxuICAgICAgICBlbHNlIGlmIEBib3JkZXItY29sb3JcclxuICAgICAgICAgIGJvcmRlci1jb2xvciB0eXBlKGJvcmRlclByb3AsIHBlcmNlbnRhZ2UpXHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgZXJyb3IoJ25vIGJvcmRlci9ib3JkZXItY29sb3IgcHJvcCBhdmFpbGFibGUnKVxyXG4gICY6YWN0aXZlXHJcbiAgICBmb3IgcHJvcCBpbiBwcm9wc1xyXG4gICAgICBwcm9wQ2hlY2sgPSBjcmVhdGUtc3RyaW5nKHByb3ApXHJcbiAgICAgIGlmIG1hdGNoKCdiYWNrZ3JvdW5kJywgcHJvcENoZWNrKVxyXG4gICAgICAgIGlmIEBiYWNrZ3JvdW5kXHJcbiAgICAgICAgICBiYWNrZ3JvdW5kIHR5cGUoQGJhY2tncm91bmQsIChwZXJjZW50YWdlLzIpIClcclxuICAgICAgICBlbHNlIGlmIEBiYWNrZ3JvdW5kLWNvbG9yXHJcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yIHR5cGUoQGJhY2tncm91bmQtY29sb3IsIChwZXJjZW50YWdlLzIpIClcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICBlcnJvcignbm8gYmFja2dyb3VuZC9iYWNrZ3JvdW5kLWNvbG9yIHByb3AgYXZhaWxhYmxlJylcclxuICAgICAgZWxzZSBpZiBtYXRjaCgnY29sb3InLCBwcm9wQ2hlY2spXHJcbiAgICAgICAgaWYgQGNvbG9yXHJcbiAgICAgICAgICBjb2xvciB0eXBlKEBjb2xvciwgKHBlcmNlbnRhZ2UvMikgKVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgIGVycm9yKCdubyBjb2xvciBwcm9wIGF2YWlsYWJsZScpXHJcbiAgICAgIGVsc2UgaWYgbWF0Y2goJ2JvcmRlcicsIHByb3BDaGVjaylcclxuICAgICAgICBpZiBAYm9yZGVyXHJcbiAgICAgICAgICBmb3IgYm9yZGVyUHJvcCBpbiBAYm9yZGVyXHJcbiAgICAgICAgICAgIHByb3BUeXBlID0gdHlwZW9mKGJvcmRlclByb3ApXHJcbiAgICAgICAgICAgIGlmIHByb3BUeXBlID09ICdyZ2JhJyB8fCBwcm9wVHlwZSA9PSAnaHNsYSdcclxuICAgICAgICAgICAgICBib3JkZXItY29sb3IgdHlwZShib3JkZXJQcm9wLCAocGVyY2VudGFnZS8yKSApXHJcbiAgICAgICAgZWxzZSBpZiBAYm9yZGVyLWNvbG9yXHJcbiAgICAgICAgICBib3JkZXItY29sb3IgdHlwZShib3JkZXJQcm9wLCAocGVyY2VudGFnZS8yKSApXHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgZXJyb3IoJ25vIGJvcmRlci9ib3JkZXItY29sb3IgcHJvcCBhdmFpbGFibGUnKVxyXG50ZXh0LWJhY2tncm91bmQoKVxyXG4gIEBzdXBwb3J0cyAoLXdlYmtpdC1iYWNrZ3JvdW5kLWNsaXA6IHRleHQpXHJcbiAgICBiYWNrZ3JvdW5kIGFyZ3VtZW50c1xyXG4gICAgLXdlYmtpdC1iYWNrZ3JvdW5kLWNsaXAgdGV4dFxyXG4gICAgLXdlYmtpdC10ZXh0LWZpbGwtY29sb3IgdHJhbnNwYXJlbnRcclxudW5zcGxhc2goc2l6ZSwgb3B0aW9ucy4uLilcclxuICAkb3B0aW9uc0NoZWNrID0gY3JlYXRlLXN0cmluZyhvcHRpb25zKVxyXG4gIGlmIChsZW5ndGgoYXJndW1lbnRzKSA+IDEgJiYgIW1hdGNoKCdncmF5c2NhbGV8Ymx1cnxjYWNoZXxjb3Zlcnxjb250YWlufGZpeGVkfGNlbnRlcnxyZXBlYXR8bm8tcmVwZWF0fHJlcGVhdC14fHJlcGVhdC15fHRvcHxyaWdodHxib3R0b218bGVmdCcsICRvcHRpb25zQ2hlY2spKVxyXG4gICAgc2l6ZSA9IGFyZ3VtZW50c1xyXG4gICAgb3B0aW9ucyA9IHVucXVvdGUoJycpXHJcbiAgaWYgKGxlbmd0aChzaXplKSA+IDEpXHJcbiAgICAkd2lkdGggID0gc2l6ZVswXVxyXG4gICAgJGhlaWdodCA9IHNpemVbMV1cclxuICBlbHNlIGlmIChsZW5ndGgoc2l6ZSkgPT0gMSlcclxuICAgICR3aWR0aCAgPSBzaXplXHJcbiAgICAkaGVpZ2h0ID0gc2l6ZVxyXG4gIGVsc2VcclxuICAgIGVycm9yKFwiVW5zcGxhc2ggZnVuY3Rpb24gc3VwcG9ydHMgdXAgdG8gMiB2YWx1ZXMgYXMgc2l6ZS5cIilcclxuICAkZ3JheXNjYWxlID0gdW5xdW90ZSgnJylcclxuICAkYmx1ciA9IHVucXVvdGUoJycpXHJcbiAgJHF1ZXJ5ID0gJz9yYW5kb209J1xyXG4gIGlmIChvcHRpb25zKVxyXG4gICAgJG9wdGlvbnMgPSBjcmVhdGUtc3RyaW5nKG9wdGlvbnMpXHJcbiAgICAkb3B0aW9ucyA9IHJlcGxhY2UoJywnLCAnJywgJG9wdGlvbnMpXHJcbiAgICBpZiAobWF0Y2goJ2dyYXlzY2FsZScsICRvcHRpb25zQ2hlY2spKVxyXG4gICAgICAkZ3JheXNjYWxlID0gJ2cvJ1xyXG4gICAgICAkb3B0aW9ucyA9IHJlcGxhY2UoJ2dyYXlzY2FsZScsICcnLCAkb3B0aW9ucylcclxuICAgICAgJG9wdGlvbnMgPSByZXBsYWNlKCdjb2xvcicsICcnLCAkb3B0aW9ucylcclxuICAgIGlmIChtYXRjaCgnYmx1cicsICRvcHRpb25zQ2hlY2spKVxyXG4gICAgICAkYmx1ciA9ICcmYmx1cidcclxuICAgICAgJG9wdGlvbnMgPSByZXBsYWNlKCdibHVyJywgJycsICRvcHRpb25zKVxyXG4gICAgaWYgKG1hdGNoKCdjb3ZlcicsICRvcHRpb25zQ2hlY2spKVxyXG4gICAgICAkY292ZXIgPSB0cnVlXHJcbiAgICAgICRvcHRpb25zID0gcmVwbGFjZSgnY292ZXInLCAnJywgJG9wdGlvbnMpXHJcbiAgICBpZiAobWF0Y2goJ2NvbnRhaW4nLCAkb3B0aW9uc0NoZWNrKSlcclxuICAgICAgJGNvbnRhaW4gPSB0cnVlXHJcbiAgICAgICRvcHRpb25zID0gcmVwbGFjZSgnY29udGFpbicsICcnLCAkb3B0aW9ucylcclxuICAgIGlmIChtYXRjaCgnZml4ZWQnLCAkb3B0aW9uc0NoZWNrKSlcclxuICAgICAgJG9wdGlvbnMgPSByZXBsYWNlKCdmaXhlZCcsICd1bnF1b3RlKGZpeGVkKScsICRvcHRpb25zKVxyXG4gICAgaWYgKCFtYXRjaCgnY292ZXJ8Y29udGFpbnxmaXhlZHxjZW50ZXJ8cmVwZWF0fG5vLXJlcGVhdHxyZXBlYXQteHxyZXBlYXQteXx0b3B8cmlnaHR8Ym90dG9tfGxlZnQnLCAkb3B0aW9uc0NoZWNrKSlcclxuICAgICAgJGNvdmVyID0gdHJ1ZVxyXG4gICAgICAkb3B0aW9ucyA9ICdjZW50ZXInXHJcbiAgZWxzZVxyXG4gICAgJG9wdGlvbnMgPSAnY2VudGVyJ1xyXG4gICAgJGNvdmVyID0gdHJ1ZVxyXG4gICRvcHRpb25zID0gY3JlYXRlLXN0cmluZygkb3B0aW9ucylcclxuICAkb3B0aW9ucyA9IGNyZWF0ZS12YWwoJG9wdGlvbnMpXHJcbiAgJGlkID0gcmFuZG9tKDAsOTAwKVxyXG4gICR1cmwgPSBhZGQtcXVvdGVzKCdodHRwczovL3Vuc3BsYXNoLml0LycsICRncmF5c2NhbGUsICR3aWR0aCwgJy8nLCAkaGVpZ2h0LCAkcXVlcnksICRpZCwgJGJsdXIpXHJcbiAgJHVybCA9IGNyZWF0ZS12YWwoJ3VybCgnLCR1cmwsJyknKVxyXG4gICR2YWx1ZSA9IGNyZWF0ZS1ibG9jaygnJywgJHVybCwgJG9wdGlvbnMpXHJcbiAgJHZhbHVlID0gY3JlYXRlLXZhbCgkdmFsdWUpXHJcbiAgYmFja2dyb3VuZCAkdmFsdWVcclxuICBpZiAoJGNvdmVyID09IHRydWUpXHJcbiAgICBiYWNrZ3JvdW5kLXNpemUgY292ZXJcclxuICBpZiAoJGNvbnRhaW4gPT0gdHJ1ZSlcclxuICAgIGJhY2tncm91bmQtc2l6ZSBjb250YWluXHJcbndlYmtpdCgpXHJcbiAgQG1lZGlhIHNjcmVlbiBhbmQgKC13ZWJraXQtbWluLWRldmljZS1waXhlbC1yYXRpbzowKVxyXG4gICAge2Jsb2NrfVxyXG4iLCIjaGVhZGVyXHJcbiAgY29sb3IgJHdoaXRlIiwiLyoqXG4gKiBCb2R5IFN0eWxlc1xuICogLS0tLS0tLS0tLS1cbiAqIE1haW4gLyBHZW5lcmFsIGJvZHkgc3R5bGVzLlxuICovXG5cbiBib2R5XG4gIGZvbnQtZmFtaWx5ICRlbmdsaXNoXG4gIGZvbnQtc3R5bGUgIG5vcm1hbFxuICBmb250LXdlaWdodCAzMDBcbiAgY29sb3IgJHRleHRcblxuICBhbnRpYWxpYXMoKSAvLyBhbnRpYWxpYXMgZm9udHNcblxuLyoqXG4gKiBDdXN0b21pemUgc2VsZWN0aW9uIGNvbG9yLlxuICovXG46OnNlbGVjdGlvblxuICBiYWNrZ3JvdW5kIHRyYW5zcGFyZW50KCRwcmltYXJ5LCAwLjEpXG5cbi8qKlxuICogUmVtb3ZlIHRhcCBoaWdobGlnaHQgY29sb3IgKGlPUylcbiAqIGZyb20gYWxsIGVsZW1lbnRzIG9uIHNpdGUuXG4gKi9cbipcbiAgLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yIHRyYW5zcGFyZW50XG5cbi8qKlxuICogUmVtb3ZlIHVzZXItc2VsZWN0IGZyb21cbiAqIGZyb20gY2xpY2thYmxlIGVsZW1lbnRzLlxuICovXG5pbWcsIGEsIC5idXR0b24sIC5saW5rXG4gIHVzZXItc2VsZWN0IG5vbmVcblxuaW1nXG4gIHdpZHRoIDEwMCVcbiAgbWF4LXdpZHRoIDEwMCVcbiIsIi8qKlxuICogSWNvbnNcbiAqIC0tLS0tXG4gKiBSZXF1aXJlZCBpY29ucyByZWdpc3RlciB1c2luZ1xuICogSW9uaWNvbnMgZm9udCBmYW1pbHkuXG4gKi9cblxuLmljb25cbiAgcG9zaXRpb24gcmVsYXRpdmVcblxuICAvKipcbiAgICogU2V0IGRlZmF1bHRzLlxuICAgKi9cbiAgJjpiZWZvcmVcbiAgICBmb250LWZhbWlseSAkaWNvbnNcbiAgICBmb250LXNpemUgcmVtKDIycHgpXG5cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlciBiYXNpYyBpY29ucy5cbiAgICAgKi9cblxuICAgIC5waG9uZSZcbiAgICAgIGNvbnRlbnQgJ1xcZjJkMidcblxuICAgIC5mYWNlYm9vayZcbiAgICAgIGNvbnRlbnQgJ1xcZjIzMSdcblxuICAgIC50d2l0dGVyJlxuICAgICAgY29udGVudCAnXFxmMjQzJ1xuXG4gICAgLmluc3RhZ3JhbSZcbiAgICAgIGNvbnRlbnQgJ1xcZjM1MSdcblxuICAgIC55b3V0dWJlJlxuICAgICAgY29udGVudCAnXFxmMjRkJ1xuXG4gICAgLnBpbnRlcmVzdCZcbiAgICAgIGNvbnRlbnQgJ1xcZjJiMSdcblxuICAgIC5saW5rZWRpbiZcbiAgICAgIGNvbnRlbnQgJ1xcZjIzOSdcblxuICAvKipcbiAgICogU3R5bGUgYXJyb3cgKCB1cCAvIGRvd24gKSBpY29uLlxuICAgKi9cbiAgJi5hcnJvd1xuXG4gICAgJGljb24tc2l6ZSA9IDQ0cHggLy8gdmFyaWFibGUgc2l6ZVxuXG4gICAgZGlzcGxheSBibG9ja1xuICAgIHdpZHRoICRpY29uLXNpemVcbiAgICBtYXJnaW4gYXV0b1xuXG4gICAgJjpiZWZvcmVcbiAgICAgIGxpbmUtaGVpZ2h0ICRpY29uLXNpemVcbiAgICAgIHBvaW50ZXItZXZlbnRzIG5vbmVcbiAgICAgIHRyYW5zaXRpb24gY29sb3IgNDAwbXNcblxuICAgICAgLnVwJlxuICAgICAgICBjb250ZW50ICdcXGYzNjYnIC8vIHVwIGNoYXJcblxuICAgICAgLmRvd24mXG4gICAgICAgIGNvbnRlbnQgJ1xcZjM1ZCcgLy8gZG93biBjaGFyXG5cbiAgICAvKipcbiAgICAgKiBBZGQgY2lyY2xlIGFyb3VuZCB0aGUgaWNvbi5cbiAgICAgKi9cbiAgICAmOmFmdGVyXG4gICAgICBjb250ZW50ICcnXG4gICAgICBhYnNvbHV0ZSA1MCUgXyBfIDUwJVxuICAgICAgdHJhbnNmb3JtIHRyYW5zbGF0ZSgtNTAlLCAtNTAlKVxuICAgICAgc2l6ZSAkaWNvbi1zaXplXG4gICAgICBib3JkZXItcmFkaXVzIDUwJVxuICAgICAgYm9yZGVyIDFweCBzb2xpZCAkc2Vjb25kYXJ5XG4gICAgICB0cmFuc2l0aW9uIHRyYW5zZm9ybSA0MDBtc1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIHRyYW5zaXRpb25zIG9uIGhvdmVyLlxuICAgICAqL1xuXG4gICAgJjpob3ZlclxuXG4gICAgICAmOmJlZm9yZVxuICAgICAgICBjb2xvciAkc2Vjb25kYXJ5XG5cbiAgICAgICY6YWZ0ZXJcbiAgICAgICAgdHJhbnNmb3JtIHRyYW5zbGF0ZSgtNTAlLCAtNTAlKSBzY2FsZSgxLjEpXG4iLCIvKipcbiAqIExheW91dFxuICogLS0tLS0tXG4gKiBNYWluIGxheW91dCBjb21wb25lbnQuXG4gKi9cblxuc2VjdGlvblxuICBwYWRkaW5nIDUwcHggMFxuXG4uY29udGFpbmVyXG4gIG1heC13aWR0aCAxMDAwcHhcbiAgbWFyZ2luIDAgYXV0b1xuICBkaXNwbGF5IGJsb2NrXG4gIHBhZGRpbmcgMCAxcmVtXG5cbi5jb2xcbiAgYmFja2dyb3VuZCAjZWVlXG5cbi5yb3dcbiAgZGlzcGxheSB0YWJsZVxuICBwb3NpdGlvbiByZWxhdGl2ZVxuICB3aWR0aCAxMDAlXG4gIHRhYmxlLWxheW91dCBmaXhlZFxuICBvdmVyZmxvdyBoaWRkZW5cblxuICAmLnJvdy1yZXZlcnNlXG4gICAgZGlyZWN0aW9uIHJ0bFxuXG4gICAgJiA+IC5jb2xcbiAgICAgIGRpcmVjdGlvbiBsdHJcblxuICAvKipcbiAgICogU2V0IGJsb2NrIHRvIGZ1bGwgaGVpZ2h0LlxuICAgKi9cbiAgJi5mdWxsSGVpZ2h0XG4gICAgaGVpZ2h0IDEwMHZoXG5cbiAgLyoqXG4gICAqIFNldCBibG9jayB0byBzaXRlIHdpZHRoLlxuICAgKi9cbiAgJi5zaXRlV2lkdGhcbiAgICBtYXgtd2lkdGggJG1heC13aWR0aFxuICAgIG1hcmdpbiBhdXRvXG5cbiAgLyoqXG4gICAqIFNldCBibG9jayB0byBmdWxsIHdpZHRoLlxuICAgKi9cbiAgJi5mdWxsV2lkdGhcbiAgICBtYXgtd2lkdGggMTAwJVxuICAgIG1hcmdpbiBhdXRvXG5cbiAgLyoqXG4gICAqIFJlZ2lzdGUgYmxvY2sncyBjaGlsZHJlblxuICAgKiBhcyBpdCdzIGhlbHBlciBlbGVtZW50cy5cbiAgICovXG4gICYgPiAuY29sXG4gICAgZGlzcGxheSB0YWJsZS1jZWxsXG4gICAgd2lkdGggYXV0b1xuICAgIGhlaWdodCAxMDAlXG4gICAgdmVydGljYWwtYWxpZ24gdG9wXG5cbiAgICAmLmNvbC0xXG4gICAgICB3aWR0aCA4LjMzMzMzMyVcblxuICAgICYuY29sLTJcbiAgICAgIHdpZHRoIDE2LjY2NjY2NyVcblxuICAgICYuY29sLTNcbiAgICAgIHdpZHRoIDI1JVxuXG4gICAgJi5jb2wtNFxuICAgICAgd2lkdGggMzMuMzMzMzMzJVxuXG4gICAgJi5jb2wtNVxuICAgICAgd2lkdGggNDEuNjY2NjY3JVxuXG4gICAgJi5jb2wtNlxuICAgICAgd2lkdGggNTAlXG5cbiAgICAmLmNvbC03XG4gICAgICB3aWR0aCA1OC4zMzMzMzMlXG5cbiAgICAmLmNvbC04XG4gICAgICB3aWR0aCA2Ni42NjY2NjclXG5cbiAgICAmLmNvbC05XG4gICAgICB3aWR0aCA3NSVcblxuICAgICYuY29sLTEwXG4gICAgICB3aWR0aCA4My4zMzMzMzMlXG5cbiAgICAmLmNvbC0xMVxuICAgICAgd2lkdGggOTEuNjY2NjY3JVxuXG4gICAgJi5jb2wtMTJcbiAgICAgIHdpZHRoIDEwMCVcblxuICAgIC8qKlxuICAgICAqIFNldCBhbGlnbm1lbnRzLlxuICAgICAqL1xuXG4gICAgJi5taWRkbGVcbiAgICAgIHZlcnRpY2FsLWFsaWduIG1pZGRsZVxuXG4gICAgJi5ib3R0b21cbiAgICAgIHZlcnRpY2FsLWFsaWduIGJvdHRvbVxuXG4gICAgJi5jZW50ZXJcbiAgICAgIHRleHQtYWxpZ24gY2VudGVyXG5cbiAgICAvKipcbiAgICAgKiBSZXZlcnQgdG8gZGlzcGxheVxuICAgICAqIGJsb2NrIG9uIG1vYmlsZS5cbiAgICAgKi9cbiAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6ICRtb2JpbGUpXG4gICAgICBkaXNwbGF5IGJsb2NrXG5cbi5yb3ctcGFkZGVkXG4gIG1hcmdpbi1sZWZ0IC0xcmVtXG4gIG1hcmdpbi1yaWdodCAtMXJlbVxuXG4gIC5yb3dcbiAgICBib3JkZXItc3BhY2luZyAxcmVtIDAgIiwiLyoqXG4gKiBUeXBvZ3JhcGh5XG4gKiAtLS0tLS0tLS0tXG4gKiBCYXNpYyBzdHlsZXMgZm9yIHRleHR1YWwgZWxlbWVudHMuXG4gKi9cblxuaDFcbiAgZm9udC1zaXplIHJlbSg2NHB4KVxuICBtYXJnaW4tYm90dG9tIHJlbSgyMHB4KVxuXG5oMlxuICBmb250LXNpemUgcmVtKDQycHgpXG4gIG1hcmdpbi1ib3R0b20gcmVtKDE4cHgpXG5cbmgzXG4gIGZvbnQtc2l6ZSByZW0oMzJweClcbiAgbWFyZ2luLWJvdHRvbSByZW0oMTZweClcblxuaDRcbiAgZm9udC1zaXplIHJlbSgyOHB4KVxuICBtYXJnaW4tYm90dG9tIHJlbSgxNHB4KVxuXG5oNVxuICBmb250LXNpemUgcmVtKDIycHgpXG4gIG1hcmdpbi1ib3R0b20gcmVtKDEycHgpXG4gIGxldHRlci1zcGFjaW5nIHJlbSgxcHgpXG5cbmg2XG4gIGZvbnQtc2l6ZSByZW0oMTRweClcbiAgbWFyZ2luLWJvdHRvbSByZW0oOHB4KVxuICBsZXR0ZXItc3BhY2luZyByZW0oMXB4KVxuICBmb250LXdlaWdodCA2MDBcblxucFxuICBmb250LXNpemUgcmVtKDE4cHgpXG4gIGxpbmUtaGVpZ2h0IDEuMjVcblxuYVxuICBjb2xvciBpbmhlcml0XG4gIHRleHQtZGVjb3JhdGlvbiBub25lXG5cbi8qKlxuICogQXBwbHkgdXBwZXJjYXNlIHRyYW5zZm9ybVxuICogdG8gZXZlcnkgdGl0bGUgZWxlbWVudC5cbiAqL1xuaDEsIGgyLCBoMywgaDQsIGg1LCBoNlxuICB0ZXh0LXRyYW5zZm9ybSB1cHBlcmNhc2VcblxuLyoqXG4gKiBUcmltIHRvbyBsb25nIHRpdGxlIGVsZW1lbnRzLlxuICovXG5oMSwgaDIsIGgzXG4gIG92ZXJmbG93IGhpZGRlblxuICB0ZXh0LW92ZXJmbG93IGVsbGlwc2lzXG4iLCIvKipcclxuICogTGF5ZXJzXHJcbiAqIC0tLS0tLVxyXG4gKiBCYXNpYyBzdHlsZXMgZm9yIGltYWdlcyBhbmRcclxuICogb3ZlcmFsbCBiYWNrZ3JvdW5kIGNvbXBvbmVudHMuXHJcbiAqL1xyXG5cclxuLmxheWVyXHJcbiAgYWJzb2x1dGUgMFxyXG4gIHotaW5kZXggLTFcclxuXHJcbiAgLyoqXHJcbiAgICogSW1hZ2UgZGVmYXVsdHMuXHJcbiAgICovXHJcbiAgJi5pbWFnZVxyXG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbiBjZW50ZXJcclxuICAgIGJhY2tncm91bmQtcmVwZWF0IG5vLXJlcGVhdFxyXG4gICAgYmFja2dyb3VuZC1zaXplIGNvdmVyXHJcblxyXG4gIC8qKlxyXG4gICAqIEl0dGVyYXRlIHRocm91Z2ggbGF5ZXJzIGFuZCBzY2FsZSB0aGVtXHJcbiAgICogYmFzZWQgb24gdGhlaXIgcGFyYWxsYXggc3RyZW5naHQuXHJcbiAgICovXHJcbiAgZm9yIGluZGV4IGluIDAuLjEwXHJcbiAgICAkZGF0YVBhcmFsbGF4ID0gJ1tkYXRhLXBhcmFsbGF4PVwiJyArIChpbmRleCAvIDEwKSArICdcIl0nXHJcbiAgICAmeyRkYXRhUGFyYWxsYXh9XHJcbiAgICAgIHRvcCAgICBpbmRleCAqICgtNTBweClcclxuICAgICAgYm90dG9tIGluZGV4ICogKC01MHB4KVxyXG5cclxuXHJcbiIsIi8qKlxyXG4gKiBPdmVybGF5IGxheWVyXHJcbiAqL1xyXG5cclxuLmxheWVyLm92ZXJsYXlcclxuICBhYnNvbHV0ZSAwXHJcbiAgb3ZlcmZsb3cgaGlkZGVuXHJcbiAgcG9pbnRlci1ldmVudHMgbm9uZVxyXG4gIHotaW5kZXggLTFcclxuXHJcbiAgJi5ibGFja1xyXG4gICAgYmFja2dyb3VuZCB0cmFuc3BhcmVudCgkYmxhY2ssIDgwJSlcclxuXHJcbiAgJi53aGl0ZVxyXG4gICAgYmFja2dyb3VuZCB0cmFuc3BhcmVudCgkd2hpdGUsIDIwJSlcclxuXHJcblxyXG5cclxuIiwiLyoqXHJcbiAqIFZpZGVvIGxheWVyXHJcbiAqL1xyXG5cclxuLmxheWVyLnZpZGVvXHJcbiAgYWJzb2x1dGUgMFxyXG4gIG92ZXJmbG93IGhpZGRlblxyXG4gIHBvaW50ZXItZXZlbnRzIG5vbmVcclxuXHJcbiAgJiA+IC5jb2xcclxuICAgIGFic29sdXRlIDBcclxuXHJcbiAgICB2aWRlb1xyXG4gICAgICBhYnNvbHV0ZSB0b3AgbGVmdFxyXG4gICAgICBzaXplIDEwMCVcclxuICAgICAgYm9yZGVyIG5vbmVcclxuICAgICAgLy8gdHJhbnNmb3JtIHRyYW5zbGF0ZVooLTk5OTlweClcclxuXHJcbiAgICAgIEBtZWRpYSAobWluLWFzcGVjdC1yYXRpbzogMTYvOSlcclxuICAgICAgICBoZWlnaHQgMTAwMCVcclxuICAgICAgICB0b3AgLTQ1MCVcclxuXHJcbiAgICAgIEBtZWRpYSAobWF4LWFzcGVjdC1yYXRpbzogMTYvOSlcclxuICAgICAgICB3aWR0aCAxMDAwJVxyXG4gICAgICAgIGxlZnQgLTQ1MCVcclxuXHJcbiAgICAvLyByZW1vdmUgYmFyc1xyXG4gICAgLnpvb20mXHJcbiAgICAgIGNsb2NraGFuZCAtMTglIiwiLyoqXG4gKiBCdXR0b25cbiAqL1xuXG4uYnV0dG9uXG4gIHBvc2l0aW9uIHJlbGF0aXZlXG4gIGRpc3BsYXkgaW5saW5lLWJsb2NrXG4gIGN1cnNvciBwb2ludGVyXG4gIHBhZGRpbmcgMTVweCA0MHB4XG4gIHRleHQtYWxpZ24gY2VudGVyXG4gIHRleHQtdHJhbnNmb3JtIHVwcGVyY2FzZVxuICBsZXR0ZXItc3BhY2luZyAycHhcbiAgY29sb3IgJHdoaXRlXG4gIGJhY2tncm91bmQgJHByaW1hcnlcbiAgYm9yZGVyIG5vbmVcblxuICB0cmFuc2l0aW9uIGJhY2tncm91bmQgMzAwbXNcblxuICAmOmhvdmVyLFxuICAmOmFjdGl2ZVxuICAgIGJhY2tncm91bmQgZGFya2VuKCRwcmltYXJ5LCAxMCUpXG4iLCIvKipcbiAqIENhcmRcbiAqL1xuXG4uY2FyZFxuICBtYXJnaW4gMTBweFxuICB0ZXh0LWFsaWduIGxlZnRcbiAgY3Vyc29yIHBvaW50ZXJcblxuICAqXG4gICAgcG9pbnRlci1ldmVudHMgbm9uZVxuXG4gIC5pbWFnZVxuICAgIHBvc2l0aW9uIHJlbGF0aXZlXG4gICAgd2lkdGggMTAwJVxuICAgIHBhZGRpbmcgNTAlIDE2cHggNHB4XG4gICAgY29sb3Igd2hpdGVcbiAgICB0cmFuc2l0aW9uIGZpbHRlciAzMDBtc1xuXG4gICY6aG92ZXIgLmltYWdlXG4gICAgZmlsdGVyIGJyaWdodG5lc3MoMTEwJSkgc2F0dXJhdGUoMTEwJSlcblxuICAuY29udGVudFxuICAgIHBhZGRpbmcgMjRweCAxNnB4IDE2cHhcblxuICAgIGg1XG4gICAgICBmb250LXNpemUgcmVtKDI0cHgpXG5cbiAgICAucHJpY2VcbiAgICAgIGZvbnQtd2VpZ2h0IDYwMFxuICAgICAgbWFyZ2luLWxlZnQgN3B4XG5cbiAgICAgICY6YmVmb3JlXG4gICAgICAgIGNvbnRlbnQgJ0FFRCdcbiAgICAgICAgZm9udC1zaXplIDUwJVxuICAgICAgICBtYXJnaW4tcmlnaHQgM3B4XG5cbiAgICAubGlua1xuICAgICAgbWFyZ2luLXRvcCAyMHB4XG5cbiAgJi5mdWxsXG4gICAgYm94LXNoYWRvdyAwIDAgNTBweCAwIHRyYW5zcGFyZW50KCRibGFjaywgMTAlKVxuXG4gICAgLmltYWdlXG4gICAgICBwYWRkaW5nLXRvcCA3MCVcblxuICAgIC5jb250ZW50XG4gICAgICBiYWNrZ3JvdW5kIHdoaXRlXG5cbiAgICAgIC53cmFwXG4gICAgICAgIGhlaWdodCAxNjBweFxuXG4gICAgICBoNVxuICAgICAgICBmb250LXdlaWdodCA2MDBcbiAgICAgICAgbWF4LWhlaWdodCA3MHB4XG4gICAgICAgIGRpc3BsYXkgYmxvY2tcbiAgICAgICAgb3ZlcmZsb3cgaGlkZGVuXG4gICAgICAgIHRleHQtb3ZlcmZsb3cgZWxsaXBzaXNcblxuICAgICAgICBkaXNwbGF5IC13ZWJraXQtYm94XG4gICAgICAgIC13ZWJraXQtbGluZS1jbGFtcCAzXG4gICAgICAgIC13ZWJraXQtYm94LW9yaWVudCB2ZXJ0aWNhbFxuXG4gICAgICBwXG4gICAgICAgIGhlaWdodCA0NHB4XG4gICAgICAgIGRpc3BsYXkgYmxvY2tcbiAgICAgICAgb3ZlcmZsb3cgaGlkZGVuXG4gICAgICAgIHRleHQtb3ZlcmZsb3cgZWxsaXBzaXNcblxuICAgICAgICBkaXNwbGF5IC13ZWJraXQtYm94XG4gICAgICAgIC13ZWJraXQtbGluZS1jbGFtcCAyXG4gICAgICAgIC13ZWJraXQtYm94LW9yaWVudCB2ZXJ0aWNhbFxuIiwiLyoqXG4gKiBGb290ZXJcbiAqL1xuXG5mb290ZXJcbiAgYmFja2dyb3VuZCAjMzMzXG4gIGNvbG9yIHdoaXRlXG4gIHBhZGRpbmcgNDhweCAzNnB4XG5cbiAgaW1nXG4gICAgbWF4LXdpZHRoIDkwcHhcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAkbW9iaWxlKVxuICAgICAgbWFyZ2luIDIwcHggMCA0MHB4XG5cbiAgcFxuICAgIG1hcmdpbiAxMHB4IDBcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAkbW9iaWxlKVxuICAgICAgbWF4LXdpZHRoIDI0MHB4XG4gICAgICBtYXJnaW4gMTBweCBhdXRvXG5cbiAgLmNvbnRhY3RcbiAgICBhXG4gICAgICBtYXJnaW4gMCAxMHB4XG5cbiAgICAgIHRyYW5zaXRpb24gY29sb3IgMzAwbXNcbiAgICAgICY6aG92ZXJcbiAgICAgICAgY29sb3IgJHNlY29uZGFyeVxuXG4gIC5jb3B5cmlnaHRcbiAgICBtYXJnaW4tYm90dG9tIDVweFxuICAgIGZvbnQtc2l6ZSByZW0oMTRweClcbiAgICBjb2xvciB0cmFuc3BhcmVudCgkd2hpdGUsIDAuNSlcblxuICAuYnlcbiAgICBjb2xvciB0cmFuc3BhcmVudCgkd2hpdGUsIDAuNSlcblxuICAgIHRyYW5zaXRpb24gY29sb3IgMzAwbXNcbiAgICAmOmhvdmVyXG4gICAgICBjb2xvciAkd2hpdGVcblxuICAuaWNvbnNcbiAgICBtYXJnaW4gNDBweCAwIDBcblxuICAgIGxpXG4gICAgICBkaXNwbGF5IGlubGluZS1ibG9ja1xuICAgICAgbWFyZ2luIDEwcHhcblxuICAgICAgYVxuICAgICAgICBmb250LXNpemUgcmVtKDIwcHgpXG4gICAgICAgIGNvbG9yIHRyYW5zcGFyZW50KCR3aGl0ZSwgMC4yNSlcblxuICAgICAgICB0cmFuc2l0aW9uIGNvbG9yIDMwMG1zXG4gICAgICAgICY6aG92ZXJcbiAgICAgICAgICBjb2xvciB0cmFuc3BhcmVudCgkd2hpdGUsIDAuNzUpXG5cbiAgLmljb25cbiAgICBAbWVkaWEgKG1heC13aWR0aDogJG1vYmlsZSlcbiAgICAgIG1hcmdpbiA0MHB4IGF1dG8gMFxuIiwiLyoqXG4gKiBMb2FkZXJcbiAqL1xuXG4jbG9hZGVyXG4gIGZpeGVkIDBcbiAgcG9pbnRlci1ldmVudHMgbm9uZVxuICB6LWluZGV4IDk5OTk5OTk5OTk5OVxuXG4gICY6YmVmb3JlXG4gICAgY29udGVudCAnJ1xuICAgIGFic29sdXRlIDBcbiAgICBiYWNrZ3JvdW5kICR3aGl0ZVxuICAgIHotaW5kZXggLTFcblxuICAgIFtkYXRhLXJlYWR5PSd0cnVlJ10gJlxuICAgICAgYW5pbWF0ZSBsb2FkLXN3aXBlIDEwMDBtcyAyMDAwbXMgZm9yd2FyZHMsIDEwMCUgdHJhbnNsYXRlWCgxMDAlKVxuXG4gIGltZ1xuICAgIG1heC13aWR0aCAyODBweFxuICAgIGFic29sdXRlIDUwJSBfIF8gNTAlXG4gICAgdHJhbnNmb3JtIHRyYW5zbGF0ZVgoLTYwJSkgdHJhbnNsYXRlWSgtNTAlKVxuICAgIG9wYWNpdHkgMFxuXG4gICAgW2RhdGEtcmVhZHk9J3RydWUnXSAmXG4gICAgICBhbmltYXRlIGxvYWQtbG9nbyAyNTAwbXMgMTAwbXMgZm9yd2FyZHMgLCBcXFxuICAgICAgICAwJSAgIHRyYW5zbGF0ZVgoLTYwJSkgdHJhbnNsYXRlWSgtNTAlKSBvcGFjaXR5KDApLCBcXFxuICAgICAgICA0MCUgIHRyYW5zbGF0ZVgoLTUwJSkgdHJhbnNsYXRlWSgtNTAlKSBvcGFjaXR5KDEpLCBcXFxuICAgICAgICA3MCUgIHRyYW5zbGF0ZVgoLTUwJSkgdHJhbnNsYXRlWSgtNTAlKSBvcGFjaXR5KDEpLCBcXFxuICAgICAgICAxMDAlIHRyYW5zbGF0ZVgoLTMwJSkgdHJhbnNsYXRlWSgtNTAlKSBvcGFjaXR5KDApXG4iLCJuYXZcbiAgZml4ZWQgdG9wIGxlZnQgcmlnaHRcbiAgei1pbmRleCA5OTk5XG5cbiAgY29sb3IgJHByaW1hcnlcbiAgYmFja2dyb3VuZCB0cmFuc3BhcmVudCgkd2hpdGUsIDAuODUpXG5cbiAgdGV4dC1hbGlnbiBjZW50ZXJcbiAgQG1lZGlhIChtYXgtd2lkdGg6ICRtb2JpbGUpXG4gICAgdGV4dC1hbGlnbiBsZWZ0XG5cbiAgbGlcbiAgICBkaXNwbGF5IGlubGluZS1ibG9ja1xuICAgIHZlcnRpY2FsLWFsaWduIGJvdHRvbVxuXG4gICAgQGV4dGVuZCBoNlxuXG4gICAgJi5tZW51LWl0ZW1cbiAgICAgIEBtZWRpYSAobWF4LXdpZHRoOiAkbW9iaWxlKVxuICAgICAgICBkaXNwbGF5IG5vbmVcblxuICAucHJpbWFyeVxuICAgIGRpc3BsYXkgaW5saW5lLWJsb2NrXG5cbiAgICB0cmFuc2l0aW9uIHRyYW5zZm9ybSA1MDBtc1xuICAgIEBtZWRpYSAobWluLXdpZHRoOiAxMjAwcHgpXG4gICAgICB0cmFuc2Zvcm0gdHJhbnNsYXRlWCgtNXB4KVxuXG4gICAgbGlcbiAgICAgIG1hcmdpbiAyMHB4IDEwcHhcblxuICAgICAgdHJhbnNpdGlvbiBtYXJnaW4tbGVmdCA1MDBtcywgbWFyZ2luLXJpZ2h0IDUwMG1zXG4gICAgICBAbWVkaWEgKG1pbi13aWR0aDogMTIwMHB4KVxuICAgICAgICBtYXJnaW4gMjBweFxuXG4gIC5zZWNvbmRhcnlcbiAgICBhYnNvbHV0ZSB0b3AgcmlnaHRcblxuICAgIGxpXG4gICAgICBmb250LXNpemUgcmVtKDEycHgpXG4gICAgICBtYXJnaW4gMTZweCAyMHB4IDAgMFxuXG4gICAgICAmLmxhbmdcbiAgICAgICAgZm9udC1mYW1pbHkgJGFyYWJpY1xuICAgICAgICBmb250LXdlaWdodCAzMDBcblxuICAgICAgJi5waG9uZTpiZWZvcmVcbiAgICAgICAgZm9udC1zaXplIHJlbSgxMHB4KVxuICAgICAgICBtYXJnaW4tcmlnaHQgcmVtKDZweClcblxuICAubWVudS1pdGVtIGFcbiAgICBwb3NpdGlvbiByZWxhdGl2ZVxuXG4gICAgJjpiZWZvcmVcbiAgICAgIGNvbnRlbnQgJydcbiAgICAgIGFic29sdXRlIGJvdHRvbSBsZWZ0IHJpZ2h0XG4gICAgICBib3JkZXItYm90dG9tIDFweCBzb2xpZCAkc2Vjb25kYXJ5XG4gICAgICB0cmFuc2Zvcm0gc2NhbGVYKDApXG4gICAgICB0cmFuc2l0aW9uIHRyYW5zZm9ybSA2MDBtc1xuXG4gICAgJjpob3ZlcjpiZWZvcmVcbiAgICAgIHRyYW5zZm9ybSBzY2FsZVgoMSlcblxuICBsaS5sb2dvXG4gICAgbWFyZ2luIDE2cHggMjBweFxuXG4gICAgJiBhOmJlZm9yZVxuICAgICAgZGlzcGxheSBub25lXG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogJG1vYmlsZSlcbiAgICAgIG1hcmdpbiAxNHB4IDE2cHhcblxuICAgIGltZ1xuICAgICAgbWF4LWhlaWdodCA1NnB4XG5cbiAgICAgIEBtZWRpYSAobWF4LXdpZHRoOiAkbW9iaWxlKVxuICAgICAgICBtYXgtaGVpZ2h0IDQwcHhcbiJdfQ== */